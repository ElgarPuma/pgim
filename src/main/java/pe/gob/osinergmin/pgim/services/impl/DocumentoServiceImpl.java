package pe.gob.osinergmin.pgim.services.impl;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.imageio.ImageIO;
import javax.xml.bind.DatatypeConverter;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.data.domain.PageRequest;
import org.apache.poi.openxml4j.util.ZipSecureFile;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.ClientAnchor.AnchorType;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.util.IOUtils;
import org.apache.poi.util.Units;
import org.apache.poi.wp.usermodel.HeaderFooterType;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.model.XWPFHeaderFooterPolicy;
import org.apache.poi.xwpf.usermodel.LineSpacingRule;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.TableRowAlign;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFFooter;
import org.apache.poi.xwpf.usermodel.XWPFHeaderFooter;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTable.XWPFBorderType;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableCell.XWPFVertAlign;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlException;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTHMerge;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTP;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTPageMar;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSectPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTc;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTcBorders;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTcPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTVMerge;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STBorder;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STHdrFtr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STMerge;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import com.fasterxml.jackson.databind.ObjectMapper;

import gob.osinergmin.siged.remote.rest.ro.base.BaseOutRO;
import gob.osinergmin.siged.remote.rest.ro.in.ReenviarSubFlujoInRO;
import gob.osinergmin.sne.domain.dto.rest.out.BaseNotificacionOutRO;
import lombok.extern.slf4j.Slf4j;
import pe.gob.osinergmin.pgim.config.PropertiesConfig;
import pe.gob.osinergmin.pgim.dtos.*;
import pe.gob.osinergmin.pgim.exception.PgimException;
import pe.gob.osinergmin.pgim.exception.PgimException.TipoResultado;
import pe.gob.osinergmin.pgim.models.entity.PgimAgenteSupervisado;
import pe.gob.osinergmin.pgim.models.entity.PgimContrato;
import pe.gob.osinergmin.pgim.models.entity.PgimDestinatarioDoc;
import pe.gob.osinergmin.pgim.models.entity.PgimDocEtiquetaNotif;
import pe.gob.osinergmin.pgim.models.entity.PgimDocumento;
import pe.gob.osinergmin.pgim.models.entity.PgimDocumentoNotifica;
import pe.gob.osinergmin.pgim.models.entity.PgimDocumentoRelacion;
import pe.gob.osinergmin.pgim.models.entity.PgimEmpresaSupervisora;
import pe.gob.osinergmin.pgim.models.entity.PgimEspecialidad;
import pe.gob.osinergmin.pgim.models.entity.PgimFaseProceso;
import pe.gob.osinergmin.pgim.models.entity.PgimInstanciaPaso;
import pe.gob.osinergmin.pgim.models.entity.PgimInstanciaProces;
import pe.gob.osinergmin.pgim.models.entity.PgimInstanciaSeDoc;
import pe.gob.osinergmin.pgim.models.entity.PgimLiquidacion;
import pe.gob.osinergmin.pgim.models.entity.PgimMedidaAdm;
import pe.gob.osinergmin.pgim.models.entity.PgimPas;
import pe.gob.osinergmin.pgim.models.entity.PgimPasoProceso;
import pe.gob.osinergmin.pgim.models.entity.PgimPersona;
import pe.gob.osinergmin.pgim.models.entity.PgimPrgrmSupervision;
import pe.gob.osinergmin.pgim.models.entity.PgimProceso;
import pe.gob.osinergmin.pgim.models.entity.PgimRelacionPaso;
import pe.gob.osinergmin.pgim.models.entity.PgimRolProceso;
import pe.gob.osinergmin.pgim.models.entity.PgimSubcategoriaDoc;
import pe.gob.osinergmin.pgim.models.entity.PgimSubtipoSupervision;
import pe.gob.osinergmin.pgim.models.entity.PgimSupervision;
import pe.gob.osinergmin.pgim.models.entity.PgimUnidadMinera;
import pe.gob.osinergmin.pgim.models.entity.PgimUnidadOrganica;
import pe.gob.osinergmin.pgim.models.entity.PgimValorParametro;
import pe.gob.osinergmin.pgim.models.repository.AccMortalAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.AgenteSupervisadoRepository;
import pe.gob.osinergmin.pgim.models.repository.AntecedenteSupervRepository;
import pe.gob.osinergmin.pgim.models.repository.AutorizacionRepository;
import pe.gob.osinergmin.pgim.models.repository.ContrLiquidacionAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.ContratoRepository;
import pe.gob.osinergmin.pgim.models.repository.ContratoSegumntoAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.ContratoSiafAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.CotejoHechoCnsttdoRepository;
import pe.gob.osinergmin.pgim.models.repository.DemarcacionUMineraRepository;
import pe.gob.osinergmin.pgim.models.repository.DestinatarioDocRepository;
import pe.gob.osinergmin.pgim.models.repository.DetaInfraccionesRepository;
import pe.gob.osinergmin.pgim.models.repository.DocEtiquetaNotifRepository;
import pe.gob.osinergmin.pgim.models.repository.DocumentoNotificaRepository;
import pe.gob.osinergmin.pgim.models.repository.DocumentoRelacionRepository;
import pe.gob.osinergmin.pgim.models.repository.DocumentoRepository;
import pe.gob.osinergmin.pgim.models.repository.EspecialidadRepository;
import pe.gob.osinergmin.pgim.models.repository.EstadisticoIncidenteAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.EventoRepository;
import pe.gob.osinergmin.pgim.models.repository.ExpPerfaAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.ExpPerpaAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.ExppasPendientesAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.FichaRevisionRepository;
import pe.gob.osinergmin.pgim.models.repository.IncPeligrosoAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.IndicadorGeotecnicoRepository;
import pe.gob.osinergmin.pgim.models.repository.InfraccionAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.Infracciontop15AuxRepository;
import pe.gob.osinergmin.pgim.models.repository.InstanciaPasoAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.InstanciaPasoDocRepository;
import pe.gob.osinergmin.pgim.models.repository.InstanciaPasoRepository;
import pe.gob.osinergmin.pgim.models.repository.InstanciaProcesRepository;
import pe.gob.osinergmin.pgim.models.repository.InstanciaSeDocRepository;
import pe.gob.osinergmin.pgim.models.repository.ItemRecepcionDocRepository;
import pe.gob.osinergmin.pgim.models.repository.ItemTipificacionRepository;
import pe.gob.osinergmin.pgim.models.repository.LiquidacionRepository;
import pe.gob.osinergmin.pgim.models.repository.MedAdmRptAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.MedidaAdmRepository;
import pe.gob.osinergmin.pgim.models.repository.PasAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.PasRepository;
import pe.gob.osinergmin.pgim.models.repository.PasRptAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.PasoProcesoRepository;
import pe.gob.osinergmin.pgim.models.repository.FiscaDetalleAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.PasoSubcatRepository;
import pe.gob.osinergmin.pgim.models.repository.PenalidadAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.PersonaConsorcioRepository;
import pe.gob.osinergmin.pgim.models.repository.PersonaRepository;
import pe.gob.osinergmin.pgim.models.repository.PersonalOsiCargoRepository;
import pe.gob.osinergmin.pgim.models.repository.PgimComponenteMinRepository;
import pe.gob.osinergmin.pgim.models.repository.PgimEmpresaSupervisoraRepository;
import pe.gob.osinergmin.pgim.models.repository.PrgrmSupervisionRepository;
import pe.gob.osinergmin.pgim.models.repository.ProduccionObtRepository;
import pe.gob.osinergmin.pgim.models.repository.PrspstoGastoSuperRepository;
import pe.gob.osinergmin.pgim.models.repository.RankingUmGrupoRepository;
import pe.gob.osinergmin.pgim.models.repository.RecursoExtraidoRepository;
import pe.gob.osinergmin.pgim.models.repository.RelacionNotificacionRepository;
import pe.gob.osinergmin.pgim.models.repository.RelacionPasoRepository;
import pe.gob.osinergmin.pgim.models.repository.RolProcesoRepository;
import pe.gob.osinergmin.pgim.models.repository.SubTipoSupervisionRepository;
import pe.gob.osinergmin.pgim.models.repository.SubcatDocFirmaRepository;
import pe.gob.osinergmin.pgim.models.repository.SubcategoriaDocRepository;
import pe.gob.osinergmin.pgim.models.repository.SuperRptAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.SupervisionRepository;
import pe.gob.osinergmin.pgim.models.repository.SustanciaUnidadMineraRepository;
import pe.gob.osinergmin.pgim.models.repository.UnidadMineraAuxRepository;
import pe.gob.osinergmin.pgim.models.repository.UnidadMineraRepository;
import pe.gob.osinergmin.pgim.models.repository.UnidadOrganicaRepository;
import pe.gob.osinergmin.pgim.models.repository.SupervInstrumentoRepository;
import pe.gob.osinergmin.pgim.models.repository.ValorParametroRepository;
import pe.gob.osinergmin.pgim.services.AgenteSupervisadoService;
import pe.gob.osinergmin.pgim.services.AntecedenteSupervService;
import pe.gob.osinergmin.pgim.services.ArchivoService;
import pe.gob.osinergmin.pgim.services.CategoriaDocService;
import pe.gob.osinergmin.pgim.services.DocumentoRequeridoService;
import pe.gob.osinergmin.pgim.services.DocumentoService;
import pe.gob.osinergmin.pgim.services.EmpresaSupervisoraService;
import pe.gob.osinergmin.pgim.services.EqpInstanciaProService;
import pe.gob.osinergmin.pgim.services.FlujoTrabajoService;
import pe.gob.osinergmin.pgim.services.HechoConstatadoService;
import pe.gob.osinergmin.pgim.services.InstanciaProcesService;
import pe.gob.osinergmin.pgim.services.InvolucradoSupervService;
import pe.gob.osinergmin.pgim.services.LiquidacionService;
import pe.gob.osinergmin.pgim.services.NotificacionService;
import pe.gob.osinergmin.pgim.services.ProcesoService;
import pe.gob.osinergmin.pgim.services.RankingRiesgoService;
import pe.gob.osinergmin.pgim.services.RankingUmService;
import pe.gob.osinergmin.pgim.services.SupervisionService;
import pe.gob.osinergmin.pgim.services.SupervInstrumentoService;
import pe.gob.osinergmin.pgim.services.UbigeoService;
import pe.gob.osinergmin.pgim.services.UnidadMineraService;
import pe.gob.osinergmin.pgim.siged.Archivo;
import pe.gob.osinergmin.pgim.siged.ArchivoAnularInRO;
import pe.gob.osinergmin.pgim.siged.ArchivoAnularOutRO;
import pe.gob.osinergmin.pgim.siged.ArchivoRevertir;
import pe.gob.osinergmin.pgim.siged.Archivos;
import pe.gob.osinergmin.pgim.siged.ClienteConsulta;
import pe.gob.osinergmin.pgim.siged.ClienteConsultaOutRO;
import pe.gob.osinergmin.pgim.siged.ConsultaListadoDocumento;
import pe.gob.osinergmin.pgim.siged.DatosRevertirFirmaDigitalInRO2;
import pe.gob.osinergmin.pgim.siged.DescargaArchivo;
import pe.gob.osinergmin.pgim.siged.DevolverExpedienteInRO;
import pe.gob.osinergmin.pgim.siged.DevolverExpedienteOutRO;
import pe.gob.osinergmin.pgim.siged.Documento;
import pe.gob.osinergmin.pgim.siged.DocumentoAnularInRO;
import pe.gob.osinergmin.pgim.siged.DocumentoAnularOutRO;
import pe.gob.osinergmin.pgim.siged.DocumentoConsultaOutRO;
import pe.gob.osinergmin.pgim.siged.DocumentoNuevo;
import pe.gob.osinergmin.pgim.siged.DocumentoOutRO;
import pe.gob.osinergmin.pgim.siged.Documentos;
import pe.gob.osinergmin.pgim.siged.EnumerarDocumentoOutRO;
import pe.gob.osinergmin.pgim.siged.Expediente;
import pe.gob.osinergmin.pgim.siged.ExpedienteAprobadoIn;
import pe.gob.osinergmin.pgim.siged.ExpedienteDocOutRO;
import pe.gob.osinergmin.pgim.siged.ExpedienteListarPorUsuarioOut;
import pe.gob.osinergmin.pgim.siged.ExpedienteNuevo;
import pe.gob.osinergmin.pgim.siged.ExpedienteOutRO;
import pe.gob.osinergmin.pgim.siged.ExpedienteReenvio;
import pe.gob.osinergmin.pgim.siged.ExpedienteSiged;
import pe.gob.osinergmin.pgim.siged.FirmaDigitalSiged;
import pe.gob.osinergmin.pgim.siged.ReenviarSubflujo;
import pe.gob.osinergmin.pgim.siged.ResultadoRevertirFirmaDigital2;
import pe.gob.osinergmin.pgim.siged.TipoDocumento;
import pe.gob.osinergmin.pgim.siged.Tiposdocumento;
import pe.gob.osinergmin.pgim.siged.TrazabilidadDocumentoDTO;
import pe.gob.osinergmin.pgim.siged.UnidadesOutRo;
import pe.gob.osinergmin.pgim.siged.VersionArchivo;
import pe.gob.osinergmin.pgim.siged.wssoap.SigedPermisos;
import pe.gob.osinergmin.pgim.siged.wssoap.SigedSoapService;
import pe.gob.osinergmin.pgim.utils.ClaveValorUtil;
import pe.gob.osinergmin.pgim.utils.CommonsUtil;
import pe.gob.osinergmin.pgim.utils.ConstProceso;
import pe.gob.osinergmin.pgim.utils.ConstRolLiquidacion;
import pe.gob.osinergmin.pgim.utils.ConstantesUtil;
import pe.gob.osinergmin.pgim.utils.EValorParametro;
import pe.gob.osinergmin.pgim.utils.EscritorHtml;
import pe.gob.osinergmin.pgim.utils.PoiExcelUtil;
import pe.gob.osinergmin.pgim.utils.PoiWordUtil;
import pe.gob.osinergmin.soa.service.expediente.documentos.listartrazdoc.v1.ListarTrazabilidadDocumentosResponse;
import pe.gob.osinergmin.soa.service.expediente.documentos.listartrazdoc.v1.ListarTrazabilidadDocumentosResponse.TrazabilidadDocumentoOutRO;
import pe.gob.osinergmin.soa.service.expediente.documentos.revertirfirma.v1.RevertirFirmaResponse;
import pe.gob.osinergmin.pgim.services.EstaminService;

/**
 * Servicio para la gestión de la interacción con la base de datos y otros
 * servicios.
 *
 * @descripción: Lógica de negocio de la entidad Documento
 *
 * @author: ddelaguila
 * @version: 1.0
 * @fecha_de_creación: 25/06/2020
 * @fecha_de_ultima_actualización: 10/07/2020
 */
@Slf4j
@Service
@Transactional(readOnly = true)
public class DocumentoServiceImpl implements DocumentoService {

	@Autowired
	private DocumentoRepository documentoRepository;

	@Autowired
	private InstanciaProcesRepository instanciaProcesRepository;

	@Autowired
	private LiquidacionRepository liquidacionRepository;

	@Autowired
	private SupervisionRepository supervisionRepository;

	@Autowired
	private SubTipoSupervisionRepository subTipoSupervisionRepository;

	@Autowired
	private EqpInstanciaProService eqpInstanciaProService;

	@Autowired
	private EmpresaSupervisoraService empresaSupervisoraService;

	@Autowired
	private PgimEmpresaSupervisoraRepository empresaSupervisoraRepository;

	@Autowired
	private EspecialidadRepository especialidadRepository;

	@Autowired
	private SupervisionService supervisionService;

	@Autowired
	private InstanciaProcesService instanciaProcesService;

	@Autowired
	private DemarcacionUMineraRepository demarcacionUMineraRepository;

	@Autowired
	private UnidadMineraService unidadMineraService;

	@Autowired
	private ArchivoService archivoService;

	@Autowired
	private ProcesoService procesoService;

	@Autowired
	private ContratoRepository contratoRepository;

	@Autowired
	private UbigeoService ubigeoService;

	@Autowired
	private HechoConstatadoService hechoConstatadoService;

	int timeOut = ConstantesUtil.PARAM_TIMEOUT_SIGED;

	@Autowired
	private PropertiesConfig propertiesConfig;

	@Autowired
	private SigedSoapService sigedSoapService;

	@Autowired
	private LiquidacionService liquidacionService;

	@Autowired
	private FichaRevisionRepository fichaRevisionRepository;

	@Autowired
	private InvolucradoSupervService involucradoSupervService;

	@Autowired
	private DocumentoRequeridoService documentoRequeridoService;

	@Autowired
	private SubcategoriaDocRepository subcategoriaDocRepository;

	@Autowired
	private RankingUmService rankingUmService;

	@Autowired
	private RankingRiesgoService rankingRiesgoService;

	@Autowired
	private NotificacionService notificacionService;

	@Autowired
	private PasRepository pasRepository;

	@Autowired
	private UnidadMineraRepository unidadMineraRepository;

	@Autowired
	private AgenteSupervisadoRepository agenteSupervisadoRepository;

	@Autowired
	private PersonaRepository personaRepository;

	@Autowired
	private FlujoTrabajoService flujoTrabajoService;

	@Autowired
	private RelacionNotificacionRepository relacionNotificacionRepository;

	@Autowired
	private DocumentoNotificaRepository documentoNotificaRepository;

	@Autowired
	private SubcatDocFirmaRepository subcatDocFirmaRepository;

	@Autowired
	private DocumentoService documentoService;

	@Autowired
	private EventoRepository eventoRepository;

	@Autowired
	private PasAuxRepository pasAuxRepository;

	@Autowired
	private MedidaAdmRepository medidaAdmRepository;

	@Autowired
	private ExppasPendientesAuxRepository exppasPendientesAuxRepository;

	@Autowired
	private DetaInfraccionesRepository detaInfraccionesRepository;

	@Autowired
	private InfraccionAuxRepository infraccionAuxRepository;

	@Autowired
	private Infracciontop15AuxRepository infracciontop15AuxRepository;

	@Autowired
	private ExpPerfaAuxRepository expPerfaAuxRepository;

	@Autowired
	private ExpPerpaAuxRepository expPerpaAuxRepository;

	@Autowired

	private PgimComponenteMinRepository compomenteMinRepository;

	@Autowired
	private AutorizacionRepository autorizacionRepository;

	@Autowired
	private SustanciaUnidadMineraRepository sustanciaUnidadMineraRepository;

	@Autowired
	private UnidadMineraAuxRepository unidadMineraAuxRepository;

	@Autowired
	private AccMortalAuxRepository accMortalAuxRepository;

	@Autowired
	private IncPeligrosoAuxRepository incPeligrosoAuxRepository;

	@Autowired
	private SuperRptAuxRepository superRptAuxRepository;

	@Autowired
	private PasRptAuxRepository pasRptAuxRepository;

	@Autowired
	private MedAdmRptAuxRepository medAdmRptAuxRepository;

	@Autowired
	private PenalidadAuxRepository penalidadAuxRepository;

	@Autowired
	private ContratoSegumntoAuxRepository contratoSegumntoAuxRepository;

	@Autowired
	private ContratoSiafAuxRepository contratoSiafAuxRepository;

	@Autowired
	private PrspstoGastoSuperRepository prspstoGastoSuperRepository;

	@Autowired
	private InstanciaPasoAuxRepository instanciaPasoAuxRepository;

	@Autowired
	private PrgrmSupervisionRepository prgrmSupervisionRepository;

	@Autowired
	private PgimComponenteMinRepository componenteMineroRepository;

	@Autowired
	private ItemRecepcionDocRepository itemRecepcionDocRepository;

	@Autowired
	private InstanciaPasoDocRepository instanciaPasoDocRepository;

	@Autowired
	private DocumentoRelacionRepository documentoRelacionRepository;

	@Autowired
	private CategoriaDocService categoriaDocService;

	@Autowired
	private AntecedenteSupervService antecedenteSupervService;

	@Autowired
	AntecedenteSupervRepository antecedenteSupervRepository;

	@Autowired
	PgimComponenteMinRepository componenteMinRepository;

	@Autowired
	private ItemTipificacionRepository itemTipificacionRepository;

	@Autowired
	private RankingUmGrupoRepository rankingUmGrupoRepository;

	@Autowired
	private ValorParametroRepository valorParametroRepository;

	@Autowired
	private RolProcesoRepository rolProcesoRepository;

	@Autowired
	private PersonaConsorcioRepository personaConsorcioRepository;

	@Autowired
	private InstanciaSeDocRepository instanciaSeDocRepository;

	@Autowired
  	private SupervInstrumentoService supervInstrumentoService;

	@Autowired
	private  SupervInstrumentoRepository supervInstrumentoRepository;

	@Autowired
	private  PasoSubcatRepository pasoSubcatRepository;
	
	@Autowired
    private IndicadorGeotecnicoRepository indicadorGeotecnicoRepository;
	
	@Autowired
	private  InstanciaPasoRepository instanciaPasoRepository;	

	@Autowired
	private  RecursoExtraidoRepository recursoExtraidoRepository;

	@Autowired
	private  UnidadOrganicaRepository unidadOrganicaRepository;
	
	@Autowired
	private PasoProcesoRepository pasoProcesoRepository;

	@Autowired
	private ContrLiquidacionAuxRepository contrLiquidacionAuxRepository;

	@Autowired
	private EstaminService estaminService;

	@Autowired
	private  PersonalOsiCargoRepository personalOsiCargoRepository;

	@Autowired
	private FiscaDetalleAuxRepository fiscaDetalleAuxRepository;

	@Autowired
	private DocEtiquetaNotifRepository docEtiquetaNotifRepository;
	
	@Autowired
	private DestinatarioDocRepository destinatarioDocRepository;

	@Autowired
	private RelacionPasoRepository relacionPasoRepository;

	@Autowired
	private InfraccionServiceImpl infraccionServiceImpl;

	@Autowired
	private CotejoHechoCnsttdoRepository cotejoHechoCnsttdoRepository;

	@Autowired
	private AgenteSupervisadoService agenteSupervisadoService; 

	@Autowired
	private ProduccionObtRepository produccionObtRepository;

	@Autowired
	private EstadisticoIncidenteAuxRepository estadisticoIncidenteAuxRepository;

	@Override
	public PgimDocumentoDTO obtenerDocumentoById(Long idDocumento) {
		PgimDocumentoDTO pgimDocumentoDTO = this.documentoRepository
				.obtenerDocumentoById(idDocumento);

		return pgimDocumentoDTO;
	}

	@Transactional(readOnly = false)
	public Long registrarDocumento(PgimDocumentoDTO documentoDTO, AuditoriaDTO auditoriaDTO) {
		Long idDocumentoCreado = 0L;

		PgimDocumento pgimDocumentoNuevo = null;

		pgimDocumentoNuevo = new PgimDocumento();

		pgimDocumentoNuevo.setPgimInstanciaProces(new PgimInstanciaProces());
		pgimDocumentoNuevo.getPgimInstanciaProces().setIdInstanciaProceso(documentoDTO.getIdInstanciaProceso());

		pgimDocumentoNuevo.setPgimSubcategoriaDoc(new PgimSubcategoriaDoc());
		pgimDocumentoNuevo.getPgimSubcategoriaDoc().setIdSubcatDocumento(documentoDTO.getIdSubcatDocumento());

		pgimDocumentoNuevo.setTipoOrigenDocumento(new PgimValorParametro());
		pgimDocumentoNuevo.getTipoOrigenDocumento().setIdValorParametro(documentoDTO.getIdTipoOrigenDocumento());

		pgimDocumentoNuevo.setPgimFaseProceso(new PgimFaseProceso());
		pgimDocumentoNuevo.getPgimFaseProceso().setIdFaseProceso(documentoDTO.getIdFaseProceso());

		if (documentoDTO.getIdDocumento() != null) {
			pgimDocumentoNuevo.setPgimDocumentoPadreCopia(new PgimDocumento());
			pgimDocumentoNuevo.getPgimDocumentoPadreCopia().setIdDocumento(documentoDTO.getIdDocumento());
		}
		
		if (documentoDTO.getCoDocumentoSigedPCopia() != null) {
			pgimDocumentoNuevo.setCoDocumentoSigedPCopia(documentoDTO.getCoDocumentoSigedPCopia());			
		}

		pgimDocumentoNuevo.setCoDocumentoSiged(documentoDTO.getCoDocumentoSiged());
		pgimDocumentoNuevo.setSeDocumento(documentoDTO.getSeDocumento());
		pgimDocumentoNuevo.setDeAsuntoDocumento(documentoDTO.getDeAsuntoDocumento());
		pgimDocumentoNuevo.setFeOrigenDocumento(documentoDTO.getFeOrigenDocumento());

		pgimDocumentoNuevo.setFlReservaActiva(documentoDTO.getFlReservaActiva());
		
		pgimDocumentoNuevo.setEsRegistro(ConstantesUtil.IND_ACTIVO);
		pgimDocumentoNuevo.setFeCreacion(auditoriaDTO.getFecha());
		pgimDocumentoNuevo.setUsCreacion(auditoriaDTO.getUsername());
		pgimDocumentoNuevo.setIpCreacion(auditoriaDTO.getTerminal());

		pgimDocumentoNuevo = this.documentoRepository.save(pgimDocumentoNuevo);

		idDocumentoCreado = pgimDocumentoNuevo.getIdDocumento();
		
		return idDocumentoCreado;
	}

	/**
	 * Permite obtener la persona jurídica con la que se asociará el expediente
	 * Siged que se requiere crear.
	 *
	 * @param pgimInstanciaProcesDTO
	 * @return
	 */
	private PgimPersona obtenerPersonaJuridica(PgimInstanciaProcesDTO pgimInstanciaProcesDTO) {
		PgimPersona pgimPersona = null;
		PgimUnidadMinera pgimUnidadMinera = null;
		String mensajeError = "";

		Long coTablaInstancia = pgimInstanciaProcesDTO.getCoTablaInstancia();

		if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_EVENTO)
				|| pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_AUTORIZACION)
				|| pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_DENUNCIA)) {

			pgimUnidadMinera = this.unidadMineraRepository.findById(coTablaInstancia).orElse(null);

		} else if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {

			PgimSupervision pgimSupervision = this.supervisionRepository.findById(coTablaInstancia).orElse(null);
			pgimUnidadMinera = pgimSupervision.getPgimUnidadMinera();

		} else if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)) {

			PgimLiquidacion pgimLiquidacion = this.liquidacionRepository.findById(coTablaInstancia).orElse(null);
			PgimContrato pgimContrato = this.contratoRepository
					.findById(pgimLiquidacion.getPgimContrato().getIdContrato()).orElse(null);
			PgimEmpresaSupervisora pgimEmpresaSupervisora = this.empresaSupervisoraRepository
					.findById(pgimContrato.getPgimEmpresaSupervisora().getIdEmpresaSupervisora()).orElse(null);
			pgimPersona = pgimEmpresaSupervisora.getPgimPersona();

		} else if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_CONTRATO)) {

			mensajeError = "No se debe crear ningún expediente en el proceso contrato porque este ya debe existir en el Siged";
			log.error(mensajeError);

			throw new PgimException(TipoResultado.WARNING, mensajeError); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario

		} else if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)) {

			PgimPas pgimPas = this.pasRepository.findById(coTablaInstancia).orElse(null);
			Long idSupervision = pgimPas.getPgimSupervision().getIdSupervision();
			PgimSupervision pgimSupervision = this.supervisionRepository.findById(idSupervision).orElse(null);

			pgimUnidadMinera = pgimSupervision.getPgimUnidadMinera();

		} else if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_MEDIDA_ADM)) {

			PgimMedidaAdm pgimMedidaAdm = this.medidaAdmRepository.findById(coTablaInstancia).orElse(null);

			if (pgimMedidaAdm.getTipoObjeto().getIdValorParametro()
					.equals(this.valorParametroRepository
							.obtenerIdValorParametro(EValorParametro.OBRMA_UNDAD_MNERA.toString()))) {
				pgimUnidadMinera = pgimMedidaAdm.getPgimUnidadMinera();

			} else if (pgimMedidaAdm.getTipoObjeto().getIdValorParametro()
					.equals(this.valorParametroRepository
							.obtenerIdValorParametro(EValorParametro.OBRMA_SPRVSION.toString()))) {

				PgimSupervision pgimSupervision = pgimMedidaAdm.getPgimSupervision();
				pgimUnidadMinera = pgimSupervision.getPgimUnidadMinera();

			} else if (pgimMedidaAdm.getTipoObjeto().getIdValorParametro()
					.equals(this.valorParametroRepository
							.obtenerIdValorParametro(EValorParametro.OBRMA_FSCLZCION.toString()))) {
				PgimPas pgimPas = pgimMedidaAdm.getPgimPas();
				Long idSupervision = pgimPas.getPgimSupervision().getIdSupervision();
				PgimSupervision pgimSupervision = this.supervisionRepository.findById(idSupervision).orElse(null);

				pgimUnidadMinera = pgimSupervision.getPgimUnidadMinera();
			}
		}

		if (pgimUnidadMinera != null) {
			PgimAgenteSupervisado pgimAgenteSupervisado = this.agenteSupervisadoRepository
					.findById(pgimUnidadMinera.getPgimAgenteSupervisado().getIdAgenteSupervisado()).orElse(null);
			Long idPersona = pgimAgenteSupervisado.getPgimPersona().getIdPersona();

			pgimPersona = this.personaRepository.findById(idPersona).orElse(null);
		}

		if (pgimPersona == null) {
			mensajeError = "No se ha podido encontrar al agente fiscalizado o empresa supervisora en el maestro de personas de la PGIM";
			log.error(mensajeError);

			throw new PgimException(TipoResultado.WARNING, mensajeError); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		return pgimPersona;
	}

	@Override
	@Transactional(readOnly = false)
	public ResponseEntity<ResponseDTO> procesarAdjuntadoDocumento(PgimDocumentoDTO pgimDocumentoDTO,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, MultipartFile fileDocumento, AuditoriaDTO auditoriaDTO)
			throws Exception {

		if(pgimDocumentoDTO.getFlReservaActiva() == null) 
				pgimDocumentoDTO.setFlReservaActiva(ConstantesUtil.IND_INACTIVO);

		if(pgimDocumentoDTO.getFlReservaActiva().equals(ConstantesUtil.IND_ACTIVO)){
			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = this.subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(pgimDocumentoDTO.getIdSubcatDocumento());

			String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_RESERVA_NUMERO;
			String extension = CommonsUtil.obtenerExtensionNombreArchivo(ruta);
			File plantilla = new File(ruta);
			Path rutaPlantilla = Paths.get(plantilla.getPath());
			String nombreArchivo = pgimSubcategoriaDocDTO.getNoArchivoReserva() + "." + extension;
			fileDocumento = new MockMultipartFile(nombreArchivo, Files.newInputStream(rutaPlantilla));
			
		}

		pgimDocumentoDTO.setIdProceso(pgimInstanciaProcesDTO.getIdProceso());
		boolean flValidarPropietario = true;
        Map<String, Object> respuestaLog = new HashMap<>();

		// Obtener la instancia del proceso
		List<PgimInstanciaProcesDTO> lPgimInstanciaProcesDTO = this.instanciaProcesService.asegurarInstanciasProceso(
				pgimInstanciaProcesDTO.getIdProceso(), pgimInstanciaProcesDTO.getCoTablaInstancia(), auditoriaDTO);

		PgimInstanciaProcesDTO pgimInstanciaProcesDTOActual = lPgimInstanciaProcesDTO.get(0);
		PgimInstanciaProcesDTO pgimInstanciaProcesDTOPadre = lPgimInstanciaProcesDTO.get(1);
				
		if(pgimInstanciaProcesDTO.getIdInstanciaProceso() != null){
			Long idInstanciaProces = this.instanciaProcesService.obtenerInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso()).getIdInstanciaProceso();
	
			if (idInstanciaProces != null) {
				respuestaLog = this.flujoTrabajoService.mostrarLog(idInstanciaProces, auditoriaDTO.getUsername());
			} else {
				respuestaLog.put("codigoObjeto", auditoriaDTO.getUsername());
			}
		}else{
			respuestaLog.put("codigoObjeto", auditoriaDTO.getUsername());
		}

		// Validar que no haya superado la cantidad permitida de documentos por subcat y paso

		if (pgimInstanciaProcesDTO.getIdProceso().equals(ConstProceso.FISCALIZACION) ||
				pgimInstanciaProcesDTO.getIdProceso().equals(ConstProceso.PAS) ||
				pgimInstanciaProcesDTO.getIdProceso().equals(ConstProceso.PROGRAMACION) ||
				pgimInstanciaProcesDTO.getIdProceso().equals(ConstProceso.LIQUIDACION) ||
				pgimInstanciaProcesDTO.getIdProceso().equals(ConstProceso.RANKIGS) ||
				pgimInstanciaProcesDTO.getIdProceso().equals(ConstProceso.CONFIGURACIONES_DE_RIESGO)) {

			if (pgimDocumentoDTO.getDescIdInstanciaPasoActual() == null) {
				log.error(respuestaLog.get("codigoObjeto").toString() + ".[La instancia del paso actual del flujo de trabajo no ha sido especificada]" ); // STORY:PGIM-7606 // DATA
				throw new PgimException(TipoResultado.ERROR, "La instancia del paso actual del flujo de trabajo no ha sido especificada");
			}

			String sValidacion = this.validarCantidadDocumentosPermitidos(pgimDocumentoDTO,
					pgimInstanciaProcesDTOActual, auditoriaDTO);

			if (sValidacion != null) {
				throw new PgimException(TipoResultado.WARNING, sValidacion);
			}
		}
		
		// Determinar si se va a validar el propietario. No se debe validar en caso sea subflujo secundario
		if (pgimDocumentoDTO.getDescIdInstanciaPasoActual() != null) {
			PgimInstanciaPasoDTO pgimInstanciaPasoDTOActual = this.instanciaPasoRepository.obtenerInstanciaPasoPorId(pgimDocumentoDTO.getDescIdInstanciaPasoActual());
			if(pgimInstanciaPasoDTOActual != null && pgimInstanciaPasoDTOActual.getIdTipoSubflujo() != null 
					&& pgimInstanciaPasoDTOActual.getIdTipoSubflujo().equals(ConstantesUtil.PARAM_TIPO_SUBFLUJO_SECUNDARIO)) {
				flValidarPropietario = false;	
			}
		}
		
		// Obtener correlativo
		Long correlativoArchivo = archivoService.obtenerCorrelativoCodNombre();

		// Obtener el nombre original del archivo
		String noOriginalArchivo = fileDocumento.getOriginalFilename();

		if (noOriginalArchivo.equals("")) {
			noOriginalArchivo = fileDocumento.getName();
		}

		// validar que el nombre de archivo no supere los 160 carácteres.
		if (noOriginalArchivo.length() > 164) {
			String mensaje = "No es posible adjuntar el documento porque el nombre del archivo supera los 160 caracteres. Por favor reduzca el tamaño del nombre del archivo";
			return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(TipoResultado.WARNING, mensaje, 0));
		}

		// validar que el archivo tenga la extension permitida.
		String extensionesPermitidas = this.subcategoriaDocRepository
				.obtenerExtensionesPermitidasByIdSubcatDocumento(pgimDocumentoDTO.getIdSubcatDocumento());

		if (!CommonsUtil.esExtensionArchivoValida(noOriginalArchivo, extensionesPermitidas)) {
			String mensaje = "No es posible adjuntar el documento porque el archivo no tiene la extensión permitida.";
			return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(TipoResultado.WARNING, mensaje, 0)); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		// Obtener el nombre codificado del archivo
		String nombreCodificado = archivoService.codificarArchivoPgim(noOriginalArchivo,
				pgimDocumentoDTO.getIdSubcatDocumento(), correlativoArchivo);

		nombreCodificado = CommonsUtil.removerCaracteresEspeciales(nombreCodificado);


		// Cambiando nombre al archivo cargado
		MultipartFile multipartFile = new MockMultipartFile(nombreCodificado, fileDocumento.getInputStream());
		
		// Validamos el nombre del archivo para evitar el error remitido por el Siged cuando se supera la longitud máxima
		multipartFile = this.archivoService.validarLongitudNombreArchivo(multipartFile);

		// Determinar el número del documento
		if(pgimDocumentoDTO.getDescFlAdjuntadoFormPrincipal() != null && pgimDocumentoDTO.getDescFlAdjuntadoFormPrincipal().equals("1")) {
			String numDocFormateado = this.documentoService.generarNumeroDocFormateado(pgimDocumentoDTO, pgimInstanciaProcesDTOActual, auditoriaDTO);
			if(numDocFormateado != null) pgimDocumentoDTO.setNumeroDocumento(numDocFormateado);
		}

		String nuExpedienteSiged = null;
		ExpedienteOutRO expedienteOutRO = null;
		Long idDocumentoSiged = null;
		Long idInstanciaProcesoFinal = pgimInstanciaProcesDTOActual.getIdInstanciaProceso();
		boolean seHaCreadoExpedienteSiged = false;
		PgimPersona pgimPersonaAgenteSupervisado = null;

		if (pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_EVENTO)
				|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_AUTORIZACION)
				|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_DENUNCIA)) {

			if (pgimInstanciaProcesDTOPadre.getNuExpedienteSiged() == null) {
				pgimPersonaAgenteSupervisado = this.obtenerPersonaJuridica(pgimInstanciaProcesDTOPadre);

				expedienteOutRO = this.crearExpedienteSiged(pgimPersonaAgenteSupervisado,
						pgimInstanciaProcesDTOActual.getIdProceso(), pgimDocumentoDTO, multipartFile, auditoriaDTO);
				nuExpedienteSiged = expedienteOutRO.getCodigoExpediente();
				pgimInstanciaProcesDTOPadre.setNuExpedienteSiged(nuExpedienteSiged);

				seHaCreadoExpedienteSiged = true;

				// Actualizar el expediente en el registro correspondiente:
				this.instanciaProcesService.persistirExpedienteSiged(pgimInstanciaProcesDTOPadre, auditoriaDTO);
				idDocumentoSiged = Long.parseLong(expedienteOutRO.getIdDocumento());
			} else {
				nuExpedienteSiged = pgimInstanciaProcesDTOPadre.getNuExpedienteSiged();
			}

		} else if (pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)
				|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)
				|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_CONTRATO)
				|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)
				|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_MEDIDA_ADM)) {
	
			if (pgimInstanciaProcesDTOActual.getNuExpedienteSiged() == null) {
				pgimPersonaAgenteSupervisado = this.obtenerPersonaJuridica(pgimInstanciaProcesDTOActual);

				expedienteOutRO = this.crearExpedienteSiged(pgimPersonaAgenteSupervisado,
						pgimInstanciaProcesDTOActual.getIdProceso(), pgimDocumentoDTO, multipartFile, auditoriaDTO);

				// Si hay un error en el consumo del servicio SIGED para crear el expediente,
				// debe enviar el error
				if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
					throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
				}

				seHaCreadoExpedienteSiged = true;

				nuExpedienteSiged = expedienteOutRO.getCodigoExpediente();

				pgimInstanciaProcesDTOActual.setNuExpedienteSiged(nuExpedienteSiged);

				// Actualizar el expediente en el registro correspondiente:
				this.instanciaProcesService.persistirExpedienteSiged(pgimInstanciaProcesDTOActual, auditoriaDTO);
				idDocumentoSiged = Long.parseLong(expedienteOutRO.getIdDocumento());
			} else {
				nuExpedienteSiged = pgimInstanciaProcesDTOActual.getNuExpedienteSiged();
			}
		}

		// Ya existe expediente:
		if (idDocumentoSiged == null) {

			// Validación del propietario del expediente. 
			if(flValidarPropietario) {
				ExpedienteSiged expedienteSiged = new ExpedienteSiged();
				expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
				expedienteSiged.setNumeroExpediente(nuExpedienteSiged);
	
				ExpedienteDocOutRO objResultado = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
						pgimInstanciaProcesDTOActual.getIdProceso(), "Agregar documento", auditoriaDTO);
	
				if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
					throw new PgimException(TipoResultado.ERROR, objResultado.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
				}
			}

			DocumentoNuevo docNuevoSiged = new DocumentoNuevo(nuExpedienteSiged, multipartFile.getName(),
					pgimDocumentoDTO.getDeAsuntoDocumento(), String.valueOf(pgimDocumentoDTO.getCoTipoDocumentoSiged()),
					pgimDocumentoDTO.getNumeroDocumento(), pgimDocumentoDTO.getFlNumeradoPorSiged(),
					auditoriaDTO.getCoUsuarioSiged());

			// Registrar documento Siged (WS)
			DocumentoOutRO documentoOutRO = this.agregarDocumentoSiged_old(docNuevoSiged, multipartFile);

			// Si hay un error en el consumo del servicio SIGED, debe enviar el error
			if (!documentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException(TipoResultado.ERROR, documentoOutRO.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
			}

			idDocumentoSiged = new Long(documentoOutRO.getCodigoDocumento());
		}

		if (nuExpedienteSiged == null) {
			String mensajeError = "No se ha definido un expediente Siged";
			throw new PgimException(TipoResultado.WARNING, mensajeError); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		// Registrar documento PGIM
		pgimDocumentoDTO.setCoDocumentoSiged(idDocumentoSiged);
		pgimDocumentoDTO.setSeDocumento(correlativoArchivo);
		pgimDocumentoDTO.setIdInstanciaProceso(idInstanciaProcesoFinal);
		if (seHaCreadoExpedienteSiged) {
			pgimDocumentoDTO.setDescFlExpedienteCreado(1);
		}

		Long idDocumento = this.registrarDocumento(pgimDocumentoDTO, auditoriaDTO);
		pgimDocumentoDTO.setIdDocumento(idDocumento);

		// Registrar archivo PGIM (Log)
		PgimArchivoDTO archivoDTO = new PgimArchivoDTO();
		archivoDTO.setIdDocumento(idDocumento);
		archivoDTO.setNoOriginalArchivo(noOriginalArchivo);
		archivoDTO.setNoNuevoArchivo(nombreCodificado);
		archivoDTO.setSeArchivo(correlativoArchivo);

		this.archivoService.registrarArchivo(archivoDTO, auditoriaDTO);

		PgimInstanciaProces pgimInstanciaProcesActual = this.instanciaProcesRepository
				.findById(pgimInstanciaProcesDTOActual.getIdInstanciaProceso()).orElse(null);

		this.instanciaProcesService.actualizarInstProcTablaInstancia(pgimInstanciaProcesActual, auditoriaDTO);

		if (pgimDocumentoDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {
			this.supervisionService.procesarAccionesAdicionales(pgimDocumentoDTO, idDocumento, auditoriaDTO);

			PgimSubcategoriaDoc pgimSubcategoriaDoc = categoriaDocService
					.obtenerSubcategoria(pgimDocumentoDTO.getIdSubcatDocumento());

			if (pgimSubcategoriaDoc.getPgimCategoriaDoc()
					.getIdCategoriaDocumento() == ConstantesUtil.PARAM_CATEGORIA_DOC_ANTECEDENTE) {

				Long idTipoAntecedente = antecedenteSupervRepository
						.tipoAntecedente(pgimDocumentoDTO.getIdSubcatDocumento());

				PgimAntecedenteSupervDTO pgimAntecedenteSupervDTO = new PgimAntecedenteSupervDTO();
				pgimAntecedenteSupervDTO.setIdDocumento(idDocumento);
				pgimAntecedenteSupervDTO.setIdSupervision(pgimInstanciaProcesDTOActual.getCoTablaInstancia());
				pgimAntecedenteSupervDTO.setIdTipoAntecedente(idTipoAntecedente);
				pgimAntecedenteSupervDTO.setIdTipoSupervision(pgimDocumentoDTO.getDescIdTipoSupervision());
				pgimAntecedenteSupervDTO.setFeInicioSupervisionReal(pgimDocumentoDTO.getDescFeInicioSupervisionReal());
				pgimAntecedenteSupervDTO.setFeFinSupervisionReal(pgimDocumentoDTO.getDescFeFinSupervisionReal());
				pgimAntecedenteSupervDTO.setNuExpedienteSiged(pgimDocumentoDTO.getDescNuExpedienteSiged());

				this.antecedenteSupervService.crearAntecedente(pgimAntecedenteSupervDTO, auditoriaDTO);
			}

		}

		String mensaje = "Genial, el documento ha sido adjuntado; puede revisarlo en la pestaña de \"DOCUMENTOS\"";
		if(pgimDocumentoDTO.getFlReservaActiva().equals(ConstantesUtil.IND_ACTIVO))
				mensaje =  "Genial, el documento ha sido reservado para la numeración; puede revisarlo en la pestaña de \"DOCUMENTOS\""; 

		ResponseDTO respuesta = new ResponseDTO(TipoResultado.SUCCESS, mensaje , idDocumento); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		pgimDocumentoDTO.setNuExpedienteSiged(nuExpedienteSiged);
		pgimDocumentoDTO.setDescFlExpedienteCreado((seHaCreadoExpedienteSiged ? 1 : 0));
		respuesta.setData(pgimDocumentoDTO);

		return ResponseEntity.status(HttpStatus.CREATED).body(respuesta);
	}

	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = false)
	public ResponseEntity<ResponseDTO> procesarGenerarDocumento(PgimDocumentoDTO pgimDocumentoDTO,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) throws Exception {

		ResponseEntity<ResponseDTO> respuesta = null;
		List<File> lstArchivosTmp = new ArrayList<>();

		// Obtener cotablaInstancia
		PgimInstanciaProces pgimInstanciaProces = instanciaProcesService
				.obtenerInstanciaProcesoPorId(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		pgimInstanciaProcesDTO.setCoTablaInstancia(pgimInstanciaProces.getCoTablaInstancia());
		
		PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTO = this.agenteSupervisadoService.obtenerAgenteSupervisadoPorInstancProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		String nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();
		Long idSubCatDoc = pgimDocumentoDTO.getIdSubcatDocumento();
		ExpedienteDocOutRO documentossExpedienteSiged = null;
		Long idFaseProceso = pgimDocumentoDTO.getIdFaseProceso();

		// Validación del propietario del expediente
		if (nuExpedienteSiged != null) {
			ExpedienteSiged expedienteSiged = new ExpedienteSiged();
			expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
			expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());
			documentossExpedienteSiged = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
					pgimInstanciaProcesDTO.getIdProceso(), "Generar documento", auditoriaDTO);
			if (!documentossExpedienteSiged.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException(TipoResultado.ERROR, documentossExpedienteSiged.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
			}
		}

		DocumentoNuevo documentoNuevo = null;
		String idDocumentoSiged = "";
		List<String> lIdDocumentoSiged = new ArrayList<String>();
		Long coTipoDocumentoSigedEvaluar = pgimDocumentoDTO.getCoTipoDocumentoSiged();

		// Datos de Supervisión y unidad minera
		PgimSupervisionDTO pgimSupervisionDTO = supervisionRepository
				.obtenerSupervisionByidInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		// Obtener idPrograma
		PgimSupervisionDTO pgimSupervisionDTO_TDR = supervisionService
				.obtenerSupervisionPorId(pgimSupervisionDTO.getIdSupervision());
		String flPropia = pgimSupervisionDTO_TDR.getFlPropia();
		PgimEspecialidad pgimEspecialidad = especialidadRepository
				.getOne(pgimSupervisionDTO_TDR.getDescIdEspecialidad());
		pgimSupervisionDTO.setDescNoEspecialidad(pgimEspecialidad.getNoEspecialidad());
		PgimSubtipoSupervision pgimSubtipoSupervision = subTipoSupervisionRepository
				.getOne(pgimSupervisionDTO.getIdSubtipoSupervision());
		pgimSupervisionDTO.setDescDeMensaje(pgimSubtipoSupervision.getDeSubtipoSupervision());
		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());

		// Obtener los datos de las personas asignadas a la supervisión
		List<PgimEqpInstanciaProDTO> lstPgimEqpInstanciaProDTO = instanciaProcesService.obtenerParticipantesInstanciaProXRol(pgimInstanciaProcesDTO.getIdInstanciaProceso(),
																															ConstantesUtil.PARAM_id_rol_SUPERVISOR);

		// En caso se cree un expediente guardar el valor
		int descFlExpedienteCreado = 0;

		// Procesar de acuerdo al tipo de documento

		// CASO 1: Generación DJI
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_tipo_doc_DJI) == 0 && lstPgimEqpInstanciaProDTO.size() > 0
			&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_DJI) == 0) {
			// Generar y adjuntar las DJ de los supervisores

			PgimEqpInstanciaProDTO pgimEqpPrimero = null;

			Long idTipoExtensionGen = null;
			String extensionDJI = null;

			for (PgimEqpInstanciaProDTO pgimEqp : lstPgimEqpInstanciaProDTO) {

				if (pgimEqp.getDescDeOrigen().equals("Osinergmin")) {
					continue;
				}

				PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository.obtenerSubcategoriaDocPorId(idSubCatDoc);

				idTipoExtensionGen = pgimSubcategoriaDocDTO.getIdTipoExtensionGen();
				extensionDJI = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

				byte[] byteDoc = generarDJI(pgimEqp.getDescNoCompletoPersona(), pgimEqp.getNoPrefijoPersonaEquipo(), pgimEqp.getNoCargoPersonaEquipo(),
											pgimEqp.getDescCoDocumentoIdentidad(), pgimUnidadMineraDTO, idTipoExtensionGen,
											pgimSupervisionDTO.getCoSupervision(), nuExpedienteSiged);

				String strName = CommonsUtil.generadorNombreUnico();
				String strPath = propertiesConfig.getCarpetaTmp() + strName + extensionDJI;
				Path docPath = Paths.get(strPath);
				Files.write(docPath, byteDoc);
				File fileSiged = new File(strPath);
				lstArchivosTmp.add(fileSiged);

				MultipartFile fileDocumento = new MockMultipartFile( "DJI-" + pgimEqp.getDescNoPersonaDoc() + "_" + pgimEqp.getDescIdPersona() + extensionDJI, new FileInputStream(fileSiged));

				pgimDocumentoDTO.setDeAsuntoDocumento("DJI de " + pgimEqp.getDescNoCompletoPersona());
				pgimDocumentoDTO.setNumeroDocumento(
						"DJI-" + pgimInstanciaProcesDTO.getCoTablaInstancia() + "-" + pgimEqp.getDescIdPersona());
				pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

				// Validar que no haya sido generado o cargado previamente el documento (por su
				// número)
				boolean reemplazar = false;
				if (documentossExpedienteSiged != null) {
					for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
						if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
								&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

							// Validar si el documento tiene algún archivo firmado digitalmente
							// lo que es una restricción para la generación
							for (Archivo archivoSiged : documento.getArchivos()) {
								if (archivoSiged.getFirmaDigitalSiged() != null) {
									if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
										if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
											throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
										}
										if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
											throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
										}
									}
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;
							documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "",
									"", auditoriaDTO.getCoUsuarioSiged());
							idDocumentoSiged = documento.getIdDocumento();
							lIdDocumentoSiged.add(idDocumentoSiged);
						}
						if (reemplazar) {
							break;
						}
					}
				}

				if (reemplazar) {
					// Si lo encuentra el documento se procede al reemplazo del documento
					respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
							pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
				} else {
					// Si no se encuentra se procede a adjuntar por ser documento nuevo
					pgimDocumentoDTO.setIdDocumento(null); // nos aseguramos que el ID sea nulo, por ser un nuevo
															// documento
					respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
							auditoriaDTO);

					PgimDocumentoDTO pgimDocumentoDTOres = (PgimDocumentoDTO) respuesta.getBody().getData();
					if (pgimDocumentoDTOres.getDescFlExpedienteCreado() == 1) {
						descFlExpedienteCreado = pgimDocumentoDTOres.getDescFlExpedienteCreado();
					}

				}

				if (nuExpedienteSiged == null && descFlExpedienteCreado == 1) {
					pgimEqpPrimero = pgimEqp;
					pgimInstanciaProces = instanciaProcesService
							.obtenerInstanciaProcesoPorId(pgimInstanciaProcesDTO.getIdInstanciaProceso());
					nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();

					ExpedienteSiged expedienteSiged = new ExpedienteSiged();
					expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
					expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());
					documentossExpedienteSiged = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
							pgimInstanciaProcesDTO.getIdProceso(), "Generar documento", auditoriaDTO);
					if (!documentossExpedienteSiged.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
						throw new PgimException(TipoResultado.ERROR, documentossExpedienteSiged.getMessage());
					}

				}
			}

			if (pgimEqpPrimero != null) {

				PgimEqpInstanciaProDTO pgimEqp = pgimEqpPrimero;

				PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
						.obtenerSubcategoriaDocPorId(idSubCatDoc);

				idTipoExtensionGen = pgimSubcategoriaDocDTO.getIdTipoExtensionGen();
				extensionDJI = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

				byte[] byteDoc = generarDJI(pgimEqp.getDescNoCompletoPersona(), pgimEqp.getNoPrefijoPersonaEquipo(), pgimEqp.getNoCargoPersonaEquipo(),
											pgimEqp.getDescCoDocumentoIdentidad(), pgimUnidadMineraDTO, idTipoExtensionGen,
											pgimSupervisionDTO.getCoSupervision(), nuExpedienteSiged);

				String strName = CommonsUtil.generadorNombreUnico();
				String strPath = propertiesConfig.getCarpetaTmp() + strName + extensionDJI;
				Path docPath = Paths.get(strPath);
				Files.write(docPath, byteDoc);
				File fileSiged = new File(strPath);
				lstArchivosTmp.add(fileSiged);

				MultipartFile fileDocumento = new MockMultipartFile(
						"DJI-" + pgimEqp.getDescNoPersonaDoc() + "_" + pgimEqp
								.getDescIdPersona() + extensionDJI,
						new FileInputStream(fileSiged));

				pgimDocumentoDTO.setDeAsuntoDocumento("DJI de " + pgimEqp.getDescNoCompletoPersona());
				pgimDocumentoDTO.setNumeroDocumento(
						"DJI-" + pgimInstanciaProcesDTO.getCoTablaInstancia() + "-" + pgimEqp.getDescIdPersona());
				pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

				// Validar que no haya sido generado o cargado previamente el documento (por su
				// número)
				boolean reemplazar = false;
				if (documentossExpedienteSiged != null) {
					for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
						if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
								&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

							// Ejecutar reemplazo
							reemplazar = true;
							documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "",
									"", auditoriaDTO.getCoUsuarioSiged());
							idDocumentoSiged = documento.getIdDocumento();
							lIdDocumentoSiged.add(idDocumentoSiged);
						}
						if (reemplazar) {
							break;
						}
					}
				}

				if (reemplazar) {
					// Si lo encuentra el documento se procede al reemplazo del documento
					respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
							pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
				}

			}

			PgimDocumentoDTO pgimDocumentoDTOfin = (PgimDocumentoDTO) respuesta.getBody().getData();
			pgimDocumentoDTOfin.setDescFlExpedienteCreado(descFlExpedienteCreado);
			respuesta.getBody().setData(pgimDocumentoDTOfin);
		}

		// CASO 2: Generación Credencial
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && lstPgimEqpInstanciaProDTO.size() > 0
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_CREDENCIAL) == 0) {

			String strSupervisor = "Osinergmin";

			if (flPropia.equals("0")) {
				// Obtener empresa supervisora
				PgimContratoDTO pgimContratoDTO = contratoRepository
						.obtenerContratoPorId(pgimSupervisionDTO.getDescIdContrato());
				PgimEmpresaSupervisoraDTO pgimEmpresaSupervisoraDTO = empresaSupervisoraService
						.obtenerPorId(pgimContratoDTO.getIdEmpresaSupervisora());
				strSupervisor = pgimEmpresaSupervisoraDTO.getDescNoRazonSocial();
			}

			List<PgimDemarcacionUmineraDTOResultado> demarcaciones = demarcacionUMineraRepository
					.findByUm(pgimUnidadMineraDTO.getIdUnidadMinera());

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = generarDocumentoCredencial(lstPgimEqpInstanciaProDTO, pgimUnidadMineraDTO,
					pgimSupervisionDTO, pgimInstanciaProces, strSupervisor, demarcaciones,
					pgimSubcategoriaDocDTO.getIdTipoExtensionGen());
			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);

			MultipartFile fileDocumento = new MockMultipartFile(
					"CRED-" + pgimInstanciaProcesDTO.getCoTablaInstancia() + extension, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("CRED de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setNumeroDocumento("CRED1" + pgimInstanciaProcesDTO.getCoTablaInstancia());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);

				PgimDocumentoDTO pgimDocumentoDTOres = (PgimDocumentoDTO) respuesta.getBody().getData();
				if (pgimDocumentoDTOres.getDescFlExpedienteCreado() == 1) {
					descFlExpedienteCreado = pgimDocumentoDTOres.getDescFlExpedienteCreado();
				}
			}

		}

		// CASO 3: Generación TDR
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_TDR) == 0 && lstPgimEqpInstanciaProDTO.size() > 0
				&& nuExpedienteSiged != null) {

			PgimSupervisionDTO valoresTDR = supervisionService.obtenerValoresTDR(pgimSupervisionDTO.getIdSupervision());
			valoresTDR.setCoSupervision(pgimSupervisionDTO.getCoSupervision());

			List<PgimUbigeoDTO> listaUbigeos = ubigeoService
					.obtenerUbigeoPorIdSupervision(pgimSupervisionDTO.getIdSupervision());

			String strSupervisor = "Osinergmin";
			String prefijoSubCat = "Criterios";
			if (flPropia.equals("0")) {
				strSupervisor = valoresTDR.getDescEmpresaSupervisoraNoRazonSocial().toUpperCase();
				prefijoSubCat = "TDR";
			}

			valoresTDR.setDescEmpresaSupervisoraNoRazonSocial(strSupervisor);
			valoresTDR.setFlPropia(flPropia);
			valoresTDR.setDescNuExpedienteSiged(nuExpedienteSiged);

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_PLANTILLA_TDR_FISCALIZACION_PROPIA;
			if (flPropia.equals("0")) {
				ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_nombre_plantillaid_TDR;
			}

			byte[] byteDoc = generarTDR(ruta, valoresTDR, listaUbigeos, pgimSubcategoriaDocDTO.getIdTipoExtensionGen(), pgimSupervisionDTO.getIdSupervision(),pgimUnidadMineraDTO);

			String strName = CommonsUtil.generadorNombreUnico();
			String strNameVal = "";
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);

			strName = prefijoSubCat + "-" + pgimSupervisionDTO.getCoSupervision() + extension;
			strNameVal = prefijoSubCat + "-" + pgimSupervisionDTO.getCoSupervision();
			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento(prefijoSubCat + " de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por el
			// nombre del archivo)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					for (Archivo archivo : documento.getArchivos()) {
						if (archivo.getNombre().contains(strNameVal)
								&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

							// Validar si el documento tiene algún archivo firmado digitalmente
							// lo que es una restricción para la generación
							if (archivo.getFirmaDigitalSiged() != null) {
								if (archivo.getFirmaDigitalSiged().size() > 0) {
									if (archivo.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivo.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;
						}
						if (reemplazar) {
							break;
						}
					}
					if (reemplazar) {
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = this.procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 4: Generación Ficha Resumen de Hecho Constatado
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_HC) == 0) {

			PgimSupervisionDTO valoresActaSupervision = supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());
			valoresActaSupervision.setDescAgenteSupervisadoNoRazonSocial(pgimAgenteSupervisadoDTO.getDescNoRazonSocial());

			List<PgimHechoConstatadoDTO> listaHechos = hechoConstatadoService.obtenerHechosConstatados(
					valoresActaSupervision.getIdSupervision(), ConstantesUtil.PARAM_HC_ROL_SUPERVISOR);
			List<PgimHechoConstatadoDTO> listaHechosIncumplimientos = hechoConstatadoService
					.obtenerHechosConstatadosIncumplimiento(valoresActaSupervision.getIdSupervision(),
							ConstantesUtil.PARAM_HC_ROL_SUPERVISOR);

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = generarFichaHecCons(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_PLANTILLA_FICHA_HECHOS_VERIFICADOS,
					valoresActaSupervision, listaHechos, listaHechosIncumplimientos, ConstantesUtil.PARAM_TIPO_HC_SUP,
					pgimSubcategoriaDocDTO.getIdTipoExtensionGen());

			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "FHC-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("FHC-SC de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setNumeroDocumento("FHC-SC-" + pgimInstanciaProcesDTO.getCoTablaInstancia());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 5: Generación Ficha Resumen de Hecho Constatado Esp Técnico/Legal
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_FHC) == 0 && "1".equals("3")) {

			PgimSupervisionDTO valoresActaSupervision = supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());

			List<PgimHechoConstatadoDTO> listaHechos = hechoConstatadoService.obtenerHechosConstatados(
					valoresActaSupervision.getIdSupervision(), ConstantesUtil.PARAM_HC_ROL_ESP_LEGAL,
					ConstantesUtil.PARAM_HC_ROL_ESP_TECNICO);
			List<PgimHechoConstatadoDTO> listaHechosIncumplimientos = hechoConstatadoService
					.obtenerHechosConstatadosIncumplimiento(valoresActaSupervision.getIdSupervision(),
							ConstantesUtil.PARAM_HC_ROL_ESP_LEGAL, ConstantesUtil.PARAM_HC_ROL_ESP_TECNICO);

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = generarFichaHecCons(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_PLANTILLA_FICHA_HECHOS_VERIFICADOS_ESPTL,
					valoresActaSupervision, listaHechos, listaHechosIncumplimientos, ConstantesUtil.PARAM_TIPO_HC_ESP,
					pgimSubcategoriaDocDTO.getIdTipoExtensionGen());

			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "FHC-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("FHC-AR de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setNumeroDocumento("FHC-AR-" + pgimInstanciaProcesDTO.getCoTablaInstancia());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 6: Generación de Resumen de Instrucción Preliminar
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_FIP) == 0) {

			PgimSupervisionDTO valoresTDR = supervisionService.obtenerValoresTDR(pgimSupervisionDTO.getIdSupervision());

			List<PgimUbigeoDTO> listaUbigeos = ubigeoService
					.obtenerUbigeoPorIdSupervision(pgimSupervisionDTO.getIdSupervision());

			PgimSupervisionDTO valoresActaSupervision = supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setDescDeMensaje(pgimSupervisionDTO.getDescDeMensaje());
			valoresActaSupervision.setDescSubtipoSupervision(pgimSupervisionDTO.getDescSubtipoSupervision());
			valoresActaSupervision.setDescNoEspecialidad(pgimSupervisionDTO.getDescNoEspecialidad());
			String strSupervisor = "GSM";
			if (flPropia.equals("0")) {
				PgimContratoDTO pgimContratoDTO = contratoRepository
						.obtenerContratoPorId(pgimSupervisionDTO.getDescIdContrato());
				strSupervisor = valoresTDR.getDescEmpresaSupervisoraNoRazonSocial().toUpperCase();
				valoresActaSupervision.setDescDeNuContrato(pgimContratoDTO.getNuContrato());
			} else {
				valoresActaSupervision.setDescDeNuContrato("---");
			}
			valoresActaSupervision.setDescEmpresaSupervisoraNoRazonSocial(strSupervisor);
			valoresActaSupervision.setFeInicioSupervisionReal(pgimSupervisionDTO.getFeInicioSupervisionReal());
			valoresActaSupervision.setFeFinSupervisionReal(pgimSupervisionDTO.getFeFinSupervisionReal());
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());

			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Documentos en la fase
			List<PgimDocumentoDTO> lPgimDocumentoDTO = null;
			Map<String, Object> parametros = this.verDocumentos(pgimInstanciaProcesDTO.getCoTablaInstancia(),
					pgimInstanciaProcesDTO.getIdProceso(), ConstantesUtil.PARAM_SUPERVISION_NINGUNA, null,
					Sort.by("feOrigenDocumento").ascending(), auditoriaDTO);
			lPgimDocumentoDTO = (List<PgimDocumentoDTO>) parametros.get("lPgimDocumentoDTOResultado");

			// YYYY-MM-DDThh:mm:ss.sTZD
			// Lista de observaciones
			SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");
			List<String> lstObservaciones = new ArrayList<String>();
			for (Iterator<PgimDocumentoDTO> iterator = lPgimDocumentoDTO.iterator(); iterator.hasNext();) {
				PgimDocumentoDTO pgimDocumentoDTOExp = (PgimDocumentoDTO) iterator.next();
				if (pgimDocumentoDTOExp.getIdSubcatDocumento().compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_OIS) == 0) {

					String fechaDoc = sdf.format(pgimDocumentoDTOExp.getFeOrigenDocumento());
					lstObservaciones.add(pgimDocumentoDTOExp.getNoSubcatDocumento() + "|"
							+ pgimDocumentoDTOExp.getNumeroDocumento() + "|" + fechaDoc);

				}
			}

			// Lista de informe de conformidad (último)
			List<String> lstConformidades = new ArrayList<String>();
			for (Iterator<PgimDocumentoDTO> iterator = lPgimDocumentoDTO.iterator(); iterator.hasNext();) {
				PgimDocumentoDTO pgimDocumentoDTOExp = (PgimDocumentoDTO) iterator.next();
				if (pgimDocumentoDTOExp.getIdSubcatDocumento().compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_CIS) == 0) {
					String fechaDoc = sdf.format(pgimDocumentoDTOExp.getFeOrigenDocumento());
					lstConformidades.add(fechaDoc);
				}
			}

			// Lista de informe de supervisión (último)
			List<String> lstInfSup = new ArrayList<String>();
			String InfSupFin = "";
			int nuIS = 0;
			for (Iterator<PgimDocumentoDTO> iterator = lPgimDocumentoDTO.iterator(); iterator.hasNext();) {
				PgimDocumentoDTO pgimDocumentoDTOExp = (PgimDocumentoDTO) iterator.next();
				if (pgimDocumentoDTOExp.getIdSubcatDocumento().compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_IS) == 0
						&& pgimDocumentoDTOExp.getTipoRegistro().equals("D")) {
					nuIS += 1;
					if (nuIS > 1) {
						// OffsetDateTime odt =
						// OffsetDateTime.parse(pgimDocumentoDTOExp.getFechaDocumentoSiged());
						String fechaDoc = sdf.format(pgimDocumentoDTOExp.getFeOrigenDocumento());
						lstInfSup.add(pgimDocumentoDTOExp.getNoSubcatDocumento() + "|"
								+ pgimDocumentoDTOExp.getNumeroDocumento() + "|" + fechaDoc);
						InfSupFin = fechaDoc;
					}
				}
			}

			// Lista de informe IAIP (último)
			String numeroIAIP = "---";
			String fechaIAIP = "---";
			for (Iterator<PgimDocumentoDTO> iterator = lPgimDocumentoDTO.iterator(); iterator.hasNext();) {
				PgimDocumentoDTO pgimDocumentoDTOExp = (PgimDocumentoDTO) iterator.next();
				if (pgimDocumentoDTOExp.getIdSubcatDocumento().compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_IAIP) == 0) {
					numeroIAIP = pgimDocumentoDTOExp.getNumeroDocumento();
					Date odt = pgimDocumentoDTOExp.getFeOrigenDocumento();
					fechaIAIP = CommonsUtil.convertirFechaACadena(odt, ConstantesUtil.FORMATO_FECHA_CORTO);
				}
			}

			// Autorización de ampliación
			String autorizacion = "No";
			for (Iterator<PgimDocumentoDTO> iterator = lPgimDocumentoDTO.iterator(); iterator.hasNext();) {
				PgimDocumentoDTO pgimDocumentoDTOExp = (PgimDocumentoDTO) iterator.next();
				if (pgimDocumentoDTOExp.getIdSubcatDocumento()
						.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_AUTOAMP) == 0) {
					autorizacion = "Sí";
				}
			}

			// Hechos constatados
			List<PgimHechoConstatadoDTO> listaHechos = hechoConstatadoService.obtenerHechosConstatadosFicha(
					valoresActaSupervision.getIdSupervision(), ConstantesUtil.PARAM_HC_ROL_ESP_LEGAL,
					ConstantesUtil.PARAM_HC_ROL_ESP_TECNICO);
			Integer totalhc = 0;
			Integer totaliaip = 0;
			Integer totalpas = 0;

			for (Iterator<PgimHechoConstatadoDTO> iterator = listaHechos.iterator(); iterator.hasNext();) {
				PgimHechoConstatadoDTO pgimHechoConstatadoDTO = (PgimHechoConstatadoDTO) iterator.next();
				totalhc += 1;
				if (pgimHechoConstatadoDTO.getDescTipoCumplimiento().equals("No cumple")) {
					totalpas += 1;
				} else if (pgimHechoConstatadoDTO.getDescTipoCumplimiento().equals("Si cumple")) {
					totaliaip += 1;
				}
			}

			String fecha_conformidad = "---";
			if (lstConformidades.size() > 0) {
				fecha_conformidad = InfSupFin;
			}

			Integer plazoMeses = 0;
			Date dateIAIP = null;
			Date dateConf = null;
			// Plazo para culminar la etapa de instruccion (Meses)
			if (!fechaIAIP.equals("---") && !fecha_conformidad.equals("---") && !fecha_conformidad.equals("")) {
				dateIAIP = CommonsUtil.Strig2Date(fechaIAIP);
				dateConf = CommonsUtil.Strig2Date(fecha_conformidad);
				plazoMeses = CommonsUtil.numeroMesesEntreDosFechas(dateIAIP, dateConf);
			}

			Map<String, Object> datosReporte = new HashMap<>();
			datosReporte.put("fecha_observaciones", lstObservaciones);
			datosReporte.put("ultima_fecha_presentacion_informe_superv", InfSupFin);
			datosReporte.put("fecha_subsanacion", lstInfSup);
			datosReporte.put("fecha_conformidad", fecha_conformidad);
			datosReporte.put("numeroIAIP", numeroIAIP);
			datosReporte.put("fechaIAIP", fechaIAIP);
			datosReporte.put("totalhc", totalhc);
			datosReporte.put("totaliaip", totaliaip);
			datosReporte.put("totalpas", totalpas);
			datosReporte.put("plazo_meses", plazoMeses.toString());
			datosReporte.put("autorizacion", autorizacion);

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "";

			byte[] byteDoc = null;

			if (pgimSubcategoriaDocDTO == null) {
				extension = "." + ConstantesUtil.PARAM_EXTENSION_PDF.toLowerCase();
			} else {

				extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();
			}

			if (pgimSubcategoriaDocDTO == null) {
				byteDoc = generarResumenInsPre(
						propertiesConfig.getFilesRepo() +
								ConstantesUtil.PARAM_PLANTILLA_RESUMEN_INST_PRELIMINAR,
						pgimDocumentoDTO, valoresActaSupervision, pgimInstanciaProces,
						pgimUnidadMineraDTO, listaUbigeos,
						datosReporte,
						this.valorParametroRepository.obtenerIdValorParametro(EValorParametro.EXDOC_PDF.toString()));
			} else {

				byteDoc = generarResumenInsPre(
						propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_PLANTILLA_RESUMEN_INST_PRELIMINAR,
						pgimDocumentoDTO, valoresActaSupervision, pgimInstanciaProces, pgimUnidadMineraDTO,
						listaUbigeos,
						datosReporte, pgimSubcategoriaDocDTO.getIdTipoExtensionGen());
			}

			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "RIP-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("RIP de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setNumeroDocumento("RIP-" + pgimInstanciaProcesDTO.getCoTablaInstancia());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 7: Ficha de observaciones al informe de supervisión
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_OIS) == 0) {

			PgimSupervisionDTO valoresTDR = this.supervisionService.obtenerValoresTDR(pgimSupervisionDTO.getIdSupervision());

			PgimSupervisionDTO valoresActaSupervision = this.supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setDescDeMensaje(pgimSupervisionDTO.getDescDeMensaje());
			valoresActaSupervision.setDescSubtipoSupervision(pgimSupervisionDTO.getDescSubtipoSupervision());
			valoresActaSupervision.setDescNoEspecialidad(pgimSupervisionDTO.getDescNoEspecialidad());

			String strSupervisor = "GSM";
			if (flPropia.equals("0")) {
				strSupervisor = valoresTDR.getDescEmpresaSupervisoraNoRazonSocial().toUpperCase();
				valoresActaSupervision.setDescDeNuContrato(pgimSupervisionDTO.getDescDeNuContrato());
			} else {
				valoresActaSupervision.setDescDeNuContrato("---");
			}
			valoresActaSupervision.setDescEmpresaSupervisoraNoRazonSocial(strSupervisor);
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());
			valoresActaSupervision.setDescAgenteSupervisadoNoRazonSocial(pgimAgenteSupervisadoDTO.getDescNoRazonSocial());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = this.subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = generarFichaObsInfSup(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FICHA_OBS_INF_FISCALIZACION,
					pgimDocumentoDTO, valoresActaSupervision, pgimInstanciaProces, pgimUnidadMineraDTO,
					pgimSubcategoriaDocDTO.getIdTipoExtensionGen());

			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "OBS_IS-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("Observaciones al IS de " + pgimSupervisionDTO.getCoSupervision());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 8: Ficha de conformidad al informe de fiscalización
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_ACTA_CONFORMIDAD) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_CIS) == 0) {

			PgimSupervisionDTO valoresTDR = this.supervisionService
					.obtenerValoresTDR(pgimSupervisionDTO.getIdSupervision());

			PgimSupervisionDTO valoresActaSupervision = this.supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setDescDeMensaje(pgimSupervisionDTO.getDescDeMensaje());
			valoresActaSupervision.setDescSubtipoSupervision(pgimSupervisionDTO.getDescSubtipoSupervision());
			valoresActaSupervision.setDescNoEspecialidad(pgimSupervisionDTO.getDescNoEspecialidad());

			String strSupervisor = "GSM";
			if (flPropia.equals("0")) {
				strSupervisor = valoresTDR.getDescEmpresaSupervisoraNoRazonSocial().toUpperCase();
				valoresActaSupervision.setDescDeNuContrato(pgimSupervisionDTO.getDescDeNuContrato());
			} else {
				valoresActaSupervision.setDescDeNuContrato("---");
			}

			valoresActaSupervision.setDescEmpresaSupervisoraNoRazonSocial(strSupervisor);
			valoresActaSupervision.setFeInicioSupervisionReal(pgimSupervisionDTO.getFeInicioSupervisionReal());
			valoresActaSupervision.setFeFinSupervisionReal(pgimSupervisionDTO.getFeFinSupervisionReal());
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());
			valoresActaSupervision.setDescAgenteSupervisadoNoRazonSocial(pgimAgenteSupervisadoDTO.getDescNoRazonSocial()); 

			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = this.generarFichaConfInfSup(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FICHA_CONF_INF_FISCALIZACION,
					valoresActaSupervision, pgimInstanciaProces, pgimUnidadMineraDTO, null,
					pgimSubcategoriaDocDTO.getIdTipoExtensionGen());

			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "CONF_IS-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("Conformidad al IS de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setNumeroDocumento("CONF_IS-" + pgimInstanciaProcesDTO.getCoTablaInstancia());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 9: Formato de revisión de antecedentes
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_REV_ANTE) == 0) {

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = generarRevisionAntecedente(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_REVISION_ANTECEDENTE_SUPERVISION,
					pgimSupervisionDTO.getIdSupervision(), pgimSubcategoriaDocDTO.getIdTipoExtensionGen(), 
					auditoriaDTO);

			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "REV_ANTE-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento(
					"Formato de revisión de antecedentes " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setNumeroDocumento("REV_ANTE-" + pgimInstanciaProcesDTO.getCoTablaInstancia());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						for (Archivo archivoSiged : documento.getArchivos()) {
							if (archivoSiged.getFirmaDigitalSiged() != null) {
								if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
									if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 10: Generación DJ INSTRUMENTOS MEDICIÓN
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_tipo_doc_DJI) == 0 && nuExpedienteSiged != null &&  idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_DJIM) == 0) {

			PgimSupervisionDTO supervisionPorId = supervisionRepository.obtenerSupervisionPorIdAux(pgimSupervisionDTO.getIdSupervision());

			if(supervisionPorId != null && supervisionPorId.getDescIdPersonaEmpSuperv() != null) {
				PgimPersona empSupervisora = obtenerConsorcioPrincipal(supervisionPorId.getDescIdPersonaEmpSuperv());

				supervisionPorId.setDescDocSupervisora(empSupervisora.getCoDocumentoIdentidad());
			}

			// Obtener los datos de la persona asignada a la supervisión
			List<PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTO = this.instanciaProcesService
					.obtenerParticipantesInstanciaProXRol(supervisionPorId.getIdInstanciaProceso(),
							ConstantesUtil.PROCESO_ROL_COORDINADOR_SUPERVISION);

			if (lPgimEqpInstanciaProDTO.size() == 0) {
				throw new PgimException(TipoResultado.WARNING,
						"Para generar el documento se requiere que haya definido a la persona que funge de coordinador/a de la empresa supervisora, por favor regístrelo como miembro del equipo y vuelva a intentar");
			} else if (lPgimEqpInstanciaProDTO.size() > 1) {
				String mensajeAviso = String.format(
						"Para generar el documento se requiere que en el equipo solo exista una persona fungiendo el rol de coordinador/a de la empresa supervisora; actualmente existen %d, por favor elimine del equipo a las personas que actualmente no fungen el referido rol",
						lPgimEqpInstanciaProDTO.size());
				throw new PgimException(TipoResultado.WARNING, mensajeAviso);
			}

			PgimEqpInstanciaProDTO pgimEqpInstanciaProDTO = lPgimEqpInstanciaProDTO.get(0);

			//Obtener la lista de instrumentos de medición
			List<PgimInstrmntoXSupervDTO> lPgimInstrmntoXSupervDTO = new ArrayList<PgimInstrmntoXSupervDTO>();
			Integer cantInstrumentos = this.supervInstrumentoRepository.cantidadInstrumentos(pgimSupervisionDTO.getIdSupervision(),null);

			if(cantInstrumentos == 0){
				throw new PgimException(TipoResultado.WARNING,
						"Para generar el documento es necesario que registre por lo menos un instrumento de medición");
			}

			lPgimInstrmntoXSupervDTO = this.supervInstrumentoService.ObtenerListaInstrumentoRegAprob(pgimSupervisionDTO.getIdSupervision(),EValorParametro.TIPO_ESTDO_INSTRMNTO_REGISTRADO.toString(), EValorParametro.TIPO_ESTDO_INSTRMNTO_APROBADO.toString(),EValorParametro.TIPO_ESTDO_INSTRMNTO_MODIFICADO.toString());
			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_DJ_INSTRUMENTOS_MEDICION;

			byte[] byteDoc = generarDJInstrumMedicion(ruta, supervisionPorId, lPgimInstrmntoXSupervDTO, pgimSubcategoriaDocDTO.getIdTipoExtensionGen(), pgimEqpInstanciaProDTO);

			String strName = CommonsUtil.generadorNombreUnico();
			String strNameVal = "";
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			String fase = "-F1";

			if(pgimDocumentoDTO.getIdFaseProceso() == ConstantesUtil.PARAM_SUPERVISION_SUPERVISION_CAMPO){
				fase = "-F2";
			}

			strName = "DJIM-" + fase  + "-" + pgimSupervisionDTO.getCoSupervision() + extension;
			strNameVal = "DJIM-" + fase +  "-"  + pgimSupervisionDTO.getCoSupervision();
			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("DJIM de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por el
			// nombre del archivo)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					for (Archivo archivo : documento.getArchivos()) {
						if (archivo.getNombre().contains(strNameVal)
								&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())) {

							// Validar si el documento tiene algún archivo firmado digitalmente
							// lo que es una restricción para la generación
							if (archivo.getFirmaDigitalSiged() != null) {
								if (archivo.getFirmaDigitalSiged().size() > 0) {
									if (archivo.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivo.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;
						}
						if (reemplazar) {
							break;
						}
					}
					if (reemplazar) {
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = this.procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 11: Generación de ficha de evaluación de hechos verificados
		if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& (idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_FEHC_1) == 0
				|| idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_FHC) == 0)
				&& (idFaseProceso.compareTo(ConstantesUtil.PARAM_SUPERVISION_REV_INFO_SUPERVISION) == 0
				|| idFaseProceso.compareTo(ConstantesUtil.PARAM_SUPERVISION_APROB_RESULTADOS) == 0)) {

			PgimSupervisionDTO valoresActaSupervision = supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());
			valoresActaSupervision.setFeInicioSupervisionReal(pgimSupervisionDTO.getFeInicioSupervisionReal());
			valoresActaSupervision.setFeFinSupervisionReal(pgimSupervisionDTO.getFeFinSupervisionReal());
			valoresActaSupervision.setDescAgenteSupervisadoNoRazonSocial(pgimAgenteSupervisadoDTO.getDescNoRazonSocial());
			valoresActaSupervision.setDescCoDocumentoIdentidad(pgimAgenteSupervisadoDTO.getDescCoDocumentoIdentidad());

			PgimSupervisionDTO supervisionPorIdAux = supervisionRepository.obtenerSupervisionPorIdAux(pgimSupervisionDTO.getIdSupervision());

			if(supervisionPorIdAux != null && supervisionPorIdAux.getDescIdPersonaEmpSuperv() != null) {
				PgimPersona empSupervisora = obtenerConsorcioPrincipal(supervisionPorIdAux.getDescIdPersonaEmpSuperv());

				valoresActaSupervision.setDescDocSupervisora(empSupervisora.getCoDocumentoIdentidad());
			}

			List<PgimHechoConstatadoDTO> listaHechosOsi = hechoConstatadoService.obtenerHechosConstatadosParaFEHV(
					valoresActaSupervision.getIdSupervision(), ConstantesUtil.PARAM_HC_ROL_ESP_LEGAL,
					ConstantesUtil.PARAM_HC_ROL_ESP_TECNICO);
			List<PgimHechoConstatadoDTO> listaHechosIncumplimientos = hechoConstatadoService
					.obtenerHechosConstatadosIncumplimiento(valoresActaSupervision.getIdSupervision(),
							ConstantesUtil.PARAM_HC_ROL_ESP_LEGAL, ConstantesUtil.PARAM_HC_ROL_ESP_TECNICO);

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);
			
			List<PgimCotejoHechoCnsttdoDTO> lCotejoHCPendientesConformidad = cotejoHechoCnsttdoRepository
                    .listarCotejoHCpendientesConformidad(pgimSupervisionDTO.getIdSupervision(), ConstantesUtil.PARAM_COD_NO_CUMPLE_TC);
		    if (lCotejoHCPendientesConformidad.size() > 0) {
		            throw new PgimException(TipoResultado.WARNING,
							"Lo sentimos, no se ha generado el documento debido a que aún no se han evaluado todos los hechos verificados que el fiscalizador ha categorizado como incumplimientos");
		    }

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			String version = "v1";
			String tituloVersion = "- VERSIÓN 1";
			if (idFaseProceso.compareTo(ConstantesUtil.PARAM_SUPERVISION_APROB_RESULTADOS) == 0) {
				version = "v2";
				tituloVersion = "- VERSIÓN 2";
			}

			byte[] byteDoc = generarFichaEvalHecCons(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_PLANTILLA_FICHA_EVALUA_HECHOS_VERIFICADOS,
					valoresActaSupervision, listaHechosOsi, listaHechosIncumplimientos, ConstantesUtil.PARAM_TIPO_HC_ESP,
					pgimSubcategoriaDocDTO.getIdTipoExtensionGen(), tituloVersion, pgimUnidadMineraDTO);

			String strName = CommonsUtil.generadorNombreUnico();
			String strNameVal = "";
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);

			strName = "FEHC-"+ version +"-"+ pgimSupervisionDTO.getCoSupervision() + extension;
			strNameVal = "FEHC-"+ version +"-"+ pgimSupervisionDTO.getCoSupervision();

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));


			pgimDocumentoDTO.setNumeroDocumento("FEHC-"+ version +"-"+ pgimInstanciaProcesDTO.getCoTablaInstancia());
			pgimDocumentoDTO.setDeAsuntoDocumento("FEHC "+ version + " de " + pgimSupervisionDTO.getCoSupervision());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (documentossExpedienteSiged != null) {
				for (Documento documento : documentossExpedienteSiged.getDocumentos().getListaDocumento()) {
					for (Archivo archivo : documento.getArchivos()) {
						if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocumentoSigedEvaluar.toString())
							&& archivo.getNombre().contains(strNameVal)) {

							// Validar si el documento tiene algún archivo firmado digitalmente
							// lo que es una restricción para la generación
							if (archivo.getFirmaDigitalSiged() != null) {
								if (archivo.getFirmaDigitalSiged().size() > 0) {
									if (archivo.getFirmaDigitalSiged().size() == 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
									}
									if (archivo.getFirmaDigitalSiged().size() > 1) {
										throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
									}
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;
						}
						if (reemplazar) {
							break;
						}
					}
					if (reemplazar) {
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lIdDocumentoSiged.add(idDocumentoSiged);
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, documentossExpedienteSiged);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = this.procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}


		}

		// Borramos archivos temporales
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Generar Documento");

		// Excepciones controladas
		if (lstPgimEqpInstanciaProDTO.size() == 0) {
			if (coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_tipo_doc_DJI) == 0
					|| coTipoDocumentoSigedEvaluar.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0) {
				throw new PgimException(TipoResultado.WARNING,
						"No se ha generado el(los) documento(s), debe primero agregar participantes con el rol Fiscalizador/a.");
			}
		}

		if (nuExpedienteSiged == null) {
			if ((coTipoDocumentoSigedEvaluar.equals(ConstantesUtil.PARAM_TIPO_DOC_OTROS)
					&& !idSubCatDoc.equals(ConstantesUtil.PARAM_SUBCAT_DOC_CREDENCIAL))
					|| coTipoDocumentoSigedEvaluar.equals(ConstantesUtil.PARAM_TIPO_DOC_TDR)) {
				throw new PgimException(TipoResultado.WARNING,
						"Lo sentimos, pero no se ha generado el documento debido a que todavía no se ha creado el expediente Siged; es probable que le falte generar las credenciales de los/as fiscalizadores/ras.");
			}
		}

		return respuesta;
	}

	@Override
	@Transactional(readOnly = false)
	public ResponseEntity<ResponseDTO> procesarGenerarDocumentoLiquidacion(PgimDocumentoDTO pgimDocumentoDTO,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) throws Exception {

		ResponseEntity<ResponseDTO> respuesta = null;
		List<File> lstArchivosTmp = new ArrayList<>();

		// Obtener cotablaInstancia
		PgimInstanciaProces pgimInstanciaProces = instanciaProcesService
				.obtenerInstanciaProcesoPorId(pgimInstanciaProcesDTO.getIdInstanciaProceso());
		pgimInstanciaProcesDTO.setCoTablaInstancia(pgimInstanciaProces.getCoTablaInstancia());
		String nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();
		Long idSubCatDoc = pgimDocumentoDTO.getIdSubcatDocumento();
		ExpedienteDocOutRO elementosExpediente = null;

		// Validación del propietario del expediente
		if (nuExpedienteSiged != null) {
			ExpedienteSiged expedienteSiged = new ExpedienteSiged();
			expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
			expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());
			elementosExpediente = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
					pgimInstanciaProcesDTO.getIdProceso(), "Generar documento", auditoriaDTO);
			if (!elementosExpediente.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException(TipoResultado.ERROR, elementosExpediente.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
			}
		}

		DocumentoNuevo documentoNuevo = null;
		String idDocumentoSiged = "";
		List<String> lstidDocumento = new ArrayList<String>();
		Long coTipoDocEval = pgimDocumentoDTO.getCoTipoDocumentoSiged();

		// Datos de la Liquidación
		PgimLiquidacionAuxDTO pgimLiquidacionAuxDTO = this.liquidacionService
				.obtenerLiquidacionAuxPorInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		// Procesar de acuerdo al tipo de documento

		// CASO 1: Formato de Liquidación de Actas
		if (coTipoDocEval.compareTo(ConstantesUtil.PARAM_TIPO_DOC_LIQ) == 0 // && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_FLA) == 0) {

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = this.subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = this.generarForLiqActas(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FORMATO_LIQUIDACION_ACTAS,
					pgimLiquidacionAuxDTO, pgimSubcategoriaDocDTO.getIdTipoExtensionGen());
			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "FLA-" + pgimLiquidacionAuxDTO.getNuContrato() + " - " + pgimLiquidacionAuxDTO.getNuLiquidacion()
					+ extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("Formato de liquidación de acta de "
					+ pgimLiquidacionAuxDTO.getNuContrato() + " - " + pgimLiquidacionAuxDTO.getNuLiquidacion());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por el
			// nombre del archivo)
			boolean reemplazar = false;
			if (elementosExpediente != null) {
				for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {

					for (Archivo archivo : documento.getArchivos()) {
						if (archivo.getNombre().contains(strName)
								&& documento.getIdTipoDocumento().equals(coTipoDocEval.toString())) {

							// validar si el archivo se encuentra firmado
							if (archivo.getFirmaDigitalSiged() != null) {
								if (archivo.getFirmaDigitalSiged().size() > 0) {
									throw new PgimException(TipoResultado.WARNING,
											"El archivo se encuentra firmado, no se puede reemplazar."); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;

						}
						if (reemplazar) {
							break;
						}
					}

					if (reemplazar) {
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lstidDocumento.add(idDocumentoSiged);
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, elementosExpediente);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

		}

		// CASO 2: Formato de Liquidación de Informes de Supervisión
		if (coTipoDocEval.intValue() == ConstantesUtil.PARAM_TIPO_DOC_LIQ.intValue()
				&& idSubCatDoc.intValue() == ConstantesUtil.PARAM_SUBCAT_DOC_FLI.intValue()) {

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = this.generarForLiquidacionInforme(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FORMATO_LIQUIDACION_INFORME,
					pgimLiquidacionAuxDTO, pgimSubcategoriaDocDTO.getIdTipoExtensionGen());
			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "FLI-" + pgimLiquidacionAuxDTO.getNuContrato() + " - " + pgimLiquidacionAuxDTO.getNuLiquidacion()
					+ extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("Formato de liquidación de informe de "
					+ pgimLiquidacionAuxDTO.getNuContrato() + " - " + pgimLiquidacionAuxDTO.getNuLiquidacion());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por el
			// nombre del archivo)
			boolean reemplazar = false;
			if (elementosExpediente != null) {
				for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {
					for (Archivo archivo : documento.getArchivos()) {
						if (archivo.getNombre().contains(strName)
								&& documento.getIdTipoDocumento().equals(coTipoDocEval.toString())) {

							// validar si el archivo se encuentra firmado
							if (archivo.getFirmaDigitalSiged() != null) {
								if (archivo.getFirmaDigitalSiged().size() > 0) {
									throw new PgimException(TipoResultado.WARNING,
											"El archivo se encuentra firmado, no se puede reemplazar."); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;
						}
						if (reemplazar) {
							break;
						}
					}
					if (reemplazar) {
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lstidDocumento.add(idDocumentoSiged);
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, elementosExpediente);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}
		}

		// CASO 3: Formato de comunicación de penalidades
		if (coTipoDocEval.intValue() == ConstantesUtil.PARAM_TIPO_DOC_OTROS.intValue()
				&& idSubCatDoc.intValue() == ConstantesUtil.PARAM_SUBCAT_DOC_PEN.intValue()) {

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			byte[] byteDoc = generarForLiquidacionPenalidades(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FORMATO_LIQUIDACION_PENALIDAD,
					pgimLiquidacionAuxDTO, pgimSubcategoriaDocDTO.getIdTipoExtensionGen());
			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);
			lstArchivosTmp.add(fileSiged);
			strName = "FLP-" + pgimLiquidacionAuxDTO.getNuContrato() + " - " + pgimLiquidacionAuxDTO.getNuLiquidacion()
					+ extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("Formato de liquidación de penalidad de "
					+ pgimLiquidacionAuxDTO.getNuContrato() + " - " + pgimLiquidacionAuxDTO.getNuLiquidacion());
			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			// Validar que no haya sido generado o cargado previamente el documento (por el
			// nombre del archivo)
			boolean reemplazar = false;
			if (elementosExpediente != null) {
				for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {
					for (Archivo archivo : documento.getArchivos()) {
						if (archivo.getNombre().contains(strName)
								&& documento.getIdTipoDocumento().equals(coTipoDocEval.toString())) {

							// validar si el archivo se encuentra firmado
							if (archivo.getFirmaDigitalSiged() != null) {
								if (archivo.getFirmaDigitalSiged().size() > 0) {
									throw new PgimException(TipoResultado.WARNING,
											"El archivo se encuentra firmado, no se puede reemplazar."); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
								}
							}

							// Ejecutar reemplazo
							reemplazar = true;
						}
						if (reemplazar) {
							break;
						}
					}
					if (reemplazar) {
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lstidDocumento.add(idDocumentoSiged);
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, elementosExpediente);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}
		}

		// Borramos archivos temporales
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Generar documento de liquidación");

		return respuesta;
	}

	public byte[] generarFichaObsInfSup(String ruta, PgimDocumentoDTO pgimDocumentoDTO,
			PgimSupervisionDTO pgimSupervisionDTO, PgimInstanciaProces pgimInstanciaProces,
			PgimUnidadMineraDTO pgimUnidadMineraDTO, Long idTipoExtensionGen) throws IOException, JSONException {
		File plantilla = new File(ruta);
		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));
		JSONArray list = new JSONArray();

		// cod fiscalización
		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "codigo_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		// nroexpedientesiged
		JSONObject nroexpedientesiged = new JSONObject();
		nroexpedientesiged.put("mergeField", "nroexpedientesiged");
		nroexpedientesiged.put("value", pgimInstanciaProces.getNuExpedienteSiged());
		list.put(nroexpedientesiged);

		// fecha_hora_generacion
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy HH:mm");
		String fecha_hora_generacion = sdf.format(pgimDocumentoDTO.getFeOrigenDocumento());
		JSONObject fecha_revision = new JSONObject();
		fecha_revision.put("mergeField", "fecha_revision");
		fecha_revision.put("value", fecha_hora_generacion);
		list.put(fecha_revision);

		// razon_social_agente_supervisado
		JSONObject razon_social_agente_supervisado = new JSONObject();
		razon_social_agente_supervisado.put("mergeField", "razon_social_agente_supervisado");
		razon_social_agente_supervisado.put("value", pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial().toUpperCase());
		list.put(razon_social_agente_supervisado);

		// nombre_unidad_minera
		JSONObject nombre_unidad_minera = new JSONObject();
		nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
		nombre_unidad_minera.put("value",pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+pgimUnidadMineraDTO.getNoUnidadMinera().toUpperCase());
		list.put(nombre_unidad_minera);

		// tipo_unidad_minera
		JSONObject tipo_unidad_minera = new JSONObject();
		tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
		tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera());
		list.put(tipo_unidad_minera);

		// nombre_especialidad
		JSONObject nombre_especialidad = new JSONObject();
		nombre_especialidad.put("mergeField", "nombre_especialidad");
		nombre_especialidad.put("value", pgimSupervisionDTO.getDescNoEspecialidad());
		list.put(nombre_especialidad);

		// division_supervisora
		String divisionSupervisora = pgimUnidadMineraDTO.getDescIdDivisonSupervisora();

		JSONObject division_supervisora = new JSONObject();
		division_supervisora.put("mergeField", "division_supervisora");
		division_supervisora.put("value", divisionSupervisora);
		list.put(division_supervisora);

		// tipo_y_subtipo_supervision
		JSONObject tipo_y_sub_tipo_supervision = new JSONObject();
		tipo_y_sub_tipo_supervision.put("mergeField", "tipo_y_sub_tipo_supervision");
		tipo_y_sub_tipo_supervision.put("value", pgimSupervisionDTO.getDescSubtipoSupervision().toUpperCase());
		list.put(tipo_y_sub_tipo_supervision);

		// motivo_supervision
		JSONObject motivo_supervision = new JSONObject();
		motivo_supervision.put("mergeField", "motivo_supervision");
		motivo_supervision.put("value", pgimSupervisionDTO.getDescDeMensaje());
		list.put(motivo_supervision);

		// ejecutor_supervision
		JSONObject ejecutor_supervision = new JSONObject();
		ejecutor_supervision.put("mergeField", "ejecutor_supervision");
		ejecutor_supervision.put("value", pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial());
		list.put(ejecutor_supervision);

		// nombre_apellidos_especialista_tecnico
		String apellidosNombresEspecialistaTecnico = "";
		String prefijo_nombre = "";
		String cargo = "";
		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalResponsableXRolOsi(
				pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		if(listaEspecialistasOsi.size() != 1){
			String errorMsj = "Para generar el documento se requiere que en el equipo solo exista un especialista técnico "
			+ "como responsable; actualmente existen "+listaEspecialistasOsi.size()+", por favor seleccione solo un responsable por rol";
			throw new PgimException(TipoResultado.WARNING, errorMsj);
		}

		PgimEqpInstanciaProDTO espOsi = listaEspecialistasOsi.get(0);
		// prefijo de especialista técnico
		if (espOsi.getNoPrefijoPersonaEquipo() != null) {
			prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " ";
		} else {
			prefijo_nombre = "";
		}

		apellidosNombresEspecialistaTecnico = prefijo_nombre + espOsi.getDescNoPersona() + " " + espOsi.getDescApPaterno()
				+ " " + espOsi.getDescApMaterno();

		JSONObject nombre_especialista = new JSONObject();
		nombre_especialista.put("mergeField", "nombre_especialista");
		nombre_especialista.put("value", apellidosNombresEspecialistaTecnico);
		list.put(nombre_especialista);

		// cargo_firmante
		if (espOsi.getNoCargoPersonaEquipo() != null) {
			cargo = espOsi.getNoCargoPersonaEquipo();
		} else {
			cargo = "";
		}

		// STORY: PGIM-6168: FISC. Gen. ficha de observaciones con fecha generación, prefijo y firma digital
		JSONObject cargo_firmante = new JSONObject();
		cargo_firmante.put("mergeField", "cargo_firmante");
		cargo_firmante.put("value", cargo);
		list.put(cargo_firmante);

		documento = PoiWordUtil.replaceJSONArray(documento, list);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarFichaObsInfSupCompleta(String ruta, PgimDocumentoDTO pgimDocumentoDTO,
			PgimSupervisionDTO pgimSupervisionDTO, PgimInstanciaProces pgimInstanciaProces,
			PgimUnidadMineraDTO pgimUnidadMineraDTO, List<PgimFichaObservacionDTO> lPgimFichaObservacionDTOCreado,
			Long idTipoExtensionGen, String nuInforme) throws Exception {

		File plantilla = new File(ruta);
		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String prefijo_nombre = "";

		String cargo = "";

		JSONArray list = new JSONArray();

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		// STORY: PGIM-6168: FISC. Gen. ficha de observaciones con fecha generación, prefijo y firma digital
		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		list.put(fecha_generacion_documento);

		// cod fiscalización
		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		System.out.println(cod_fiscalizacion);
		list.put(cod_fiscalizacion);
		// nroexpedientesiged
		JSONObject nroexpedientesiged = new JSONObject();
		nroexpedientesiged.put("mergeField", "nroexpedientesiged");
		nroexpedientesiged.put("value", pgimInstanciaProces.getNuExpedienteSiged());
		list.put(nroexpedientesiged);

		// fecha_hora_generacion
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");
		String fecha_hora_generacion = sdf.format(lPgimFichaObservacionDTOCreado.get(0).getFeRevisionFicha());

		JSONObject fecha_revision = new JSONObject();
		fecha_revision.put("mergeField", "fecha_revision");
		fecha_revision.put("value", fecha_hora_generacion);
		list.put(fecha_revision);

		// razon_social_agente_supervisado
		JSONObject razon_social_agente_supervisado = new JSONObject();
		razon_social_agente_supervisado.put("mergeField", "razon_social_agente_supervisado");
		razon_social_agente_supervisado.put("value", pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial().toUpperCase());
		list.put(razon_social_agente_supervisado);

		// nombre_unidad_minera
		JSONObject nombre_unidad_minera = new JSONObject();
		nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
		nombre_unidad_minera.put("value", pgimUnidadMineraDTO.getCoUnidadMinera().toUpperCase()+" - "+pgimUnidadMineraDTO.getNoUnidadMinera().toUpperCase());
		list.put(nombre_unidad_minera);

		// tipo_unidad_minera
		JSONObject tipo_unidad_minera = new JSONObject();
		tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
		tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera().toUpperCase());
		list.put(tipo_unidad_minera);

		// nombre_especialidad
		JSONObject nombre_especialidad = new JSONObject();
		nombre_especialidad.put("mergeField", "nombre_especialidad");
		nombre_especialidad.put("value", pgimSupervisionDTO.getDescNoEspecialidad());
		list.put(nombre_especialidad);

		// division_supervisora
		String divisionSupervisora = pgimUnidadMineraDTO.getDescIdDivisonSupervisora();

		JSONObject division_supervisora = new JSONObject();
		division_supervisora.put("mergeField", "division_supervisora");
		division_supervisora.put("value", divisionSupervisora);
		list.put(division_supervisora);

		// tipo_y_subtipo_supervision
		JSONObject tipo_y_sub_tipo_supervision = new JSONObject();
		tipo_y_sub_tipo_supervision.put("mergeField", "tipo_y_sub_tipo_supervision");
		tipo_y_sub_tipo_supervision.put("value", pgimSupervisionDTO.getDescSubtipoSupervision().toUpperCase());
		list.put(tipo_y_sub_tipo_supervision);

		// motivo_supervision
		JSONObject motivo_supervision = new JSONObject();
		motivo_supervision.put("mergeField", "motivo_supervision");
		motivo_supervision.put("value", pgimSupervisionDTO.getDescDeMensaje());
		list.put(motivo_supervision);

		// ejecutor_supervision
		JSONObject ejecutor_supervision = new JSONObject();
		ejecutor_supervision.put("mergeField", "ejecutor_supervision");
		ejecutor_supervision.put("value", pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial());
		list.put(ejecutor_supervision);

		// numero_informe
		JSONObject numero_informe = new JSONObject();
		numero_informe.put("mergeField", "numero_informe");
		numero_informe.put("value", nuInforme);
		list.put(numero_informe);

		// nombre_apellidos_especialista_tecnico
		String apellidosNombresEspecialistaTecnico = "";
		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalResponsableXRolOsi(
				pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		if(listaEspecialistasOsi.size() != 1){
			String errorMsj = "Para generar el documento se requiere que en el equipo solo exista un especialista técnico "
			+ "como responsable; actualmente existen "+listaEspecialistasOsi.size()+", por favor seleccione solo un responsable por rol";
			throw new PgimException(TipoResultado.WARNING, errorMsj);
		}

		PgimEqpInstanciaProDTO espOsi = listaEspecialistasOsi.get(0);
		if (espOsi.getNoPrefijoPersonaEquipo() != null) {
			prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " ";
		} else {
			prefijo_nombre = "";
		}

		apellidosNombresEspecialistaTecnico = prefijo_nombre + espOsi.getDescNoPersona() + " " + espOsi.getDescApPaterno()
				+ " " + espOsi.getDescApMaterno();

		JSONObject nombre_especialista = new JSONObject();
		nombre_especialista.put("mergeField", "nombre_especialista");
		nombre_especialista.put("value", apellidosNombresEspecialistaTecnico);
		list.put(nombre_especialista);

		// cargo_firmante
		if (espOsi.getNoCargoPersonaEquipo() != null) {
			cargo = espOsi.getNoCargoPersonaEquipo();
		} else {
			cargo = "";
		}

		// STORY: PGIM-6168: FISC. Gen. ficha de observaciones con fecha generación, prefijo y firma digital
		JSONObject cargo_firmante = new JSONObject();
		cargo_firmante.put("mergeField", "cargo_firmante");
		cargo_firmante.put("value", cargo);
		list.put(cargo_firmante);

		documento = PoiWordUtil.replaceJSONArray(documento, list);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list);

		// Lista de observaciones tabla_obs

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();

			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_obs")) {
					paragraph.removeRun(j);

					XWPFTable tableObs = PoiWordUtil.createFullTableInSpecificPosition(paragraph, documento,
							XWPFBorderType.SINGLE,
							XWPFBorderType.SINGLE, XWPFBorderType.SINGLE, XWPFBorderType.SINGLE, XWPFBorderType.SINGLE,
							XWPFBorderType.SINGLE);

					XWPFTableRow tableUbicacionRow1 = PoiWordUtil.createTableCell(tableObs, null, XWPFVertAlign.CENTER,
							250, "FFFFFF", 941, 0, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Nº", 8, true);
					tableUbicacionRow1 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow1, XWPFVertAlign.CENTER,
							250, "D9D9D9", 1882, 0, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Parte del informe", 8, true);
					tableUbicacionRow1 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow1, XWPFVertAlign.CENTER,
							250, "D9D9D9", 2353, 0, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Observaciones al informe", 8, true);
					tableUbicacionRow1 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow1, XWPFVertAlign.CENTER,
							250, "D9D9D9", 941, 0, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);
					tableUbicacionRow1 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow1, XWPFVertAlign.CENTER,
							250, "D9D9D9", 941, 0, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);
					tableUbicacionRow1 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow1, XWPFVertAlign.CENTER,
							250, "D9D9D9", 2352, 0, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);

					XWPFTableRow tableUbicacionRow2 = PoiWordUtil.createTableCell(tableObs, null, XWPFVertAlign.CENTER,
							250, "FFFFFF", 941, 1, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);
					tableUbicacionRow2 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow2, XWPFVertAlign.CENTER,
							250, "D9D9D9", 1882, 1, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);
					tableUbicacionRow2 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow2, XWPFVertAlign.CENTER,
							250, "D9D9D9", 2353, 1, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Observación", 8, true);
					tableUbicacionRow2 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow2, XWPFVertAlign.CENTER,
							250, "D9D9D9", 941, 1, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Tipo (1)", 8, true);
					tableUbicacionRow2 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow2, XWPFVertAlign.CENTER,
							250, "D9D9D9", 941, 1, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "¿Subsanada?", 8, true);
					tableUbicacionRow2 = PoiWordUtil.createTableCell(tableObs, tableUbicacionRow2, XWPFVertAlign.CENTER,
							250, "D9D9D9", 2352, 1, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Comentario", 8, true);

					CTVMerge vmerge = CTVMerge.Factory.newInstance();
					vmerge.setVal(STMerge.RESTART);
					tableObs.getRow(0).getCell(0).getCTTc().getTcPr().setVMerge(vmerge);

					// Secound Row cell will be merged
					CTVMerge vmerge1 = CTVMerge.Factory.newInstance();
					vmerge1.setVal(STMerge.CONTINUE);
					tableObs.getRow(1).getCell(0).getCTTc().getTcPr().setVMerge(vmerge1);

					vmerge = CTVMerge.Factory.newInstance();
					vmerge.setVal(STMerge.RESTART);
					tableObs.getRow(0).getCell(1).getCTTc().getTcPr().setVMerge(vmerge);

					// Secound Row cell will be merged
					vmerge1 = CTVMerge.Factory.newInstance();
					vmerge1.setVal(STMerge.CONTINUE);
					tableObs.getRow(1).getCell(1).getCTTc().getTcPr().setVMerge(vmerge1);

					CTHMerge hmerge = CTHMerge.Factory.newInstance();
					hmerge.setVal(STMerge.RESTART);
					tableObs.getRow(0).getCell(2).getCTTc().getTcPr().setHMerge(hmerge);

					// Secound Row cell will be merged
					CTHMerge hmerge1 = CTHMerge.Factory.newInstance();
					hmerge1.setVal(STMerge.CONTINUE);
					tableObs.getRow(0).getCell(3).getCTTc().getTcPr().setHMerge(hmerge1);

					CTHMerge hmerge2 = CTHMerge.Factory.newInstance();
					hmerge2.setVal(STMerge.CONTINUE);
					tableObs.getRow(0).getCell(4).getCTTc().getTcPr().setHMerge(hmerge2);

					CTHMerge hmerge3 = CTHMerge.Factory.newInstance();
					hmerge3.setVal(STMerge.CONTINUE);
					tableObs.getRow(0).getCell(5).getCTTc().getTcPr().setHMerge(hmerge3);

					Integer fila = 1;
					String FlSubsanada = "";

					for (PgimFichaObservacionDTO pgimFichaObservacionDTO : lPgimFichaObservacionDTOCreado) {

						XWPFTableRow tableUbicacionRowN = PoiWordUtil.createTableCell(tableObs, null,
								XWPFVertAlign.CENTER, 600, "FFFFFF", 50, fila + 1, 0, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, fila.toString(), 8, false);

						tableUbicacionRowN = PoiWordUtil.createTableCellHtml(tableObs, tableUbicacionRowN,
							XWPFVertAlign.CENTER, 600, "FFFFFF", 1882, fila+1, 1,
							ConstantesUtil.ALINEAR_LEFT, EscritorHtml.replaceLineBreakToPHtml(pgimFichaObservacionDTO.getDeParteInformeObservadaT()), 8, documento, "chunk09"+fila+1);

						tableUbicacionRowN = PoiWordUtil.createTableCellHtml(tableObs, tableUbicacionRowN,
							XWPFVertAlign.CENTER, 600, "FFFFFF", 4035, fila+1, 2,
							ConstantesUtil.ALINEAR_LEFT, EscritorHtml.replaceLineBreakToPHtml(pgimFichaObservacionDTO.getDeItemObservacionT()), 7, documento, "chunk09"+fila+2);

						String charNuevo = "N";
						if (!pgimFichaObservacionDTO.getDescTipoObservacionFicha().equals("Nueva")) {
							charNuevo = "R";
						}

						tableUbicacionRowN = PoiWordUtil.createTableCell(tableObs, tableUbicacionRowN,
								XWPFVertAlign.CENTER, 600, "FFFFFF", 150, fila + 1, 3, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, charNuevo, 8, false);

						if (pgimFichaObservacionDTO.getFlSubsanada().equals("1")) {
							FlSubsanada = "Sí";
						} else {
							FlSubsanada = "No";
						}

						tableUbicacionRowN = PoiWordUtil.createTableCell(tableObs, tableUbicacionRowN,
								XWPFVertAlign.CENTER, 600, "FFFFFF", 941, fila + 1, 4, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, FlSubsanada, 8, false);

						tableUbicacionRowN = PoiWordUtil.createTableCellHtml(tableObs, tableUbicacionRowN,
							XWPFVertAlign.CENTER, 600, "FFFFFF", 2352, fila+1, 5,
							ConstantesUtil.ALINEAR_LEFT, EscritorHtml.replaceLineBreakToPHtml(pgimFichaObservacionDTO.getCmItemObservacionT()), 7, documento, "chunk09"+fila+3);


						fila++;
					}
				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", 0, 8000); // PLANTILLA_FICHA_OBS_INF_FISCALIZACION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public ResponseEntity<ResponseDTO> generarFichaConfInfSupCompleta(PgimDocumentoDTO pgimDocumentoDTO,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO, RevisionInforme revisionInforme, Long idDocInformeFisc)
			throws Exception {

		PgimFichaRevisionDTO pgimFichaRevisionDTO = revisionInforme.getPgimFichaRevisionDTO();

		String prefijo_nombre = "";

		// Obtener cotablaInstancia
		PgimInstanciaProces pgimInstanciaProces = this.instanciaProcesService
				.obtenerInstanciaProcesoPorId(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		pgimInstanciaProcesDTO.setCoTablaInstancia(pgimInstanciaProces.getCoTablaInstancia());

		String nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();
		Long idSubCatDoc = pgimDocumentoDTO.getIdSubcatDocumento();
		ExpedienteDocOutRO elementosExpediente = null;

		PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTO = this.agenteSupervisadoService.obtenerAgenteSupervisadoPorInstancProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		// Validación del propietario del expediente
		if (nuExpedienteSiged != null) {
			ExpedienteSiged expedienteSiged = new ExpedienteSiged();
			expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
			expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());

			elementosExpediente = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
					pgimInstanciaProcesDTO.getIdProceso(), "Generar documento", auditoriaDTO);

			if (!elementosExpediente.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException("error", elementosExpediente.getMessage());
			}
		}

		DocumentoNuevo documentoNuevo = null;
		String idDocumentoSiged = "";
		List<String> lstidDocumento = new ArrayList<String>();
		Long coTipoDocEval = pgimDocumentoDTO.getCoTipoDocumentoSiged();

		// Datos de Supervisión y unidad minera
		PgimSupervisionDTO pgimSupervisionDTO = this.supervisionRepository
				.obtenerSupervisionByidInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		// Obtener idPrograma
		PgimSupervisionDTO pgimSupervisionDTO_TDR = this.supervisionService
				.obtenerSupervisionPorId(pgimSupervisionDTO.getIdSupervision());

		String flPropia = pgimSupervisionDTO_TDR.getFlPropia();

		PgimEspecialidad pgimEspecialidad = this.especialidadRepository
				.getOne(pgimSupervisionDTO_TDR.getDescIdEspecialidad());
		pgimSupervisionDTO.setDescNoEspecialidad(pgimEspecialidad.getNoEspecialidad());

		PgimSubtipoSupervision pgimSubtipoSupervision = this.subTipoSupervisionRepository
				.getOne(pgimSupervisionDTO.getIdSubtipoSupervision());
		pgimSupervisionDTO.setDescDeMensaje(pgimSubtipoSupervision.getDeSubtipoSupervision());

		PgimUnidadMineraDTO pgimUnidadMineraDTO = this.unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());

		// Documento
		PgimSupervisionDTO valoresTDR = this.supervisionService
				.obtenerValoresTDR(pgimSupervisionDTO.getIdSupervision());

		PgimSupervisionDTO valoresActaSupervision = this.supervisionService
				.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

		valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
		valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
		valoresActaSupervision.setDescDeMensaje(pgimSupervisionDTO.getDescDeMensaje());
		valoresActaSupervision.setDescSubtipoSupervision(pgimSupervisionDTO.getDescSubtipoSupervision());
		valoresActaSupervision.setDescNoEspecialidad(pgimSupervisionDTO.getDescNoEspecialidad());

		String strSupervisor = "GSM";

		if (flPropia.equals("0")) {
			PgimContratoDTO pgimContratoDTO = contratoRepository
					.obtenerContratoPorId(pgimSupervisionDTO.getDescIdContrato());

			strSupervisor = valoresTDR.getDescEmpresaSupervisoraNoRazonSocial().toUpperCase();
			valoresActaSupervision.setDescDeNuContrato(pgimContratoDTO.getNuContrato());

		} else {
			valoresActaSupervision.setDescDeNuContrato("---");
		}

		valoresActaSupervision.setDescEmpresaSupervisoraNoRazonSocial(strSupervisor);
		valoresActaSupervision.setFeInicioSupervisionReal(pgimSupervisionDTO.getFeInicioSupervisionReal());
		valoresActaSupervision.setFeFinSupervisionReal(pgimSupervisionDTO.getFeFinSupervisionReal());
		valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());
		valoresActaSupervision.setDescAgenteSupervisadoNoRazonSocial(pgimAgenteSupervisadoDTO.getDescNoRazonSocial());

		pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

		Map<String, Object> hmMergeFieldsYValores = new HashMap<>();
		String guiones = "---";
		String patronFecha = "dd/MM/yyyy";

		Boolean seRegistraronObservaciones = false;
		if (pgimFichaRevisionDTO.getDescCaDiasDemoraDesde1ObsHastaInfConforme() != null) {
			// Entonces existente observaciones
			seRegistraronObservaciones = true;
		}

		hmMergeFieldsYValores.put("fecha_revision", pgimFichaRevisionDTO.getFeRevisionFicha());

		// ===================================
		// LITERAL B. PRESENTACIÓN DEL INFORME
		// ===================================

		String plazoParaPresentacionInforme1 = (pgimFichaRevisionDTO
				.getDescCaDiasPlazoPresentacionInforme1() != null
						? pgimFichaRevisionDTO.getDescCaDiasPlazoPresentacionInforme1().toString()
						: guiones);

		String feFirmaActaFiscalizacion = CommonsUtil
				.convertirFechaACadena(pgimFichaRevisionDTO.getDescFeFirmaActaFiscalizacion(), patronFecha);

		String fePresentacionInforme1 = CommonsUtil
				.convertirFechaACadena(pgimFichaRevisionDTO.getDescFePresentacionInforme1(), patronFecha);

		String caDiasDemoraInforme1 = (pgimFichaRevisionDTO.getDescCaDiasDemoraInforme1() != null
				? pgimFichaRevisionDTO.getDescCaDiasDemoraInforme1().toString()
				: guiones);

		String estaConformeInforme1 = (seRegistraronObservaciones ? "No" : "Sí");

		String feRevisionInforme1 = "";

		if (seRegistraronObservaciones) {
			// Sí hay observaciones
			feRevisionInforme1 = (pgimFichaRevisionDTO.getDescFeObservacionInforme1() != null ? CommonsUtil
					.convertirFechaACadena(pgimFichaRevisionDTO.getDescFeObservacionInforme1(), patronFecha)
					: guiones);
		} else {
			// No hay observaciones
			feRevisionInforme1 = (pgimFichaRevisionDTO.getFeRevisionFicha() != null ? CommonsUtil
					.convertirFechaACadena(pgimFichaRevisionDTO.getFeRevisionFicha(), patronFecha)
					: guiones);
		}

		hmMergeFieldsYValores.put("dias_pres_inf1", plazoParaPresentacionInforme1);
		hmMergeFieldsYValores.put("fe_firma1", feFirmaActaFiscalizacion);
		hmMergeFieldsYValores.put("fe_entregable1", fePresentacionInforme1);
		hmMergeFieldsYValores.put("dias_dem1", caDiasDemoraInforme1);
		hmMergeFieldsYValores.put("conforme1", estaConformeInforme1);
		hmMergeFieldsYValores.put("fe_rev1", feRevisionInforme1);

		// =======================================
		// LITERAL C. SUBSANACIÓN DE OBSERVACIONES
		// =======================================

		String caDiasParaSubsanacionInicial = guiones;
		String feRemisionObservacionesInf1 = guiones;
		String fePresentacionInformeConforme = guiones;
		String caDiasDemoraSubsanacion = guiones;
		String feRevisionInformeConforme = guiones;

		if (seRegistraronObservaciones) {

			caDiasParaSubsanacionInicial = (pgimFichaRevisionDTO.getDescCaDiasParaPresentacionInforme2() != null
					? pgimFichaRevisionDTO.getDescCaDiasParaPresentacionInforme2().toString()
					: guiones);

			feRemisionObservacionesInf1 = (pgimFichaRevisionDTO.getDescFeObservacionInforme1() != null ? CommonsUtil
					.convertirFechaACadena(pgimFichaRevisionDTO.getDescFeObservacionInforme1(), patronFecha)
					: guiones);

			fePresentacionInformeConforme = CommonsUtil.convertirFechaACadena(pgimFichaRevisionDTO.getFePresentacion(),
					patronFecha);

			caDiasDemoraSubsanacion = pgimFichaRevisionDTO.getDescCaDiasDemoraDesde1ObsHastaInfConforme().toString();

			feRevisionInformeConforme = CommonsUtil
					.convertirFechaACadena(pgimFichaRevisionDTO.getFeRevisionFicha(), patronFecha);
		}

		hmMergeFieldsYValores.put("dias_abso_inf2", caDiasParaSubsanacionInicial);
		hmMergeFieldsYValores.put("fe_firma2", feRemisionObservacionesInf1);
		hmMergeFieldsYValores.put("fe_entregable2", fePresentacionInformeConforme);
		hmMergeFieldsYValores.put("dias_dem2", caDiasDemoraSubsanacion);

		if (seRegistraronObservaciones) {
			hmMergeFieldsYValores.put("conforme2", "Sí");
		} else {
			hmMergeFieldsYValores.put("conforme2", guiones);
		}

		hmMergeFieldsYValores.put("fe_rev2", feRevisionInformeConforme);

		// ===================================
		// LITERAL D. RESULTADO DE LA REVISIÓN
		// ===================================

		Integer totalDiasPenalidadCalculados = pgimFichaRevisionDTO.getCaDiasDemoraCalculados();
		Integer totalDiasRealesPenalidad = pgimFichaRevisionDTO.getCaDiasDemoraEstablecidos();
		String seAplicaPenalidad;
		String mensajeAplicacionPenalidad = guiones;
		String apellidosNombresEspecialistaTecnico = "";

		if (pgimFichaRevisionDTO.getFlAplicaPenalidad().equals("1")) {
			seAplicaPenalidad = "Sí";
			mensajeAplicacionPenalidad = "Se comunicará las penalidades a aplicar al momento de la presentación y aprobación de las liquidaciones";
		} else {
			seAplicaPenalidad = "No";
			if (totalDiasPenalidadCalculados > 0) {
				mensajeAplicacionPenalidad = "Se deberá adjuntar el respectivo informe de justificación";
			}
		}
		hmMergeFieldsYValores.put("ap_pena", seAplicaPenalidad);

		hmMergeFieldsYValores.put("dias_pena", totalDiasPenalidadCalculados.toString());
		hmMergeFieldsYValores.put("dias_real_pena", totalDiasRealesPenalidad.toString());
		hmMergeFieldsYValores.put("mensaje", mensajeAplicacionPenalidad);

		// obtener el especialista tecnico responsable
		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalResponsableXRolOsi(
				pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		if(listaEspecialistasOsi.size() != 1){
			String errorMsj = "Para generar el documento se requiere que en el equipo solo exista un especialista técnico como responsable; actualmente existen "+listaEspecialistasOsi.size()+", por favor seleccione solo un responsable por rol";
			throw new PgimException(TipoResultado.WARNING, errorMsj);
		}
		
		// STORY: PGIM-6170: Gen. ficha de conformidad con fecha generación, prefijo y firma digital
		// Permite mostrar la data el prefijo del especialista técnico mediante condicionales
		PgimEqpInstanciaProDTO espOsi = listaEspecialistasOsi.get(0);
		if (espOsi.getNoPrefijoPersonaEquipo() != null) {
			prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " ";
		} else {
			prefijo_nombre = "";
		}
		
		apellidosNombresEspecialistaTecnico = prefijo_nombre + espOsi.getDescNoPersona() + " " + espOsi.getDescApPaterno()
				+ " " + espOsi.getDescApMaterno();

		hmMergeFieldsYValores.put("apellidos_nombres_especialista_tecnico", apellidosNombresEspecialistaTecnico);
		hmMergeFieldsYValores.put("division", pgimUnidadMineraDTO.getDescIdDivisonSupervisora());

		PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
				.obtenerSubcategoriaDocPorId(idSubCatDoc);

		String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

		PgimDocumentoDTO pgimDocumentoDTOInforme = this.obtenerDocumentoById(idDocInformeFisc);			

		String nuInforme = this.obtenerNuSiged(pgimInstanciaProces.getNuExpedienteSiged(), pgimDocumentoDTOInforme.getCoDocumentoSiged(), auditoriaDTO);

		hmMergeFieldsYValores.put("numero_informe", nuInforme);

		byte[] byteDoc = this.generarFichaConfInfSup(
				propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FICHA_CONF_INF_FISCALIZACION,
				valoresActaSupervision, pgimInstanciaProces, pgimUnidadMineraDTO, hmMergeFieldsYValores,
				pgimSubcategoriaDocDTO.getIdTipoExtensionGen());

		String strName = CommonsUtil.generadorNombreUnico();
		String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
		Path docPath = Paths.get(strPath);
		Files.write(docPath, byteDoc);
		File fileSiged = new File(strPath);
		strName = "CONF_IS-" + pgimSupervisionDTO.getCoSupervision() + extension;

		MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

		pgimDocumentoDTO.setDeAsuntoDocumento("Conformidad al IS de " + pgimSupervisionDTO.getCoSupervision());
		pgimDocumentoDTO.setNumeroDocumento("CONF_IS-" + pgimInstanciaProcesDTO.getCoTablaInstancia());

		// Validar que no haya sido generado o cargado previamente el documento (por su
		// número)
		boolean reemplazar = false;
		if (elementosExpediente != null) {
			for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {
				if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
						&& documento.getIdTipoDocumento().equals(coTipoDocEval.toString())) {
					// Ejecutar reemplazo
					reemplazar = true;
					documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
							auditoriaDTO.getCoUsuarioSiged());
					idDocumentoSiged = documento.getIdDocumento();
					lstidDocumento.add(idDocumentoSiged);
				}
				if (reemplazar) {
					break;
				}
			}
		}

		ResponseEntity<ResponseDTO> respuesta = null;

		if (reemplazar) {
			// Si lo encuentra el documento se procede al reemplazo del documento
			respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
					pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, elementosExpediente);
		} else {
			// Si no se encuentra se procese a adjuntar por ser documento nuevo
			respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
					auditoriaDTO);
		}

		// Borramos archivos temporales
		List<File> lstArchivosTmp = new ArrayList<>();
		lstArchivosTmp.add(fileSiged);
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Generar ficha de conformidad");

		return respuesta;
	}

	@Override
	@Transactional(readOnly = false)
	public ResponseEntity<ResponseDTO> generarFichaObsInfSupCompleta(PgimDocumentoDTO pgimDocumentoDTO,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO,
			List<PgimFichaObservacionDTO> lPgimFichaObservacionDTOCreado, Long idDocInformeFisc) throws Exception {

		ResponseEntity<ResponseDTO> respuesta = null;
		// Obtener cotablaInstancia
		PgimInstanciaProces pgimInstanciaProces = instanciaProcesService
				.obtenerInstanciaProcesoPorId(pgimInstanciaProcesDTO.getIdInstanciaProceso());
		pgimInstanciaProcesDTO.setCoTablaInstancia(pgimInstanciaProces.getCoTablaInstancia());
		String nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();
		Long idSubCatDoc = pgimDocumentoDTO.getIdSubcatDocumento();
		ExpedienteDocOutRO elementosExpediente = null;

		PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTO = this.agenteSupervisadoService.obtenerAgenteSupervisadoPorInstancProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		// Validación del propietario del expediente
		if (nuExpedienteSiged != null) {
			ExpedienteSiged expedienteSiged = new ExpedienteSiged();
			expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
			expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());
			elementosExpediente = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
					pgimInstanciaProcesDTO.getIdProceso(), "Generar documento", auditoriaDTO);
			if (!elementosExpediente.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException("error", elementosExpediente.getMessage());
			}
		}

		DocumentoNuevo documentoNuevo = null;
		String idDocumentoSiged = "";
		List<String> lstidDocumento = new ArrayList<String>();
		Long coTipoDocEval = pgimDocumentoDTO.getCoTipoDocumentoSiged();

		// Datos de Supervisión y unidad minera
		PgimSupervisionDTO pgimSupervisionDTO = supervisionRepository
				.obtenerSupervisionByidInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
		// Obtener idPrograma
		PgimSupervisionDTO pgimSupervisionDTO_TDR = supervisionService
				.obtenerSupervisionPorId(pgimSupervisionDTO.getIdSupervision());
		String flPropia = pgimSupervisionDTO_TDR.getFlPropia();
		PgimEspecialidad pgimEspecialidad = especialidadRepository
				.getOne(pgimSupervisionDTO_TDR.getDescIdEspecialidad());
		pgimSupervisionDTO.setDescNoEspecialidad(pgimEspecialidad.getNoEspecialidad());
		PgimSubtipoSupervision pgimSubtipoSupervision = subTipoSupervisionRepository
				.getOne(pgimSupervisionDTO.getIdSubtipoSupervision());
		pgimSupervisionDTO.setDescDeMensaje(pgimSubtipoSupervision.getDeSubtipoSupervision());
		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());
		// Procesar de acuerdo al tipo de documento
		// CASO 7: Ficha de observaciones al informe de supervisión
		if (coTipoDocEval.compareTo(ConstantesUtil.PARAM_TIPO_DOC_OTROS) == 0 && nuExpedienteSiged != null
				&& idSubCatDoc.compareTo(ConstantesUtil.PARAM_SUBCAT_DOC_OIS) == 0) {

			PgimSupervisionDTO valoresTDR = this.supervisionService
					.obtenerValoresTDR(pgimSupervisionDTO.getIdSupervision());

			PgimSupervisionDTO valoresActaSupervision = this.supervisionService
					.obtenerValoresFichaHechosConstatados(pgimSupervisionDTO.getIdSupervision());

			valoresActaSupervision.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			valoresActaSupervision.setIdSupervision(pgimSupervisionDTO.getIdSupervision());
			valoresActaSupervision.setDescDeMensaje(pgimSupervisionDTO.getDescDeMensaje());
			valoresActaSupervision.setDescSubtipoSupervision(pgimSupervisionDTO.getDescSubtipoSupervision());
			valoresActaSupervision.setDescNoEspecialidad(pgimSupervisionDTO.getDescNoEspecialidad());
			valoresActaSupervision.setCoSupervision(pgimSupervisionDTO.getCoSupervision());

			String strSupervisor = "GSM";
			if (flPropia.equals("0")) {
				strSupervisor = valoresTDR.getDescEmpresaSupervisoraNoRazonSocial().toUpperCase();
				valoresActaSupervision.setDescDeNuContrato(pgimSupervisionDTO.getDescDeNuContrato());
			} else {
				valoresActaSupervision.setDescDeNuContrato("---");
			}
			valoresActaSupervision.setDescEmpresaSupervisoraNoRazonSocial(strSupervisor);
			valoresActaSupervision.setDescAgenteSupervisadoNoRazonSocial(pgimAgenteSupervisadoDTO.getDescNoRazonSocial());

			pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(idSubCatDoc);

			String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

			PgimDocumentoDTO pgimDocumentoDTOInforme = this.obtenerDocumentoById(idDocInformeFisc);			

			String nuInforme = this.obtenerNuSiged(pgimInstanciaProces.getNuExpedienteSiged(), pgimDocumentoDTOInforme.getCoDocumentoSiged(), auditoriaDTO);


			byte[] byteDoc = this.generarFichaObsInfSupCompleta(
					propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FICHA_OBS_INF_FISCALIZACION,
					pgimDocumentoDTO, valoresActaSupervision, pgimInstanciaProces, pgimUnidadMineraDTO,
					lPgimFichaObservacionDTOCreado, pgimSubcategoriaDocDTO.getIdTipoExtensionGen(), nuInforme);
			String strName = CommonsUtil.generadorNombreUnico();
			String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
			Path docPath = Paths.get(strPath);
			Files.write(docPath, byteDoc);
			File fileSiged = new File(strPath);

			strName = "OBS_IS-" + pgimSupervisionDTO.getCoSupervision() + extension;

			MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

			pgimDocumentoDTO.setDeAsuntoDocumento("Observaciones al IS de " + pgimSupervisionDTO.getCoSupervision());

			// Validar que no haya sido generado o cargado previamente el documento (por su
			// número)
			boolean reemplazar = false;
			if (elementosExpediente != null) {
				for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {
					if (documento.getNroDocumento().equals(pgimDocumentoDTO.getNumeroDocumento())
							&& documento.getIdTipoDocumento().equals(coTipoDocEval.toString())) {
						// Ejecutar reemplazo
						reemplazar = true;
						documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
								auditoriaDTO.getCoUsuarioSiged());
						idDocumentoSiged = documento.getIdDocumento();
						lstidDocumento.add(idDocumentoSiged);
					}
					if (reemplazar) {
						break;
					}
				}
			}

			if (reemplazar) {
				// Si lo encuentra el documento se procede al reemplazo del documento
				respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
						pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, elementosExpediente);
			} else {
				// Si no se encuentra se procese a adjuntar por ser documento nuevo
				respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
						auditoriaDTO);
			}

			// Borramos archivos temporales
			List<File> lstArchivosTmp = new ArrayList<>();
			lstArchivosTmp.add(fileSiged);
			CommonsUtil.borrarArchivos(lstArchivosTmp, "Generar ficha de observaciones");

		}
		return respuesta;
	}

	public byte[] generarFichaConfInfSup(String ruta, PgimSupervisionDTO pgimSupervisionDTO,
			PgimInstanciaProces pgimInstanciaProces,
			PgimUnidadMineraDTO pgimUnidadMineraDTO, Map<String, Object> hmMergeFieldsYValores, Long idTipoExtensionGen)
			throws IOException, JSONException, XmlException {

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		File plantilla = new File(ruta);
		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));
		JSONArray listParagraph = new JSONArray();
		JSONArray listTable = new JSONArray();

		// fecha_revision
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");

		// STORY: PGIM-6170: Gen. ficha de conformidad con fecha generación, prefijo y firma digital
		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		listParagraph.put(fecha_generacion_documento);

		// cod fiscalización
		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		listParagraph.put(cod_fiscalizacion);

		// ejecutor_supervision
		JSONObject ejecutor_supervision = new JSONObject();
		ejecutor_supervision.put("mergeField", "ejecutor_supervision");
		ejecutor_supervision.put("value", pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial());
		listTable.put(ejecutor_supervision);

		// numero_contrato
		JSONObject numero_contrato = new JSONObject();
		numero_contrato.put("mergeField", "numero_contrato");
		numero_contrato.put("value", CommonsUtil.validarNull(pgimSupervisionDTO.getDescDeNuContrato()));
		listTable.put(numero_contrato);

		// nroexpedientesiged
		JSONObject nroexpedientesiged = new JSONObject();
		nroexpedientesiged.put("mergeField", "nroexpedientesiged");
		nroexpedientesiged.put("value", pgimInstanciaProces.getNuExpedienteSiged());
		listTable.put(nroexpedientesiged);

		// tipo_y_subtipo_supervision
		JSONObject tipo_y_sub_tipo_supervision = new JSONObject();
		tipo_y_sub_tipo_supervision.put("mergeField", "tipo_y_sub_tipo_supervision");
		tipo_y_sub_tipo_supervision.put("value", pgimSupervisionDTO.getDescSubtipoSupervision().toUpperCase());
		listTable.put(tipo_y_sub_tipo_supervision);

		// motivo_supervision
		JSONObject motivo_supervision = new JSONObject();
		motivo_supervision.put("mergeField", "motivo_supervision");
		motivo_supervision.put("value", pgimSupervisionDTO.getDescDeMensaje());
		listTable.put(motivo_supervision);

		// razon_social_agente_supervisado
		JSONObject rs_agente_sup = new JSONObject();
		rs_agente_sup.put("mergeField", "rs_agente_sup");
		rs_agente_sup.put("value", pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial().toUpperCase());
		listTable.put(rs_agente_sup);

		// nombre_unidad_minera
		JSONObject nombre_unidad_minera = new JSONObject();
		nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
		nombre_unidad_minera.put("value", pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+pgimUnidadMineraDTO.getNoUnidadMinera().toUpperCase());
		listTable.put(nombre_unidad_minera);

		// tipo_unidad_minera
		JSONObject tipo_unidad_minera = new JSONObject();
		tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
		tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera());
		listTable.put(tipo_unidad_minera);

		// fecha_hora_inicio_real
		SimpleDateFormat sdfhm = new SimpleDateFormat("d'/'MM'/'yyyy HH:mm");

		JSONObject fecha_inicio_real = new JSONObject();
		fecha_inicio_real.put("mergeField", "fecha_inicio_real");
		fecha_inicio_real.put("value", sdfhm.format(pgimSupervisionDTO.getFeInicioSupervisionReal()));
		listTable.put(fecha_inicio_real);

		// fecha_hora_fin_real
		JSONObject fecha_fin_real = new JSONObject();
		fecha_fin_real.put("mergeField", "fecha_fin_real");
		fecha_fin_real.put("value", sdfhm.format(pgimSupervisionDTO.getFeFinSupervisionReal()));
		listTable.put(fecha_fin_real);

		if (hmMergeFieldsYValores != null) {
			Date fechaRevision = (Date) hmMergeFieldsYValores.get("fecha_revision");
			JSONObject fecha_revision = new JSONObject();
			fecha_revision.put("mergeField", "fecha_revision");
			fecha_revision.put("value", sdf.format(fechaRevision));
			listParagraph.put(fecha_revision);

			String diasPresIf1 = (String) hmMergeFieldsYValores.get("dias_pres_inf1");
			JSONObject dias_pres_inf1 = new JSONObject();
			dias_pres_inf1.put("mergeField", "dias_pres_inf1");
			dias_pres_inf1.put("value", diasPresIf1);
			listTable.put(dias_pres_inf1);

			String feFirma1 = (String) hmMergeFieldsYValores.get("fe_firma1");
			JSONObject fe_firma1 = new JSONObject();
			fe_firma1.put("mergeField", "fe_firma1");
			fe_firma1.put("value", feFirma1);
			listTable.put(fe_firma1);

			String feEntregable1 = (String) hmMergeFieldsYValores.get("fe_entregable1");
			JSONObject fe_entregable1 = new JSONObject();
			fe_entregable1.put("mergeField", "fe_entregable1");
			fe_entregable1.put("value", feEntregable1);
			listTable.put(fe_entregable1);

			String diasDem1 = (String) hmMergeFieldsYValores.get("dias_dem1");
			JSONObject dias_dem1 = new JSONObject();
			dias_dem1.put("mergeField", "dias_dem1");
			dias_dem1.put("value", diasDem1);
			listTable.put(dias_dem1);

			String conforme_1 = (String) hmMergeFieldsYValores.get("conforme1");
			JSONObject conforme1 = new JSONObject();
			conforme1.put("mergeField", "conforme1");
			conforme1.put("value", conforme_1);
			listTable.put(conforme1);

			String feRev1 = (String) hmMergeFieldsYValores.get("fe_rev1");
			JSONObject fe_rev1 = new JSONObject();
			fe_rev1.put("mergeField", "fe_rev1");
			fe_rev1.put("value", feRev1);
			listTable.put(fe_rev1);

			String dias_abso_inf2 = (String) hmMergeFieldsYValores.get("dias_abso_inf2");
			JSONObject jSON_dias_abs_inf2 = new JSONObject();
			jSON_dias_abs_inf2.put("mergeField", "dias_abso_inf2");
			jSON_dias_abs_inf2.put("value", dias_abso_inf2);
			listTable.put(jSON_dias_abs_inf2);

			String feFirma2 = (String) hmMergeFieldsYValores.get("fe_firma2");
			JSONObject fe_firma2 = new JSONObject();
			fe_firma2.put("mergeField", "fe_firma2");
			fe_firma2.put("value", feFirma2);
			listTable.put(fe_firma2);

			String feEntregable2 = (String) hmMergeFieldsYValores.get("fe_entregable2");
			JSONObject fe_entregable2 = new JSONObject();
			fe_entregable2.put("mergeField", "fe_entregable2");
			fe_entregable2.put("value", feEntregable2);
			listTable.put(fe_entregable2);

			String diasDem2 = (String) hmMergeFieldsYValores.get("dias_dem2");
			JSONObject dias_dem2 = new JSONObject();
			dias_dem2.put("mergeField", "dias_dem2");
			dias_dem2.put("value", diasDem2);
			listTable.put(dias_dem2);

			String conforme_2 = (String) hmMergeFieldsYValores.get("conforme2");
			JSONObject conforme2 = new JSONObject();
			conforme2.put("mergeField", "conforme2");
			conforme2.put("value", conforme_2);
			listTable.put(conforme2);

			String feRev2 = (String) hmMergeFieldsYValores.get("fe_rev2");
			JSONObject fe_rev2 = new JSONObject();
			fe_rev2.put("mergeField", "fe_rev2");
			fe_rev2.put("value", feRev2);
			listTable.put(fe_rev2);

			String diasPena = (String) hmMergeFieldsYValores.get("dias_pena");
			JSONObject dias_pena = new JSONObject();
			dias_pena.put("mergeField", "dias_pena");
			dias_pena.put("value", diasPena);
			listTable.put(dias_pena);

			String diasRealPena = (String) hmMergeFieldsYValores.get("dias_real_pena");
			JSONObject dias_real_pena = new JSONObject();
			dias_real_pena.put("mergeField", "dias_real_pena");
			dias_real_pena.put("value", diasRealPena);
			listTable.put(dias_real_pena);

			String r_mensaje = (String) hmMergeFieldsYValores.get("mensaje");
			JSONObject mensaje = new JSONObject();
			mensaje.put("mergeField", "mensaje");
			mensaje.put("value", r_mensaje);
			listTable.put(mensaje);
			// listParagraph.put(mensaje);

			String apPena = (String) hmMergeFieldsYValores.get("ap_pena");
			JSONObject ap_pena = new JSONObject();
			ap_pena.put("mergeField", "ap_pena");
			ap_pena.put("value", apPena);
			listTable.put(ap_pena);

			String apellidosNombresEspecialistaTecnico = (String) hmMergeFieldsYValores
					.get("apellidos_nombres_especialista_tecnico");
			JSONObject apellidos_nombres_especialista_tecnico = new JSONObject();
			apellidos_nombres_especialista_tecnico.put("mergeField", "apellidos_nombres_especialista_tecnico");
			apellidos_nombres_especialista_tecnico.put("value", apellidosNombresEspecialistaTecnico);
			listTable.put(apellidos_nombres_especialista_tecnico);

			String r_division = (String) hmMergeFieldsYValores.get("division");
			JSONObject division = new JSONObject();
			division.put("mergeField", "division");
			division.put("value", r_division);
			listTable.put(division);

			String numeroInforme = (String) hmMergeFieldsYValores.get("numero_informe");
			JSONObject numero_informe = new JSONObject();
			numero_informe.put("mergeField", "numero_informe");
			numero_informe.put("value", numeroInforme);
			listTable.put(numero_informe);

		}

		documento = PoiWordUtil.replaceJSONArray(documento, listParagraph);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, listTable);

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", 0, 8000); // PLANTILLA_FICHA_CONF_INF_FISCALIZACION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@SuppressWarnings("unchecked")
	public byte[] generarResumenInsPre(String ruta, PgimDocumentoDTO pgimDocumentoDTO,
			PgimSupervisionDTO pgimSupervisionDTO, PgimInstanciaProces pgimInstanciaProces,
			PgimUnidadMineraDTO pgimUnidadMineraDTO, List<PgimUbigeoDTO> listaUbigeos, Map<String, Object> datosReporte,
			Long idTipoExtensionGen) throws IOException, JSONException, XmlException {

		File plantilla = new File(ruta);
		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));
		JSONArray list = new JSONArray();

		// fecha_hora_generacion
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy HH:mm");

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		JSONObject fecha_hora_generacion = new JSONObject();
		fecha_hora_generacion.put("mergeField", "fecha_hora_generacion");
		fecha_hora_generacion.put("value", sdf.format(pgimDocumentoDTO.getFeOrigenDocumento()));
		list.put(fecha_hora_generacion);

		// cod de fiscalización
		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		// nombre_apellidos_especialista_tecnico
		List<PgimSupervisionDTO> listaEspecialistas = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalXRolOsi(
				pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);
		for (PgimEqpInstanciaProDTO espOsi : listaEspecialistasOsi) {
			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(espOsi.getDescNoPersona());
			obj.setDescApPaterno(espOsi.getDescApPaterno());
			obj.setDescApMaterno(espOsi.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(espOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(espOsi.getDescNoRolProceso());
			listaEspecialistas.add(obj);
		}

		for (PgimSupervisionDTO esp : listaEspecialistas) {
			JSONObject nombre_apellidos_especialista_tecnico = new JSONObject();
			nombre_apellidos_especialista_tecnico.put("mergeField", "nombre_apellidos_especialista_tecnico");
			nombre_apellidos_especialista_tecnico.put("value",
					esp.getDescNoPersona() + " " + esp.getDescApPaterno() + " " + esp.getDescApMaterno());
			list.put(nombre_apellidos_especialista_tecnico);
		}

		// nroexpedientesiged
		JSONObject nroexpedientesiged = new JSONObject();
		nroexpedientesiged.put("mergeField", "nroexpedientesiged");
		nroexpedientesiged.put("value", pgimInstanciaProces.getNuExpedienteSiged());
		list.put(nroexpedientesiged);

		// razon_social_agente_supervisado
		JSONObject razon_social_agente_supervisado = new JSONObject();
		razon_social_agente_supervisado.put("mergeField", "razon_social_agente_supervisado");
		razon_social_agente_supervisado.put("value", pgimUnidadMineraDTO.getDescNoRazonSocial().toUpperCase());
		list.put(razon_social_agente_supervisado);

		// nombre_unidad_minera
		JSONObject nombre_unidad_minera = new JSONObject();
		nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
		nombre_unidad_minera.put("value", pgimUnidadMineraDTO.getNoUnidadMinera().toUpperCase());
		list.put(nombre_unidad_minera);

		// nombre_especialidad
		JSONObject nombre_especialidad = new JSONObject();
		nombre_especialidad.put("mergeField", "nombre_especialidad");
		nombre_especialidad.put("value", pgimSupervisionDTO.getDescNoEspecialidad());
		list.put(nombre_especialidad);

		// tipo_y_subtipo_supervision
		JSONObject tipo_y_subtipo_supervision = new JSONObject();
		tipo_y_subtipo_supervision.put("mergeField", "tipo_y_subtipo_supervision");
		tipo_y_subtipo_supervision.put("value", pgimSupervisionDTO.getDescSubtipoSupervision().toUpperCase());
		list.put(tipo_y_subtipo_supervision);

		// tipo_y_subtipo_supervision
		JSONObject motivo_supervision = new JSONObject();
		motivo_supervision.put("mergeField", "motivo_supervision");
		motivo_supervision.put("value", pgimSupervisionDTO.getDescDeMensaje());
		list.put(motivo_supervision);

		// division_supervisora
		String divisionSupervisora = pgimUnidadMineraDTO.getDescIdDivisonSupervisora();

		JSONObject division_supervisora = new JSONObject();
		division_supervisora.put("mergeField", "division_supervisora");
		division_supervisora.put("value", divisionSupervisora);
		list.put(division_supervisora);

		// ejecutor_supervision
		JSONObject ejecutor_supervision = new JSONObject();
		ejecutor_supervision.put("mergeField", "ejecutor_supervision");
		ejecutor_supervision.put("value", pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial());
		list.put(ejecutor_supervision);

		// numero_contrato
		String numeroContrato = pgimSupervisionDTO.getDescDeNuContrato();
		if (numeroContrato == null) {
			numeroContrato = "---";
		}
		JSONObject numero_contrato = new JSONObject();
		numero_contrato.put("mergeField", "numero_contrato");
		numero_contrato.put("value", numeroContrato);
		list.put(numero_contrato);

		// fecha_hora_inicio_real
		sdf = new SimpleDateFormat("d'/'MM'/'yyyy HH:mm");

		JSONObject fecha_hora_inicio_real = new JSONObject();
		fecha_hora_inicio_real.put("mergeField", "fecha_hora_inicio_real");
		fecha_hora_inicio_real.put("value", sdf.format(pgimSupervisionDTO.getFeInicioSupervisionReal()));
		list.put(fecha_hora_inicio_real);

		// fecha_hora_fin_real
		JSONObject fecha_hora_fin_real = new JSONObject();
		fecha_hora_fin_real.put("mergeField", "fecha_hora_fin_real");
		fecha_hora_fin_real.put("value", sdf.format(pgimSupervisionDTO.getFeFinSupervisionReal()));
		list.put(fecha_hora_fin_real);

		JSONArray list2 = new JSONArray();

		// ultima_fecha_presentacion_informe_superv
		String ultimaFechaPresentacionInformeSuperv = (String) datosReporte
				.get("ultima_fecha_presentacion_informe_superv");
		JSONObject ultima_fecha_presentacion_informe_superv = new JSONObject();
		ultima_fecha_presentacion_informe_superv.put("mergeField", "ultima_fecha_presentacion_informe_superv");
		ultima_fecha_presentacion_informe_superv.put("value", ultimaFechaPresentacionInformeSuperv.toString());
		list2.put(ultima_fecha_presentacion_informe_superv);

		// observaciones
		String observaciones = "";
		List<String> lstObservaciones = (List<String>) datosReporte.get("fecha_observaciones");
		for (String observacion : lstObservaciones) {
			observaciones += observacion + "\n";
			;
		}
		JSONObject fecha_observaciones = new JSONObject();
		fecha_observaciones.put("mergeField", "fecha_observaciones");
		fecha_observaciones.put("value", observaciones);
		list2.put(fecha_observaciones);

		// Subsanaciones
		String fechaSubsanacion = "";
		List<String> lstInfSup = (List<String>) datosReporte.get("fecha_subsanacion");
		for (String subsanacion : lstInfSup) {
			fechaSubsanacion += subsanacion + "\n";
			;
		}
		JSONObject fecha_subsanacion = new JSONObject();
		fecha_subsanacion.put("mergeField", "fecha_subsanacion");
		fecha_subsanacion.put("value", fechaSubsanacion);
		list2.put(fecha_subsanacion);

		// fecha_conformidad
		String fechaConformidad = (String) datosReporte.get("fecha_conformidad");
		JSONObject fecha_conformidad = new JSONObject();
		fecha_conformidad.put("mergeField", "fecha_conformidad");
		fecha_conformidad.put("value", fechaConformidad);
		list2.put(fecha_conformidad);

		// totalhc
		Integer totalhc = (Integer) datosReporte.get("totalhc");
		JSONObject nu_thc = new JSONObject();
		nu_thc.put("mergeField", "nu_thc");
		nu_thc.put("value", totalhc.toString());
		list2.put(nu_thc);

		// totalhc
		Integer totaliaip = (Integer) datosReporte.get("totaliaip");
		JSONObject nu_tiaip = new JSONObject();
		nu_tiaip.put("mergeField", "nu_tiaip");
		nu_tiaip.put("value", totaliaip.toString());
		list2.put(nu_tiaip);

		// totalhc
		Integer totalpas = (Integer) datosReporte.get("totalpas");
		JSONObject nu_tpas = new JSONObject();
		nu_tpas.put("mergeField", "nu_tpas");
		nu_tpas.put("value", totalpas.toString());
		list2.put(nu_tpas);

		// numeroIAIP
		String numero_IAIP = (String) datosReporte.get("numeroIAIP");
		JSONObject numeroIAIP = new JSONObject();
		numeroIAIP.put("mergeField", "numeroIAIP");
		numeroIAIP.put("value", numero_IAIP);
		list2.put(numeroIAIP);

		// numeroIAIP
		String fecha_IAIP = (String) datosReporte.get("fechaIAIP");
		JSONObject fechaIAIP = new JSONObject();
		fechaIAIP.put("mergeField", "fechaIAIP");
		fechaIAIP.put("value", fecha_IAIP);
		list2.put(fechaIAIP);

		// plazo_meses
		String plazoMeses = (String) datosReporte.get("plazo_meses");
		JSONObject plazo_meses = new JSONObject();
		plazo_meses.put("mergeField", "plazo_meses");
		plazo_meses.put("value", plazoMeses);
		list2.put(plazo_meses);

		// autorizacion
		String r_autorizacion = (String) datosReporte.get("autorizacion");
		JSONObject autorizacion = new JSONObject();
		autorizacion.put("mergeField", "autorizacion");
		autorizacion.put("value", r_autorizacion);
		list2.put(autorizacion);

		documento = PoiWordUtil.replaceJSONArray(documento, list);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list2);

		// List<XWPFParagraph> paragraphs =
		// documento.getBodyElements().get(2).getBody().getTables().get(0).getRow(4).getCell(1).getTableRow().getTableCells().get(1).getParagraphs();
		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();

			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_ubigeo")) {
					paragraph.removeRun(j);

					XWPFTable tableUbicacion = PoiWordUtil.createFullTableInSpecificPosition(paragraph,
							documento/* , TableRowAlign.CENTER, TableWidthType.PCT, "100%" */, XWPFBorderType.NONE,
							XWPFBorderType.NONE, XWPFBorderType.SINGLE, XWPFBorderType.SINGLE, XWPFBorderType.SINGLE,
							XWPFBorderType.SINGLE);

					XWPFTableRow tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, null,
							XWPFVertAlign.CENTER, 250, "FFFFFF", /* TableWidthType.PCT, */3764, 0, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Ubicación                                                                   ", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "REGIÓN", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "PROVINCIA", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "DISTRITO", 8, true);
					int row = 1;
					for (PgimUbigeoDTO ubigeo : listaUbigeos) {
						XWPFTableRow tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, null,
								XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3764, row, 0, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, "", 8, false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */1882, row, 1, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, ubigeo.getDescDepartamento(), 8,
								false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */1882, row, 2, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, ubigeo.getDescProvincia(), 8,
								false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */1882, row, 3, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, ubigeo.getDescDistrito(), 8,
								false);
						row++;
					}
					CTVMerge vmerge = CTVMerge.Factory.newInstance();
					vmerge.setVal(STMerge.RESTART);
					tableUbicacion.getRow(0).getCell(0).getCTTc().getTcPr().setVMerge(vmerge);
					// Secound Row cell will be merged
					CTVMerge vmerge1 = CTVMerge.Factory.newInstance();
					vmerge1.setVal(STMerge.CONTINUE);
					tableUbicacion.getRow(1).getCell(0).getCTTc().getTcPr().setVMerge(vmerge1);
				}
			}
		}

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "HORIZONTAL", -100, 13000); //PLANTILLA_RESUMEN_INST_PRELIMINAR.docx

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	// @Override
	public byte[] generarFichaEvalHecCons(String ruta, PgimSupervisionDTO pgimSupervisionDTO,
			List<PgimHechoConstatadoDTO> listaHechos, List<PgimHechoConstatadoDTO> listaHechosIncumplimientos,
			String tipoHC, Long idTipoExtensionGen, String version, PgimUnidadMineraDTO pgimUnidadMineraDTO) throws Exception {

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);
		SimpleDateFormat sdfg2 = new SimpleDateFormat("dd'/'MM'/'yyyy");
		String feInicioSupervisionReal = sdfg2.format(pgimSupervisionDTO.getFeInicioSupervisionReal());
		String feFinSupervisionReal = sdfg2.format(pgimSupervisionDTO.getFeFinSupervisionReal());

		String apellidosNombresEspecialistaTecnico = "";
		String prefijo_nombre = "";

		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalResponsableXRolOsi(
				pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		if(listaEspecialistasOsi.size() != 1){
			String errorMsj = "Para generar el documento se requiere que en el equipo solo exista un especialista técnico "
			+ "como responsable; actualmente existen "+listaEspecialistasOsi.size()+", por favor seleccione solo un responsable por rol";
			throw new PgimException(TipoResultado.WARNING, errorMsj);
		}

		PgimEqpInstanciaProDTO espOsi = listaEspecialistasOsi.get(0);
		// prefijo de especialista técnico
		if (espOsi.getNoPrefijoPersonaEquipo() != null) {
			prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " ";
		} else {
			prefijo_nombre = "";
		}

		apellidosNombresEspecialistaTecnico = prefijo_nombre + espOsi.getDescNoPersona() + " " + espOsi.getDescApPaterno()
				+ " " + espOsi.getDescApMaterno();
		

		List<PgimHechoConstatadoDTO> listaHechosConstatados = new ArrayList<PgimHechoConstatadoDTO>();
		for (PgimHechoConstatadoDTO hechos : listaHechos) {
			String listaIncumpl = "";
			for (PgimHechoConstatadoDTO incumpl : listaHechosIncumplimientos) {
				if (hechos.getIdHechoConstatado().compareTo(incumpl.getIdHechoConstatado()) == 0) {
					if (listaIncumpl.equals("")) {
						listaIncumpl = incumpl.getDescDeObligacionNormativa() + " : " + incumpl.getDescDeNormaItem();
					} else {
						listaIncumpl = listaIncumpl + "\n" + incumpl.getDescDeObligacionNormativa() + " : "
								+ incumpl.getDescDeNormaItem();
					}

					listaIncumpl = listaIncumpl + "\n\n";
				}
			}
			hechos.setDescIncumplimientoDetectado(listaIncumpl);
			listaHechosConstatados.add(hechos);
		}

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String rucEmpresaSupervisora = "";
		if(pgimSupervisionDTO.getDescDocSupervisora() != null){
			rucEmpresaSupervisora = pgimSupervisionDTO.getDescDocSupervisora() + " - ";
		}
		String strEmpresaSupervisora = "";
		if(pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial() != null){
			strEmpresaSupervisora = pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial();
		}else{ strEmpresaSupervisora = "''"; 	}

		if (strEmpresaSupervisora != null
				&& strEmpresaSupervisora.equals(ConstantesUtil.PARAM_PLANTILLA_CADENA_VACIA)) {
			strEmpresaSupervisora = "Osinergmin";
		}
		String rucAgenteSupervisoro = "";
		if(pgimSupervisionDTO.getDescCoDocumentoIdentidad() != null){
			rucAgenteSupervisoro = pgimSupervisionDTO.getDescCoDocumentoIdentidad() + " - ";
		}
		String razonAgenteSupervisado = "";
		if(pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial() != null){
			razonAgenteSupervisado = pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial().toUpperCase();
		}

		JSONArray list = new JSONArray();
		/*JSONArray listParagraph = new JSONArray();*/

		// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		list.put(fecha_generacion_documento);

		JSONObject version_ficha = new JSONObject();
		version_ficha.put("mergeField", "VERSION");
		version_ficha.put("value", version.toUpperCase());
		list.put(version_ficha);

		if (pgimSupervisionDTO != null) {

			JSONObject cod_fiscalizacion = new JSONObject();
			cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
			cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
			list.put(cod_fiscalizacion);

			JSONObject fecha_fiscalizacion = new JSONObject();
			fecha_fiscalizacion.put("mergeField", "fecha_fiscalizacion");
			fecha_fiscalizacion.put("value",feInicioSupervisionReal+" - "+ feFinSupervisionReal);
			list.put(fecha_fiscalizacion);

			JSONObject nroexpedientesiged = new JSONObject();
			nroexpedientesiged.put("mergeField", "osiexpediente");
			nroexpedientesiged.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged());
			list.put(nroexpedientesiged);

			JSONObject razon_social_agente_supervisado = new JSONObject();
			razon_social_agente_supervisado.put("mergeField", "razon_social_agente_supervisado");
			razon_social_agente_supervisado.put("value", rucAgenteSupervisoro + razonAgenteSupervisado );
			list.put(razon_social_agente_supervisado);

			JSONObject nombre_unidad_minera = new JSONObject();
			nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
			nombre_unidad_minera.put("value", pgimSupervisionDTO.getDescCoUnidadMinera() + " - " + pgimSupervisionDTO.getDescUnidadMineraNoUnidadMinera());
			list.put(nombre_unidad_minera);

			JSONObject tipo_unidad_minera = new JSONObject();
					tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
					tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera());
					list.put(tipo_unidad_minera);

			JSONObject empresa_supervisora = new JSONObject();
			empresa_supervisora.put("mergeField", "empresa_supervisora");
			empresa_supervisora.put("value", rucEmpresaSupervisora + strEmpresaSupervisora);
			list.put(empresa_supervisora);
		}

		JSONObject nombres_apellidos_especialista_tecnico = new JSONObject();
		nombres_apellidos_especialista_tecnico.put("mergeField", "nombre_especialista_tecnico");
		nombres_apellidos_especialista_tecnico.put("value",apellidosNombresEspecialistaTecnico);
		list.put(nombres_apellidos_especialista_tecnico);

		documento = PoiWordUtil.replaceJSONArray(documento, list);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list);///

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_hechos")) {
					paragraph.removeRun(j);

					XWPFTable tableHechos = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,14000);

					XWPFTableRow tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, null, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */2000, 0, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "\nÍTEM", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */3000, 0, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "1\n OBLIGACIÓN FISCALIZADA", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */3500, 0, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "2\n HECHO", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */ 3500, 0, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "3\n ANÁLISIS/PRUEBAS", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */2000, 0, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "4\n PROCEDE IPAS", 8, true);

					int cant = 0;
					if (listaHechosConstatados != null && listaHechosConstatados.size() > 0) {
						
						for (int k = 0; k < listaHechosConstatados.size(); k++) {
							cant++;
							String procedeIPAS = "No";
							if (listaHechosConstatados.get(k).getDescTipoCumplimiento().equals("No cumple")){
								procedeIPAS = "Sí";
							}
							String descripcionHechoConstatado = EscritorHtml.replaceLineBreakToPHtml(listaHechosConstatados.get(k).getDeHechoConstatadoT());

							if (listaHechosConstatados.get(k).getDeComplementoObservacion() != null
									&& !listaHechosConstatados.get(k).getDeComplementoObservacion().equals("")) {

									String deComplementoObservacion = EscritorHtml.replaceLineBreakToPHtml(listaHechosConstatados.get(k).getDeComplementoObservacion());

									descripcionHechoConstatado = String.format("%s %s", descripcionHechoConstatado, deComplementoObservacion);
							}

							XWPFTableRow tableHechosRow = PoiWordUtil.createTableCell(tableHechos, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2000, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, String.valueOf(cant), 8,
									false);
							tableHechosRow = PoiWordUtil.createTableCell(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */3000, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaHechosConstatados.get(k).getDescIncumplimientoDetectado(), 8, false);

							tableHechosRow = PoiWordUtil.createTableCellHtml(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 3500, cant, 2,
									ConstantesUtil.ALINEAR_LEFT,descripcionHechoConstatado, 8, documento, "chunk0"+k+cant);

							tableHechosRow = PoiWordUtil.createTableCellHtml(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 3500, cant, 3,
									ConstantesUtil.ALINEAR_LEFT, EscritorHtml.replaceLineBreakToPHtml(listaHechosConstatados.get(k).getDeSustentoT()), 8, documento, "chunk0"+k+cant+1);

							tableHechosRow = PoiWordUtil.createTableCell(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2000, cant, 4, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									procedeIPAS, 8, false);
							}

					} else {
						cant++;
						XWPFTableRow tableHechosRow = PoiWordUtil.createTableCell(tableHechos, null,
							XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */2000, cant, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "No se evidenciaron incumplimientos", 8, true);
							
						PoiWordUtil.mergeCellHorizontally(tableHechos, cant, 0, 4);
						
					}
					int cantTwo = cant + 1;
				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 0;
		}else{
			alignBottom = -100;
		}

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "HORIZONTAL", alignBottom, 13000); // PLANTILLA_FICHA_HECHOS_VERIFICADOS.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}


	@Override
	public byte[] generarFichaHecCons(String ruta, PgimSupervisionDTO pgimSupervisionDTO,
			List<PgimHechoConstatadoDTO> listaHechos, List<PgimHechoConstatadoDTO> listaHechosIncumplimientos,
			String tipoHC, Long idTipoExtensionGen) throws Exception {

		// validación de que todos los hechos verificados de incumplimiento tengan al menos una obligaciones fiscalizada
	
		Map<String, String> validaObligaciones = this.supervisionService.validarObligacionesSeccionadasPorHC(pgimSupervisionDTO.getIdSupervision(), ConstantesUtil.PARAM_HC_ROL_SUPERVISOR);
		if(validaObligaciones.get("respuesta").equals(ConstantesUtil.FL_IND_SI)){
				String count = validaObligaciones.get("count");
				throw new PgimException(TipoResultado.WARNING, "No se puede generar el documemento, debido a que hay " +count+" hecho(s) verificado(s) sin alguna obligación fiscalizada seleccionada");
		}

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		String prefijo_nombre = "";

		List<PgimSupervisionDTO> listaSupervisores = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaSupervisoresOsi = eqpInstanciaProService.obtenerPersonalXRolOsi(pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_SUPERVISOR);

		for (PgimEqpInstanciaProDTO supeOsi : listaSupervisoresOsi) {

			// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			if (supeOsi != null) {
				if (supeOsi.getDescNoPersona() != null) {
					if (supeOsi.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeOsi.getNoPrefijoPersonaEquipo() + " " + supeOsi.getDescNoPersona();
					} else {
						prefijo_nombre = supeOsi.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeOsi.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeOsi.getDescApPaterno());
			obj.setDescApMaterno(supeOsi.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeOsi.getNoCargoPersonaEquipo()); // STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			obj.setDescEntidad("Osinergmin");
			listaSupervisores.add(obj);
		}

		List<PgimEqpInstanciaProDTO> listaSupervisoresContrato = eqpInstanciaProService.obtenerPersonalXRolContrato(pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_SUPERVISOR);

		for (PgimEqpInstanciaProDTO supeContr : listaSupervisoresContrato) {

			// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			if (supeContr != null) {
				if (supeContr.getDescNoPersona() != null) {
					if (supeContr.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContr.getNoPrefijoPersonaEquipo() + " " + supeContr.getDescNoPersona();
					} else {
						prefijo_nombre = supeContr.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeContr.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContr.getDescApPaterno());
			obj.setDescApMaterno(supeContr.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeContr.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContr.getNoCargoPersonaEquipo()); // STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			obj.setDescEntidad("Supervisora");
			listaSupervisores.add(obj);
		}

		// REVISAR PARA LAS PRUEBAS DE GENERAR EL FORMATO DE HECHOS CONSTATADOS Y
		// AVERIGUAR EL ROL DE ABOGADO COMO PARTE DE LOS FIRMANTES
		List<PgimEqpInstanciaProDTO> listaSupervisoresContratoAbogado = eqpInstanciaProService.obtenerPersonalXRolContrato(pgimSupervisionDTO.getIdInstanciaProceso(), 34L);

		for (PgimEqpInstanciaProDTO supeContrAbogado : listaSupervisoresContratoAbogado) {

			// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			if (supeContrAbogado != null) {
				if (supeContrAbogado.getDescNoPersona() != null) {
					if (supeContrAbogado.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContrAbogado.getNoPrefijoPersonaEquipo() + " " + supeContrAbogado.getDescNoPersona().toUpperCase();
					} else {
						prefijo_nombre = supeContrAbogado.getDescNoPersona().toUpperCase();
					}
				} else {
					prefijo_nombre = supeContrAbogado.getDescNoPersona().toUpperCase();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContrAbogado.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(supeContrAbogado.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(supeContrAbogado.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContrAbogado.getNoCargoPersonaEquipo()); // STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			obj.setDescEntidad("Supervisora");
			listaSupervisores.add(obj);
		}

		List<PgimSupervisionDTO> listaEspecialistas = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalXRolOsi(pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		for (PgimEqpInstanciaProDTO espOsi : listaEspecialistasOsi) {

			// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			if (espOsi != null) {
				if (espOsi.getDescNoPersona() != null) {
					if (espOsi.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " " + espOsi.getDescNoPersona();
					} else {
						prefijo_nombre = espOsi.getDescNoPersona();
					}
				} else {
					prefijo_nombre = espOsi.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(espOsi.getDescApPaterno());
			obj.setDescApMaterno(espOsi.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(espOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(espOsi.getNoCargoPersonaEquipo()); // STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			listaEspecialistas.add(obj);
		}

		List<PgimEqpInstanciaProDTO> listaEspecialistasContrato = eqpInstanciaProService.obtenerPersonalXRolContrato(pgimSupervisionDTO.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		for (PgimEqpInstanciaProDTO espContr : listaEspecialistasContrato) {

			// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
			if (espContr != null) {
				if (espContr.getDescNoPersona() != null) {
					if (espContr.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = espContr.getNoPrefijoPersonaEquipo() + " " + espContr.getDescNoPersona();
					} else {
						prefijo_nombre = espContr.getDescNoPersona();
					}
				} else {
					prefijo_nombre = espContr.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(espContr.getDescApPaterno());
			obj.setDescApMaterno(espContr.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(espContr.getDescCoDocumentoIdentidad());
			listaEspecialistas.add(obj);
		}

		List<PgimHechoConstatadoDTO> listaHechosConstatados = new ArrayList<PgimHechoConstatadoDTO>();
		for (PgimHechoConstatadoDTO hechos : listaHechos) {
			String listaIncumpl = "";
			if(hechos.getIdTipoCumplimiento().equals(ConstantesUtil.PARAM_ID_NO_CUMPLE_TC)){
				for (PgimHechoConstatadoDTO incumpl : listaHechosIncumplimientos) {
					if (hechos.getIdHechoConstatado().compareTo(incumpl.getIdHechoConstatado()) == 0) {
						if (listaIncumpl.equals("")) {
							listaIncumpl = incumpl.getDescDeObligacionNormativa() + " : " + incumpl.getDescDeNormaItem();
						} else {
							listaIncumpl = listaIncumpl + "\n" + incumpl.getDescDeObligacionNormativa() + " : "
									+ incumpl.getDescDeNormaItem();
						}
	
						listaIncumpl = listaIncumpl + "\n\n";
					}
				}
				hechos.setDescIncumplimientoDetectado(listaIncumpl);
				listaHechosConstatados.add(hechos);

			}
		}

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String strEmpresaSupervisora = "";
		if(pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial() != null){
			strEmpresaSupervisora = pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial();
		}else{ strEmpresaSupervisora = "''";}
		
		if (strEmpresaSupervisora != null
				&& strEmpresaSupervisora.equals(ConstantesUtil.PARAM_PLANTILLA_CADENA_VACIA)) {
			strEmpresaSupervisora = "Osinergmin";
		}

		JSONArray list = new JSONArray();
		JSONArray listParagraph = new JSONArray();

		// STORY: PGIM-6167: Gen. de ficha de hechos constatados con fecha generación, cargo y prefijo de firmantes
		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		listParagraph.put(fecha_generacion_documento);

		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());

		if (pgimSupervisionDTO != null) {
			JSONObject cod_fiscalizacion = new JSONObject();
			cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
			cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
			listParagraph.put(cod_fiscalizacion);

			JSONObject nroexpedientesiged = new JSONObject();
			nroexpedientesiged.put("mergeField", "nroexpedientesiged");
			nroexpedientesiged.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged());
			list.put(nroexpedientesiged);

			JSONObject razon_social_agente_supervisado = new JSONObject();
			razon_social_agente_supervisado.put("mergeField", "razon_social_agente_supervisado");
			razon_social_agente_supervisado.put("value", pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial());
			list.put(razon_social_agente_supervisado);

			JSONObject nombre_unidad_minera = new JSONObject();
			nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
			nombre_unidad_minera.put("value", pgimSupervisionDTO.getDescCoUnidadMinera()+" - "+pgimSupervisionDTO.getDescUnidadMineraNoUnidadMinera());
			list.put(nombre_unidad_minera);

			JSONObject tipo_unidad_minera = new JSONObject();
			tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
			tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera() );
			list.put(tipo_unidad_minera);

			JSONObject empresa_supervisora = new JSONObject();
			empresa_supervisora.put("mergeField", "empresa_supervisora");
			empresa_supervisora.put("value", strEmpresaSupervisora);
			list.put(empresa_supervisora);
		}

		for (PgimSupervisionDTO esp : listaEspecialistas) {
			JSONObject nombres_apellidos_especialista_tecnico = new JSONObject();
			nombres_apellidos_especialista_tecnico.put("mergeField", "nombres_apellidos_especialista_tecnico");
			nombres_apellidos_especialista_tecnico.put("value",
					esp.getDescNoPersona() + " " + esp.getDescApPaterno() + " " + esp.getDescApMaterno());
			list.put(nombres_apellidos_especialista_tecnico);
		}

		documento = PoiWordUtil.replaceJSONArray(documento, listParagraph);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_hechos")) {
					paragraph.removeRun(j);

					XWPFTable tableHechos = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,14000);

					XWPFTableRow tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, null, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */754, 0, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Ítem", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */5792, 0, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "1\n Obligación fiscalizada", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */3293, 0, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "2\n Hecho", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "3\n Hallazgo/prueba", 8, true);
					tableHechosRowOne = PoiWordUtil.createTableCell(tableHechos, tableHechosRowOne, XWPFVertAlign.TOP,
							200, "D9D9D9", /* TableWidthType.PCT, */1500, 0, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "4\n Cumplimiento de obligaciones", 8, true);

					int cant = 0;
					if (listaHechosConstatados != null && listaHechosConstatados.size() > 0) {

						for (int k = 0; k < listaHechosConstatados.size(); k++) {
							cant++;
							String descripcionHechoConstatado = EscritorHtml.replaceLineBreakToPHtml(listaHechosConstatados.get(k).getDeHechoConstatadoT());

							if (listaHechosConstatados.get(k).getDeComplementoObservacion() != null
									&& !listaHechosConstatados.get(k).getDeComplementoObservacion().equals("")) {

									String deComplementoObservacion = EscritorHtml.replaceLineBreakToPHtml(listaHechosConstatados.get(k).getDeComplementoObservacion());

									descripcionHechoConstatado = String.format("%s %s", descripcionHechoConstatado, deComplementoObservacion);
							}

							XWPFTableRow tableHechosRow = PoiWordUtil.createTableCell(tableHechos, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */754, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, String.valueOf(cant), 8,
									false);
							tableHechosRow = PoiWordUtil.createTableCell(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2352, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaHechosConstatados.get(k).getDescIncumplimientoDetectado(), 8, false);

							tableHechosRow = PoiWordUtil.createTableCellHtml(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 3293, cant, 2,
									ConstantesUtil.ALINEAR_LEFT,descripcionHechoConstatado, 8, documento, "chunk0"+k+cant);

							tableHechosRow = PoiWordUtil.createTableCellHtml(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 1882, cant, 3,
									ConstantesUtil.ALINEAR_LEFT, EscritorHtml.replaceLineBreakToPHtml(listaHechosConstatados.get(k).getDeSustentoT()), 8, documento, "chunk0"+k+cant+1);

							tableHechosRow = PoiWordUtil.createTableCell(tableHechos, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1129, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaHechosConstatados.get(k).getDescTipoCumplimiento(), 8, false);
						}
					} else {
						cant++;
						XWPFTableRow tableHechosRow = PoiWordUtil.createTableCell(tableHechos, null,
							XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */754, cant, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "No se encontraron hechos verificados vinculados a incumplimientos en la fiscalización", 8, true);

							PoiWordUtil.mergeCellHorizontally(tableHechos, cant, 0, 4);
					}

					int cantTwo = cant + 1;
					PoiWordUtil.createTableCell(tableHechos, null, XWPFVertAlign.CENTER, 200, "FFFFFF",
							/* TableWidthType.PCT, */9410, cantTwo, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0,
							"INSTRUCCIONES: COLUMNA 1 – COLUMNA 4 (Llenadas por el fiscalizador)\n \n"
									+ " - Columna 1: Desarrollar cada obligación fiscalizada en un ítem diferente. Asimismo, deberá citar la norma verificada, es decir, artículo e incido de la ley, reglamento u otra norma objeto de fiscalización.\n"
									+ " - Columna 2: Debe desarrollar los hechos por los que se determina el cumplimiento o incumplimiento de la obligación fiscalizada. Ej. Falta de autorizacion, sostenimiento inapropiado, no cuenta con planos, entre otros.\n"
									+ " - Columna 3: Debe  indicar los hallazgos o pruebas (balance, fotografías, videos, mediciones, actas, requerimiento de información, manifestaciones, etc.), respecto a cada obligación fiscalizada.\n"
									+ "respecto a cada obligación fiscalizada(*). Es requisito indispensable colocar el número de foja del informe por cada hallazgo o prueba. (Fojas Nº …)\n"
									+ " - Columna 4: Señalar que si el agente fiscalizado cumple o no con la obligación fiscalizada. Marcar 'Sí' o 'No'.\n \n"
									+ "IMPORTANTE: Este formato debe ser presentado conjuntamente con el informe de fiscalización en formato editable para la revisión del especialista técnico, responsable de la GSM.",
							8, false);

					PoiWordUtil.mergeCellHorizontally(tableHechos, cantTwo, 0, 4);
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,14000);

					if (tipoHC.equals(ConstantesUtil.PARAM_TIPO_HC_SUP)) {

						XWPFTableRow tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, null,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1800, 0, 0, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Documento de identidad", 8,
								true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1800, 0, 1, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Cargo", 8, true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */4200, 0, 2, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre y apellidos", 8, true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */4500, 0, 3, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Firma", 8, true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1700, 0, 4, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Entidad", 8, true);

						int cant = 0;
						if (listaSupervisores != null && listaSupervisores.size() > 0) {
							List<PgimSupervisionDTO> listaFirmantes = new LinkedList<PgimSupervisionDTO>();

							for (PgimSupervisionDTO supervisores : listaSupervisores) {
								listaFirmantes.add(supervisores);
							}

							for (int k = 0; k < listaFirmantes.size(); k++) {
								cant++;
								XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
										XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
										ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescCoDocumentoIdentidad(), 8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescDeCargo(), 8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */3764, cant, 2, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescNoPersona() + " "
												+ listaFirmantes.get(k).getDescApPaterno() + " "
												+ listaFirmantes.get(k).getDescApMaterno(),
										8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.TOP, 1250, "FFFFFF", /* TableWidthType.PCT, */1412, cant, 3, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "«image:osifirma»", 8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1412, cant, 4, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescEntidad(), 8, false);
							}
						} else {
							for (int k = 0; k < 5; k++) {
								cant++;
								XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */3764, cant, 2, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1412, cant, 3, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1412, cant, 4, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							}
						}

					}

					if (tipoHC.equals(ConstantesUtil.PARAM_TIPO_HC_ESP)) {

						XWPFTableRow tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, null,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 0, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Documento de identidad", 8,
								true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 1, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Cargo", 8, true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */3764, 0, 2, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre y apellidos", 8, true);
						tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
								XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1882, 0, 3, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Firma", 8, true);

						int cant = 0;
						if (listaEspecialistas != null && listaEspecialistas.size() > 0) {
							List<PgimSupervisionDTO> listaFirmantes = new LinkedList<PgimSupervisionDTO>();

							for (PgimSupervisionDTO especialista : listaEspecialistas) {
								listaFirmantes.add(especialista);
							}

							for (int k = 0; k < listaFirmantes.size(); k++) {
								cant++;
								XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1882, cant, 0, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescCoDocumentoIdentidad(), 8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1882, cant, 1, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescDeCargo(), 8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */3764, cant, 2, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
										listaFirmantes.get(k).getDescNoPersona() + " "
												+ listaFirmantes.get(k).getDescApPaterno() + " "
												+ listaFirmantes.get(k).getDescApMaterno(),
										8, false);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1882, cant, 3, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							}
						} else {
							for (int k = 0; k < 5; k++) {
								cant++;
								XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1882, cant, 0, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1882, cant, 1, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */3764, cant, 2, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
								tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
										XWPFVertAlign.CENTER, 400, "FFFFFF", /* TableWidthType.PCT, */1882, cant, 3, 0,
										ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							}
						}

					}

				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 0;
		}else{
			alignBottom = -100;
		}

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "HORIZONTAL", alignBottom, 13000); // PLANTILLA_FICHA_HECHOS_VERIFICADOS.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	private byte[] generarDJI(String descNoCompletoPersona, String noPrefijoPersonaEquipo, String noCargoPersonaEquipo, String coDocumentoIdentidad,
			PgimUnidadMineraDTO pgimUnidadMineraDTO, Long idTipoExtensionGen, String coSupervision, String nuExpediente)
			throws IOException, JSONException, XmlException {

		JSONArray list = new JSONArray();

		String prefijo_nombre = "";

		String cargo = "";

		File plantilla = new File(propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_DJI);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument document = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		// Creación de la línea #1

		// STORY: PGIM-6146: FISC. Gen. DJI con fecha generación, cargo y prefijo de firmantes
		JSONObject fechaDeGeneracionDocumento = new JSONObject();
		fechaDeGeneracionDocumento.put("mergeField", "fecha_generacion_documento");
		fechaDeGeneracionDocumento.put("value", fechaDeGeneracion);
		list.put(fechaDeGeneracionDocumento);

		// Creación de la línea adicional para el código de fiscalización
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0, 1,
				"Fiscalización " + coSupervision,
				10, false, false, 0, false, 0);

		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0, 1,
				"Expediente N° " + nuExpediente,
				10, false, false, 0, true, 3);

		// Creación de la línea #2
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 0, 0, 1.5,
				"Por la presente, yo, " + descNoCompletoPersona + ", identificado(a) con DNI "
						+ "/Pasaporte N°/ Carné de Extranjería: " + coDocumentoIdentidad
						// + ", profesional de la nómina de la " + "Empresa Supervisora declaro bajo
						// juramento: " + "",
						+ ", profesional de la nómina de la " + "Empresa Supervisora declaro bajo juramento:",
				8, false, false, 0, false, 0);

		// Creación de la línea #3
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 500, 0, 1.5,
				"a) Que, he tomado conocimiento de los impedimentos, incompatibilidades y prohibiciones establecidos en el artículo 6° de la Directiva para la Selección y Contratación de Empresas Supervisoras aprobado por Resolución del Consejo Directivo de Osinergmin N° 198-2020-OS-CD.",
				8, false, false, 0, false, 0);

		// Creación de la línea #4
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 200, 0, 1.5,
				"b) Que, para fines de la fiscalización a realizar al Agente fiscalizado* que se señala líneas abajo, "
						+ "declaro no encontrarme incurso en las causales de impedimentos, incompatibilidades y "
						+ "prohibiciones antes señaladas (detallado en el numeral 6.5 del artículo 6° de la mencionada "
						+ "Directiva).",
				8, false, false, 0, false, 0);

		// Creación de la línea #5
		PoiWordUtil.createParagraph(document, 300, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 500, 0, 1,
				"Agente fiscalizado: " + pgimUnidadMineraDTO.getDescNoRazonSocial(), 8, false, false, 0, false, 0);

		// Creación de la línea #6
		PoiWordUtil.createParagraph(document, 300, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 200, 0, 1,
				"Unidad fiscalizada: " + pgimUnidadMineraDTO.getCoUnidadMinera() + " - "+ pgimUnidadMineraDTO.getNoUnidadMinera(), 8, false, false, 0, false, 0);

		// Creación de la línea #7
		PoiWordUtil.createParagraph(document, 300, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 200, 0, 1,
				"Tipo: " + pgimUnidadMineraDTO.getDescIdTipoUnidadMinera(), 8, false, false, 0, false, 0);

		// Creación de la línea #8
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 1200, 0, 1, "«image:osifirma»", 8,
				false, false, 0, false, 0);

		// STORY: PGIM-6146: FISC. Gen. DJI con fecha generación, cargo y prefijo de firmantes
		// Permite mostrar la data prefijo y nombre completo de la persona mediante condicionales
		if (noPrefijoPersonaEquipo != null) {
			prefijo_nombre = noPrefijoPersonaEquipo + " " + descNoCompletoPersona;
		} else {
			prefijo_nombre = descNoCompletoPersona;
		}

		// Creación de la línea #9 // STORY: PGIM-6146: FISC. Gen. DJI con fecha generación, cargo y prefijo de firmantes
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 1600, 0, 1,
					"Nombre: " + prefijo_nombre, 8, false, false, 0, false, 0);

		if (noCargoPersonaEquipo != null) {
			cargo = noCargoPersonaEquipo;
		} else {
			cargo = "";
		}

		// Creación de la línea #10 // STORY: PGIM-6146: FISC. Gen. DJI con fecha generación, cargo y prefijo de firmantes
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, 1,
					"Cargo: " + cargo, 8, false, false, 0, false, 0);


		// Creación de la línea #11
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, 1,
				"DNI /Pasaporte/Carné de Extranjería N°: " + coDocumentoIdentidad, 8, false, false, 0, false, 0);

		// Creación de la línea #12
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 1200, 0, 1,
				"* Agente fiscalizado: Persona natural o jurídica de derecho público o privado que realiza actividades del "
						+ "sector energético o minero.",
				8, true, false, 0, false, 0);


		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		this.getFooterAlignBottomDocs(document, fechaDeGeneracion, "VERTICAL", -100, 8000); // PLANTILLA_DJI.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		document = PoiWordUtil.replaceJSONArray(document, list);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		document.write(baos);
		// document.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarDocumentoCredencial(List<PgimEqpInstanciaProDTO> lstPgimEqpInstanciaProDTO,
			PgimUnidadMineraDTO pgimUnidadMineraDTO, PgimSupervisionDTO pgimSupervisionDTO,
			PgimInstanciaProces pgimInstanciaProces, String strSupervisor,
			List<PgimDemarcacionUmineraDTOResultado> demarcaciones, Long idTipoExtensionGen) throws Exception {

		PgimSupervisionDTO obtener = this.supervisionService.obtenerSupervisionPorId(pgimSupervisionDTO.getIdSupervision());

		// Obtener los datos de la persona asignada a la supervisión
		List<PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTO = instanciaProcesService.obtenerParticipantesInstanciaProXRol(obtener.getIdInstanciaProceso(),
																														   ConstantesUtil.PROCESO_ROL_GERENTE_DIVISION);

		if (lPgimEqpInstanciaProDTO.size() == 0) {
			throw new PgimException(TipoResultado.WARNING,
					"Para generar el documento se requiere que haya definido a la persona que funge de gerente de división, por favor regístrelo como miembro del equipo y vuelva a intentar");
		} else if (lPgimEqpInstanciaProDTO.size() > 1) {
			String mensajeAviso = String.format(
					"Para generar el documento se requiere que en el equipo solo exista una persona fungiendo el rol de gerente de división; actualmente existen %d, por favor elimine del equipo a las personas que actualmente no fungen el referido rol",
					lPgimEqpInstanciaProDTO.size());
			throw new PgimException(TipoResultado.WARNING, mensajeAviso);
		}

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTO = lPgimEqpInstanciaProDTO.get(0);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		File plantilla = new File(propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_CREDENCIAL);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument document = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		// Creación de la línea #1
		/* PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 1,
				"CREDENCIAL", 10, true, false, 0, false, 0); */

		// Creación de la línea adicional para el código de fiscalización
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0, 1,
				"Fiscalización: " + pgimSupervisionDTO.getCoSupervision(),
				8, false, false, 0, false, 0);

		// Creación de la línea #3
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 200, 1,
				"Expediente: " + pgimInstanciaProces.getNuExpedienteSiged(), 8, false, false, 0, false, 0);

		// Creación de la línea #4
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 200, 1,
				"La Gerencia de Supervisión Minera del Organismo Supervisor de la Inversión en Energía y Minería - "
						+ "Osinergmin, ha designado a:",
				8, false, false, 0, false, 0);

		// Creación de la tabla supervisores
		XWPFTable tableSupervisor = PoiWordUtil
				.createTable(document/* , TableRowAlign.CENTER, TableWidthType.PCT, "100%" */);

		// Creacion de la fila #1 de la tabla supervisores
		XWPFTableRow tableSupervisorRowOne = PoiWordUtil.createTableCell(tableSupervisor, null, XWPFVertAlign.CENTER,
				250, "D9D9D9", /* TableWidthType.PCT, */5646, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT,
				60, 0, "FISCALIZADORES: NOMBRES Y APELLIDOS", 8, true);
		tableSupervisorRowOne = PoiWordUtil.createTableCell(tableSupervisor, tableSupervisorRowOne,
				XWPFVertAlign.CENTER, 250, "D9D9D9", /* TableWidthType.PCT, */3764, 0, 1, 0, ParagraphAlignment.CENTER,
				LineSpacingRule.EXACT, 60, 0, "DNI", 8, true);

		int rowNumber = 1;

		for (PgimEqpInstanciaProDTO pgimEqp : lstPgimEqpInstanciaProDTO) {

			String prefijo = null;

			// STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y firma digital
			if(pgimEqp.getNoPrefijoPersonaEquipo() != null){
				prefijo = pgimEqp.getNoPrefijoPersonaEquipo() + " ";
			}else{
				prefijo = "";
			}

			// Creación de la fila #n de la tabla supervisores
			XWPFTableRow tableSupervisorRowTwo = PoiWordUtil.createTableCell(tableSupervisor, null,
					XWPFVertAlign.CENTER, 250, "FFFFFF", /* TableWidthType.PCT, */5646, rowNumber, 0, 0,
					ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 60, 0, prefijo + pgimEqp.getDescNoCompletoPersona(), 8,
					false);
			tableSupervisorRowTwo = PoiWordUtil.createTableCell(tableSupervisor, tableSupervisorRowTwo,
					XWPFVertAlign.CENTER, 250, "FFFFFF", /* TableWidthType.PCT, */3764, rowNumber, 1, 0,
					ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60, 0, pgimEqp.getDescCoDocumentoIdentidad(), 8,
					false);
			rowNumber += 1;
		}

		// Creación de la fila #3 de la tabla supervisores
		XWPFTableRow tableSupervisorRowThree = PoiWordUtil.createTableCell(tableSupervisor, null, XWPFVertAlign.CENTER,
				250, "D9D9D9", /* TableWidthType.PCT, */9410, rowNumber, 0, 0, ParagraphAlignment.LEFT,
				LineSpacingRule.EXACT, 60, 0, "Empresa supervisora: " + strSupervisor, 8, false);
		tableSupervisorRowThree = PoiWordUtil.createTableCell(tableSupervisor, tableSupervisorRowThree,
				XWPFVertAlign.CENTER, 250, "D9D9D9", /* TableWidthType.PCT, */9410, rowNumber, 1, 0,
				ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 60, 0, "", 8, false);

		CTHMerge hMerge = CTHMerge.Factory.newInstance();
		hMerge.setVal(STMerge.RESTART);
		tableSupervisor.getRow(rowNumber).getCell(0).getCTTc().getTcPr().setHMerge(hMerge);

		CTHMerge hMerge1 = CTHMerge.Factory.newInstance();
		hMerge1.setVal(STMerge.CONTINUE);

		tableSupervisor.getRow(rowNumber).getCell(1).getCTTc().getTcPr().setHMerge(hMerge1);

		// Creación de la línea #10
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 200, 0, 1,
				"Para fiscalizar a:", 8, false, false, 0, false, 0);

		XWPFTable tableAgente = PoiWordUtil
				.createTable(document/* , TableRowAlign.CENTER, TableWidthType.PCT, "100%" */);

		// Creacion de la fila #1 de la tabla agente fiscalizado
		XWPFTableRow tableAgenteRowOne = PoiWordUtil.createTableCell(tableAgente, null, XWPFVertAlign.CENTER, 250,
				"D9D9D9", /* TableWidthType.PCT, */4705, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
				0, "AGENTE FISCALIZADO", 8, true);
		tableAgenteRowOne = PoiWordUtil.createTableCell(tableAgente, tableAgenteRowOne, XWPFVertAlign.CENTER, 250,
				"D9D9D9", /* TableWidthType.PCT, */4705, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
				0, "UNIDAD FISCALIZADA", 8, true);
		tableAgenteRowOne = PoiWordUtil.createTableCell(tableAgente, tableAgenteRowOne, XWPFVertAlign.CENTER, 250,
				"D9D9D9", /* TableWidthType.PCT, */4705, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
				0, "TIPO", 8, true);

		// Creación de la fila #2 de la tabla agente fiscalizado
		XWPFTableRow tableAgenteRowTwo = PoiWordUtil.createTableCell(tableAgente, null, XWPFVertAlign.CENTER, 250,
				"FFFFFF", /* TableWidthType.PCT, */4705, 1, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 60, 0,
				pgimUnidadMineraDTO.getDescNoRazonSocial(), 8, false);
		tableAgenteRowTwo = PoiWordUtil.createTableCell(tableAgente, tableAgenteRowTwo, XWPFVertAlign.CENTER, 250,
				"FFFFFF", /* TableWidthType.PCT, */4705, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
				0, pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+pgimUnidadMineraDTO.getNoUnidadMinera(), 8, false);
		tableAgenteRowTwo = PoiWordUtil.createTableCell(tableAgente, tableAgenteRowTwo, XWPFVertAlign.CENTER, 250,
				"FFFFFF", /* TableWidthType.PCT, */4705, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
				0, pgimUnidadMineraDTO.getDescIdTipoUnidadMinera(), 8, false);

		// Creación de la línea #10.1
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 200, 0, 1,
				"Ubicado en:", 8, false, false, 0, false, 0);

		// Creación de la tabla ubicación
		XWPFTable tableUbicacion = PoiWordUtil
				.createTable(document/* , TableRowAlign.CENTER, TableWidthType.PCT, "100%" */);

		// Creacion de la fila #1 de la tabla ubicación
		XWPFTableRow tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, null, XWPFVertAlign.CENTER, 250,
				"D9D9D9", /* TableWidthType.PCT, */3764, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
				0, "REGIÓN", 8, true);
		tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne, XWPFVertAlign.CENTER,
				250, "D9D9D9", /* TableWidthType.PCT, */2823, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT,
				60, 0, "PROVINCIA", 8, true);
		tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne, XWPFVertAlign.CENTER,
				250, "D9D9D9", /* TableWidthType.PCT, */2823, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT,
				60, 0, "DISTRITO", 8, true);

		// Creación de la fila #n de la tabla ubicación
		rowNumber = 1;
		for (PgimDemarcacionUmineraDTOResultado demarcacion : demarcaciones) {
			XWPFTableRow tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, null, XWPFVertAlign.CENTER,
					250, "FFFFFF", /* TableWidthType.PCT, */3764, rowNumber, 0, 0, ParagraphAlignment.CENTER,
					LineSpacingRule.EXACT, 60, 0, demarcacion.getDescDepartamento(), 8, false);
			tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
					XWPFVertAlign.CENTER, 250, "FFFFFF", /* TableWidthType.PCT, */2823, rowNumber, 1, 0,
					ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60, 0, demarcacion.getDescProvincia(), 8, false);
			tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
					XWPFVertAlign.CENTER, 250, "FFFFFF", /* TableWidthType.PCT, */2823, rowNumber, 2, 0,
					ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60, 0, demarcacion.getDescDistrito(), 8, false);
			rowNumber += 1;
		}

		// Creación de la línea #11
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 200, 200, 1, "Objeto:",
				8, false, false, 0, false, 0);

		// Creación de la línea #11.1
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 0, 150, 1,
				"Fiscalizar el cumplimiento de las disposiciones legales y técnicas de seguridad de la infraestructura, las instalaciones "
						+ "y la gestión de la seguridad de sus operaciones.",
				8, false, false, 0, false, 0);

		// Creación de la línea #12
		String strTexto = "";
		if (pgimSupervisionDTO.getDescSubtipoSupervision().equals("fiscalización programada")) {
			strTexto = pgimSupervisionDTO.getDescSubtipoSupervision() + " de "
					+ pgimSupervisionDTO.getDescNoEspecialidad();
		} else {
			strTexto = pgimSupervisionDTO.getDescSubtipoSupervision();
		}
		strTexto += " (por " + pgimSupervisionDTO.getDescDeMensaje() + ").";

		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 0, 150, 1, strTexto, 8,
				false, false, 0, false, 0);

		// Creación de la línea #13
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, 1,
				"Fecha de fiscalización:", 8, false, false, 0, false, 0);

		// Cálculo de fechas
		SimpleDateFormat sdf = new SimpleDateFormat("d 'de' MMMM 'del' yyyy", new Locale("es", "ES"));

		int dias = CommonsUtil.plazoEnDiasEntreDosFechas(pgimSupervisionDTO.getFeInicioSupervision(),
				pgimSupervisionDTO.getFeFinSupervision());

		// Creación de la línea #13.1
		PoiWordUtil
				.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 0, 200, 1,
						"A partir del " + sdf.format(pgimSupervisionDTO.getFeInicioSupervision())
								+ ", con un plazo estimado de " + dias + " día(s) calendario.",
						8, false, false, 0, false, 0);

		// Creación de la línea #13.2
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.BOTH, LineSpacingRule.EXACT, 0, 500, 1,
				"El agente fiscalizado deberá brindar todas las facilidades a los fiscalizadores, para el cumplimiento integral de "
						+ "los objetivos de la presente fiscalización conforme al artículo 13° del Reglamento "
						+ "Fiscalización y Sanción de las Actividades Energéticas y Mineras aprobado por Resolución N° 208-2020-OS/CD.",
				8, false, false, 0, false, 0);

		// Creación de la línea #14 // STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y firma digital
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 1500, 1,
				"«image:osifirma»", 8, false, false, 0, false, 0);

		// STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y cargo
		String prefijo_nombre = null;
		String cargo = null;

		if(pgimEqpInstanciaProDTO != null){
			if (pgimEqpInstanciaProDTO.getDescNoCompletoPersona() != null) {
				if (pgimEqpInstanciaProDTO.getNoPrefijoPersonaEquipo() != null) {
					prefijo_nombre = pgimEqpInstanciaProDTO.getNoPrefijoPersonaEquipo() + " " + pgimEqpInstanciaProDTO.getDescNoCompletoPersona();
				} else {
					prefijo_nombre = pgimEqpInstanciaProDTO.getDescNoCompletoPersona();
				}
			} else {
				prefijo_nombre = "";
			}
		} else {
			prefijo_nombre = "";
		}

		// Creación de la línea #15 // STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y firma digital
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, 1,
		"Nombre: " + prefijo_nombre, 8, false, false, 0, false, 0);

		if (pgimEqpInstanciaProDTO != null) {
			if (pgimEqpInstanciaProDTO.getNoCargoPersonaEquipo() != null) {
				cargo = pgimEqpInstanciaProDTO.getNoCargoPersonaEquipo();
			} else {
				cargo = "";
			}
		} else {
			cargo = "";
		}

		// Creación de la línea #16 // STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y firma digital
		PoiWordUtil.createParagraph(document, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, 1,
				"Cargo: " + cargo, 8, false, false, 0, false, 0);

		JSONArray listOne = new JSONArray();

		// STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y firma digital
		JSONObject fecha_generacion = new JSONObject();
		fecha_generacion.put("mergeField", "fecha_generacion_documento");
		fecha_generacion.put("value", fechaDeGeneracion);
		listOne.put(fecha_generacion);

		document = PoiWordUtil.replaceJSONArray(document, listOne);

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////
		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 200;
		}else{
			alignBottom = 200;
		}

		this.getFooterAlignBottomDocs(document, fechaDeGeneracion, "VERTICAL", alignBottom, 8000); // PLANTILLA_CREDENCIAL.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		document.write(baos);
		// document.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	public byte[] generarTDR(String ruta, PgimSupervisionDTO pgimSupervisionDTO, List<PgimUbigeoDTO> listaUbigeos,
			Long idTipoExtensionGen, Long idSupervision, PgimUnidadMineraDTO pgimUnidadMineraDTO) throws Exception, IOException, JSONException {
		File plantilla = new File(ruta);

		PgimSupervisionDTO obtener = this.supervisionService.obtenerSupervisionPorId(idSupervision);


		// Obtener los datos de la persona asignada a la fiscalización
		List<PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTO = this.instanciaProcesService.obtenerParticipantesInstanciaProXRol(obtener.getIdInstanciaProceso(),
																														   ConstantesUtil.PROCESO_ROL_GERENTE_DIVISION);

		if (lPgimEqpInstanciaProDTO.size() == 0) {
			throw new PgimException(TipoResultado.WARNING,
					"Para generar el documento se requiere que haya definido a la persona que funge de gerente de división, por favor regístrelo como miembro del equipo y vuelva a intentar");
		} else if (lPgimEqpInstanciaProDTO.size() > 1) {
			String mensajeAviso = String.format(
					"Para generar el documento se requiere que en el equipo solo exista una persona fungiendo el rol de gerente de división; actualmente existen %d, por favor elimine del equipo a las personas que actualmente no fungen el referido rol",
					lPgimEqpInstanciaProDTO.size());
			throw new PgimException(TipoResultado.WARNING, mensajeAviso);
		}

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTO = lPgimEqpInstanciaProDTO.get(0);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		JSONArray listOne = new JSONArray();
		JSONArray listThree = new JSONArray();

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		listOne.put(cod_fiscalizacion);

		JSONObject nro_expediente = new JSONObject();
		nro_expediente.put("mergeField", "osiexpediente");
		nro_expediente.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged());
		listOne.put(nro_expediente);

		JSONObject tipo_supervision = new JSONObject();
		tipo_supervision.put("mergeField", "tipo_supervision");
		tipo_supervision.put("value", pgimSupervisionDTO.getDescTipoSupervision().toUpperCase());
		listOne.put(tipo_supervision);

		JSONObject nombre_especialidad = new JSONObject();
		nombre_especialidad.put("mergeField", "nombre_especialidad");
		nombre_especialidad.put("value", pgimSupervisionDTO.getDescNoEspecialidad().toUpperCase());
		listOne.put(nombre_especialidad);

		JSONObject agente_supervisado = new JSONObject();
		agente_supervisado.put("mergeField", "agente_supervisado");
		agente_supervisado.put("value", pgimSupervisionDTO.getDescAgenteSupervisadoNoRazonSocial());
		listOne.put(agente_supervisado);

		JSONObject nombre_unidad_minera = new JSONObject();
		nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
		nombre_unidad_minera.put("value", pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+pgimSupervisionDTO.getDescUnidadMineraNoUnidadMinera());
		listOne.put(nombre_unidad_minera);

		// PgimUnidadMineraDTO uthis.unidadMineraRepository.obtenerUnidadMineraPorId(pgimSupervisionDTO.getIdUnidadMinera());
		JSONObject tipo_unidad_minera = new JSONObject();
		tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
		tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera() );
		listOne.put(tipo_unidad_minera);

		if (pgimSupervisionDTO.getFlPropia().equals("0")) {
			JSONObject nro_contrato = new JSONObject();
			nro_contrato.put("mergeField", "nro_contrato");
			nro_contrato.put("value", pgimSupervisionDTO.getDescDeNuContrato());
			listOne.put(nro_contrato);
		} else {
			JSONObject nro_contrato = new JSONObject();
			nro_contrato.put("mergeField", "nro_contrato");
			nro_contrato.put("value", "---");
			listOne.put(nro_contrato);
		}

		JSONObject razon_social_supervisora = new JSONObject();
		razon_social_supervisora.put("mergeField", "razon_social_supervisora");
		razon_social_supervisora.put("value", pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial());
		listOne.put(razon_social_supervisora);

		JSONObject objetivo_tdr = new JSONObject();
		objetivo_tdr.put("mergeField", "objetivo_tdr");
		objetivo_tdr.put("value", CommonsUtil.convertStandardJSONString(pgimSupervisionDTO.getDeTdrObjetivoTexto()));
		listThree.put(objetivo_tdr);

		JSONObject alcance_supervision_tdr = new JSONObject();
		alcance_supervision_tdr.put("mergeField", "alcance_supervision_tdr");
		alcance_supervision_tdr.put("value",
				CommonsUtil.convertStandardJSONString(pgimSupervisionDTO.getDeTdrAlcanceTexto()));
		listThree.put(alcance_supervision_tdr);

		JSONObject metodologia_supervision_tdr = new JSONObject();
		metodologia_supervision_tdr.put("mergeField", "metodologia_supervision_tdr");
		metodologia_supervision_tdr.put("value",
				CommonsUtil.convertStandardJSONString(pgimSupervisionDTO.getDeTdrMetodologiaTexto()));
		listThree.put(metodologia_supervision_tdr);

		JSONObject informe_supervision_tdr = new JSONObject();
		informe_supervision_tdr.put("mergeField", "informe_supervision_tdr");
		informe_supervision_tdr.put("value",
				CommonsUtil.convertStandardJSONString(pgimSupervisionDTO.getDeTdrInformeSupervTexto()));
		listThree.put(informe_supervision_tdr);

		JSONObject honorarios_profesionales_y_costos_adm_td = new JSONObject();
		honorarios_profesionales_y_costos_adm_td.put("mergeField", "honorarios_profesionales_y_costos_adm_td");
		honorarios_profesionales_y_costos_adm_td.put("value",
				CommonsUtil.convertStandardJSONString(pgimSupervisionDTO.getDeTdrHonorariosProf()));
		listThree.put(honorarios_profesionales_y_costos_adm_td);

		JSONArray listTwo = new JSONArray();

		JSONObject nro_profesionales = new JSONObject();
		nro_profesionales.put("mergeField", "nro_profesionales");
		nro_profesionales.put("value", pgimSupervisionDTO.getDescLnProfesionales().toString());
		listTwo.put(nro_profesionales);

		JSONObject fecha_inicio_programada = new JSONObject();
		fecha_inicio_programada.put("mergeField", "fecha_inicio_programada");
		fecha_inicio_programada.put("value", pgimSupervisionDTO.getFeInicioSupervisionDesc());
		listTwo.put(fecha_inicio_programada);

		// STORY: PGIM-6161: FISC. Gen. de TDR con fecha generación, prefijo y firma digital
		String prefijo_nombre = "";
		String cargo = "";

		if (pgimEqpInstanciaProDTO != null) {

			// Permite mostrar la data el nombre completo de la persona y/o prefijo mediante condicionales
			if (pgimEqpInstanciaProDTO.getDescNoCompletoPersona() != null) {
				if (pgimEqpInstanciaProDTO.getNoPrefijoPersonaEquipo() != null) {
					prefijo_nombre = pgimEqpInstanciaProDTO.getNoPrefijoPersonaEquipo() + " " + pgimEqpInstanciaProDTO.getDescNoCompletoPersona();
				} else {
					prefijo_nombre = pgimEqpInstanciaProDTO.getDescNoCompletoPersona();
				}
			} else {
				prefijo_nombre = "";
			}

			// STORY: PGIM-6161: FISC. Gen. de TDR con fecha generación, prefijo y firma digital
			JSONObject prefijo_y_nombres = new JSONObject();
			prefijo_y_nombres.put("mergeField", "prefijo_y_nombres");
			prefijo_y_nombres.put("value", prefijo_nombre);
			listTwo.put(prefijo_y_nombres);
		}

		if (pgimEqpInstanciaProDTO != null) {

			// Permite mostrar la data cargo de la persona mediante condicionales
			if (pgimEqpInstanciaProDTO.getNoCargoPersonaEquipo() != null) {
				cargo = pgimEqpInstanciaProDTO.getNoCargoPersonaEquipo();
			} else {
				cargo = "";
			}

			// STORY: PGIM-6161: FISC. Gen. de TDR con fecha generación, prefijo y firma digital
			JSONObject cargo_firmante = new JSONObject();
			cargo_firmante.put("mergeField", "cargo_firmante");
			cargo_firmante.put("value", cargo);
			listTwo.put(cargo_firmante);
		}

		EscritorHtml.replaceToHtmlJSONArray(documento, listThree);


		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", 200, 8000); //PLANTILLA_TDR.docx, PLANTILLA_TDR_FISCALIZACION_PROPIA.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		documento = PoiWordUtil.replaceJSONArray(documento, listOne);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, listTwo);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_replace")) {
					paragraph.removeRun(j);

					XWPFTable tableUbicacion = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 8500);

					XWPFTableRow tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, null,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */4764, 0, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "REGIÓN", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */4764, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "PROVINCIA", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */4764, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "DISTRITO", 8, true);

					int row = 1;
					for (PgimUbigeoDTO ubigeo : listaUbigeos) {
						XWPFTableRow tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, null,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */4764, row, 0, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, ubigeo.getDescDepartamento(), 8,
								false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */4764, row, 1, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, ubigeo.getDescProvincia(), 8,
								false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */4764, row, 2, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, ubigeo.getDescDistrito(), 8,
								false);
						row++;
					}
				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarDJInstrumMedicion(String ruta, PgimSupervisionDTO pgimSupervisionDTO, List<PgimInstrmntoXSupervDTO> lPgimInstrmntoXSupervDTO,
			Long idTipoExtensionGen, PgimEqpInstanciaProDTO pgimEqpInstanciaProDTO) throws IOException, JSONException, XmlException {
		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		// Validaciones
		String prfjoCoordinador = pgimEqpInstanciaProDTO.getNoPrefijoPersonaEquipo() == null ? "" : pgimEqpInstanciaProDTO.getNoPrefijoPersonaEquipo();
		String cargoCoodinador = pgimEqpInstanciaProDTO.getNoCargoPersonaEquipo() == null ?  "" : pgimEqpInstanciaProDTO.getNoCargoPersonaEquipo();

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		// Fecha programada o ejecución
		java.util.Date fechaIncio = new Date();
		java.util.Date fechaFin = new Date();

		SimpleDateFormat sdfg2 = new SimpleDateFormat("dd'/'MM'/'yyyy");
		if(pgimSupervisionDTO.getFeInicioSupervisionReal() == null ){
			fechaIncio = pgimSupervisionDTO.getFeInicioSupervision();
			fechaFin = pgimSupervisionDTO.getFeFinSupervision();
		}else {
			fechaIncio = pgimSupervisionDTO.getFeInicioSupervisionReal();
			fechaFin = pgimSupervisionDTO.getFeFinSupervisionReal();
		}

		JSONArray listOne = new JSONArray();

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		listOne.put(cod_fiscalizacion);

		JSONObject nro_expediente = new JSONObject();
		nro_expediente.put("mergeField", "nro_expediente");
		nro_expediente.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged());
		listOne.put(nro_expediente);

		JSONObject prefijo_y_nombres_coordiandor = new JSONObject();
		prefijo_y_nombres_coordiandor.put("mergeField", "prefijo_y_nombres_coordiandor");
		prefijo_y_nombres_coordiandor.put("value", prfjoCoordinador+" "+ pgimEqpInstanciaProDTO.getDescNoCompletoPersona().toUpperCase());
		listOne.put(prefijo_y_nombres_coordiandor);

		JSONObject nombre_coordinador_supervisora = new JSONObject();
		nombre_coordinador_supervisora.put("mergeField", "nombre_coordinador_supervisora");
		nombre_coordinador_supervisora.put("value", pgimEqpInstanciaProDTO.getDescNoCompletoPersona().toUpperCase());
		listOne.put(nombre_coordinador_supervisora);

		JSONObject tipo_doc_identidad_coordinador = new JSONObject();
		tipo_doc_identidad_coordinador.put("mergeField", "tipo_doc_identidad_coordinador");
		tipo_doc_identidad_coordinador.put("value", (pgimEqpInstanciaProDTO.getDescNoTipoDocIdentidad() != null) ? pgimEqpInstanciaProDTO.getDescNoTipoDocIdentidad().toUpperCase() : pgimEqpInstanciaProDTO.getDescNoTipoDocIdentidadOsi().toUpperCase() );
		listOne.put(tipo_doc_identidad_coordinador);

		JSONObject nro_doc_identidad_coordinador = new JSONObject();
		nro_doc_identidad_coordinador.put("mergeField", "nro_doc_identidad_coordinador");
		nro_doc_identidad_coordinador.put("value", pgimEqpInstanciaProDTO.getDescCoDocumentoIdentidad());
		listOne.put(nro_doc_identidad_coordinador);

		JSONObject cargo_firmante_coordinador = new JSONObject();
		cargo_firmante_coordinador.put("mergeField", "cargo_firmante_coordinador");
		cargo_firmante_coordinador.put("value", cargoCoodinador);
		listOne.put(cargo_firmante_coordinador);

		JSONObject codigo_unidad_minera = new JSONObject();
		codigo_unidad_minera.put("mergeField", "codigo_unidad_minera");
		codigo_unidad_minera.put("value", pgimSupervisionDTO.getDescCoUnidadMinera().toUpperCase());
		listOne.put(codigo_unidad_minera);

		JSONObject nombre_unidad_minera = new JSONObject();
		nombre_unidad_minera.put("mergeField", "nombre_unidad_minera");
		nombre_unidad_minera.put("value", pgimSupervisionDTO.getDescNoUnidadMinera());
		listOne.put(nombre_unidad_minera);

		// tipo_unidad_minera
		JSONObject tipo_unidad_minera = new JSONObject();
		tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
		tipo_unidad_minera.put("value", pgimSupervisionDTO.getDescNoTipoUnidadMinera());
		listOne.put(tipo_unidad_minera);

		JSONObject razon_social_supervisora = new JSONObject();
		razon_social_supervisora.put("mergeField", "razon_social_supervisora");
		razon_social_supervisora.put("value", pgimSupervisionDTO.getDescEmpresaSupervisoraNoRazonSocial());
		listOne.put(razon_social_supervisora);

		JSONObject nro_ruc_supervisora = new JSONObject();
		nro_ruc_supervisora.put("mergeField", "nro_ruc_supervisora");
		nro_ruc_supervisora.put("value", pgimSupervisionDTO.getDescDocSupervisora());
		listOne.put(nro_ruc_supervisora);

		JSONObject cod_agente_supervisado = new JSONObject();
		cod_agente_supervisado.put("mergeField", "ruc_agente_fiscalizado");
		cod_agente_supervisado.put("value", pgimSupervisionDTO.getDescCoDocumentoIdentidad());
		listOne.put(cod_agente_supervisado);

		JSONObject agente_supervisado = new JSONObject();
		agente_supervisado.put("mergeField", "razon_social_agente_fiscalizado");
		agente_supervisado.put("value", pgimSupervisionDTO.getDescNoRazonSocial());
		listOne.put(agente_supervisado);

		JSONObject fecha_inicio_fiscalizacion = new JSONObject();
		fecha_inicio_fiscalizacion.put("mergeField", "fec_inicio");
		fecha_inicio_fiscalizacion.put("value", sdfg2.format(fechaIncio));
		listOne.put(fecha_inicio_fiscalizacion);

		JSONObject fecha_fin_fiscalizacion = new JSONObject();
		fecha_fin_fiscalizacion.put("mergeField", "fec_fin");
		fecha_fin_fiscalizacion.put("value", sdfg2.format(fechaFin));
		listOne.put(fecha_fin_fiscalizacion);


		JSONArray listTwo = new JSONArray();

		JSONObject fechaDeGeneracionDocumento = new JSONObject();
		fechaDeGeneracionDocumento.put("mergeField", "fecha_generacion_documento");
		fechaDeGeneracionDocumento.put("value", fechaDeGeneracion);
		listOne.put(fechaDeGeneracionDocumento);

		documento = PoiWordUtil.replaceJSONArray(documento, listOne);
		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, listTwo);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_instrumentos")) {
					paragraph.removeRun(j);

					XWPFTable tableUbicacion = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 8500);

					XWPFTableRow tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, null,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */3138, 0, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Instrumento de medición", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */3136, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Certificado de calibración (*)", 8, true);
					tableUbicacionRowOne = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowOne,
							XWPFVertAlign.BOTTOM, 250, "D9D9D9", /* TableWidthType.PCT, */3136, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Vigencia de certificado", 8, true);

					int row = 1;
					for (PgimInstrmntoXSupervDTO instrumento : lPgimInstrmntoXSupervDTO) {

						SimpleDateFormat sdfgAux = new SimpleDateFormat("dd'/'MM'/'yyyy");

						String fechaCerti = "";
						String fVenciCerti = "";
						String codigoInstrumento = instrumento.getCoInstrumento() == null ? "" : instrumento.getCoInstrumento();
						String noTipoInstrumento = instrumento.getDescNoTipoInstrumento() == null ? "" : instrumento.getDescNoTipoInstrumento();
						String modeloInstrumento = instrumento.getNoModeloInstrumento()  == null ? "" : instrumento.getNoModeloInstrumento();
						String serieInstrumento = instrumento.getCoSerieInstrumento() == null ? "" : instrumento.getCoSerieInstrumento();
						String marcaInstrumento = instrumento.getNoMarcaInstrumento() == null ? "" : instrumento.getNoMarcaInstrumento();
						String coCalibracion = instrumento.getCoCertificadoCalibracion() == null ? "" : instrumento.getCoCertificadoCalibracion();
						String noLaboratorioCalibracion = instrumento.getNoLaboratorioCalibracion() == null ? "" : instrumento.getNoLaboratorioCalibracion();

						if(instrumento.getFeCalibracion() != null){
							fechaCerti = sdfgAux.format(instrumento.getFeCalibracion());
						}
						if(instrumento.getFeVencimientoCalibracion() != null){
							fVenciCerti = sdfgAux.format(instrumento.getFeVencimientoCalibracion());
						}

						XWPFTableRow tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, null,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */3138, row, 0, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0,
								codigoInstrumento + " - " + noTipoInstrumento + "\n Modelo: " + modeloInstrumento + "\n Serie: " + serieInstrumento + "\n Marca: " + marcaInstrumento,
								8, false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */3136, row, 1, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0,
								"Código del certificado: " + coCalibracion + "\n Laboratorio: " + noLaboratorioCalibracion + "\n Fecha de calibración " + fechaCerti,
								8,false);
						tableUbicacionRowTwo = PoiWordUtil.createTableCell(tableUbicacion, tableUbicacionRowTwo,
								XWPFVertAlign.BOTH, 600, "FFFFFF", /* TableWidthType.PCT, */3136, row, 2, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 130, 0, "Fecha de vencimiento de la calibración: "+ fVenciCerti, 8,
								false);
						row++;
					}
				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", 0, 8000); // PLANTILLA_DJ_INSTRUMENTOS_MEDICION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	public PgimPersona obtenerConsorcioPrincipal(Long idPersona) {

		PgimPersona pgimPersona = this.personaRepository.findById(idPersona).orElse(null);
		PgimPersona	consorcioPrincipal = new PgimPersona();
		String mensajeExcepcion = "";
		String nombrePersona = (pgimPersona.getNoRazonSocial() == null ? String.format("%s %s, ",
					pgimPersona.getApMaterno(), pgimPersona.getApMaterno(), pgimPersona.getNoPersona())
					: pgimPersona.getNoRazonSocial());
				
		if (pgimPersona.getCoDocumentoIdentidad() != null) {
			
			return pgimPersona;
			
		} else {
			
			// Se puede trata de un consorcio que no tiene RUC. Entonces se debe verificar.
			String flConsorcio = (pgimPersona.getFlConsorcio() == null ? "0" : pgimPersona.getFlConsorcio());

			if (!flConsorcio.equals("1")) {
				// No se trata de un consorcio, entonces debe tener RUC.
				mensajeExcepcion = String.format(
						"No se ha podido encontrar el RUC de la persona que funge como empresa supervisora '%s'. Por favor asegúrese que se ha registrado el RUC en el módulo Personas de la PGIM",
						nombrePersona);
				throw new PgimException(TipoResultado.WARNING, mensajeExcepcion);
			}

			// Cuando sí es un consorcio, entonces se debe obtener el intengrante principal
			// del mismo.
			List<PgimPersonaConsorcioDTO> lPgimPersonaConsorcioDTO = this.personaConsorcioRepository
					.obtenerIntegrantePrincipalConsorcio(pgimPersona.getIdPersona());

			if (lPgimPersonaConsorcioDTO.size() == 1) {
				PgimPersonaConsorcioDTO pgimPersonaConsorcioDTO = lPgimPersonaConsorcioDTO.get(0);
				pgimPersona = this.personaRepository.findById(pgimPersonaConsorcioDTO.getIdPersona()).orElse(null);
				consorcioPrincipal = pgimPersona;
			} else if (lPgimPersonaConsorcioDTO.size() == 0) {
				mensajeExcepcion = String.format(
						"No se ha podido encontrar a la persona que funge como integrante principal del consorcio '%s'. Por favor asegúrese que se ha definido un integrante principal en el registro de Personas de la PGIM",
						nombrePersona);
				throw new PgimException(TipoResultado.WARNING, mensajeExcepcion);

			} else if (lPgimPersonaConsorcioDTO.size() > 0) {
				mensajeExcepcion = String.format(
						"Se ha encontrado que existe más de una persona que funge como integrante principal del consorcio '%s'. Por favor asegúrese que se ha definido solo un integrante principal en el registro de Personas de la PGIM",
						nombrePersona);

				throw new PgimException(TipoResultado.WARNING, mensajeExcepcion);
			}
		}		

		return consorcioPrincipal;
	}

	/**
	 * Permite crear un nuevo expediente Siged.
	 *
	 * @param pgimPersona
	 * @param idProceso     Identificador interno del proceso de la PGIM.
	 * @param documentoDTO  Documento que se adjuntará.
	 * @param multipartFile Archivo que se adjuntará.
	 * @param auditoriaDTO
	 * @return
	 */
	private ExpedienteOutRO crearExpedienteSiged(PgimPersona pgimPersona, Long idProceso,
			PgimDocumentoDTO documentoDTO, MultipartFile multipartFile, AuditoriaDTO auditoriaDTO) {

		PgimProceso pgimProceso = this.procesoService.ObtenerProceso(idProceso);

		if (pgimPersona.getCoDocumentoIdentidad() != null) {

			if (pgimPersona.getCoDocumentoIdentidad().equals(ConstantesUtil.PARAM_RUC_OSINERGMIN)) {
				// Se trata del Osinergmin.
				Long idTipoDocumentoIdentidad = this.valorParametroRepository
						.obtenerIdValorParametro(EValorParametro.DOIDE_RUC.toString());
				pgimPersona = this.personaRepository.obtenerPorTipoYNumero(idTipoDocumentoIdentidad,
						ConstantesUtil.PARAM_RUC_OSINERGMIN);
			}

		} else {

			String mensajeExcepcion = "";
			String nombrePersona = (pgimPersona.getNoRazonSocial() == null ? String.format("%s %s, ",
					pgimPersona.getApMaterno(), pgimPersona.getApMaterno(), pgimPersona.getNoPersona())
					: pgimPersona.getNoRazonSocial());

			// Se puede trata de un consorcio que no tiene RUC. Entonces se debe verificar.
			String flConsorcio = (pgimPersona.getFlConsorcio() == null ? "0" : pgimPersona.getFlConsorcio());

			if (!flConsorcio.equals("1")) {
				// No se trata de un consorcio, entonces debe tener RUC.
				mensajeExcepcion = String.format(
						"La persona con nombre '%s' no registra número de RUC, por favor actualizar su información. Identificador interno de la persona %s",
						nombrePersona, pgimPersona.getIdPersona().toString());

				throw new PgimException("error", mensajeExcepcion);
			}

			// Cuando sí es un consorcio, entonces se debe obtener el intengrante principal
			// del mismo.
			List<PgimPersonaConsorcioDTO> lPgimPersonaConsorcioDTO = this.personaConsorcioRepository
					.obtenerIntegrantePrincipalConsorcio(pgimPersona.getIdPersona());

			if (lPgimPersonaConsorcioDTO.size() == 1) {
				PgimPersonaConsorcioDTO pgimPersonaConsorcioDTO = lPgimPersonaConsorcioDTO.get(0);
				pgimPersona = this.personaRepository.findById(pgimPersonaConsorcioDTO.getIdPersona()).orElse(null);

			} else if (lPgimPersonaConsorcioDTO.size() == 0) {
				mensajeExcepcion = String.format(
						"No se ha podido encontrar a la persona que funge como intengrante principal del consorcio '%s'. Por favor asegúrese que se ha definido un integrante principal en el registro de Personas de la PGIM",
						nombrePersona);

				throw new PgimException("error", mensajeExcepcion);

			} else if (lPgimPersonaConsorcioDTO.size() > 0) {
				mensajeExcepcion = String.format(
						"Se ha encontrado que existe más de una persona que funge como intengrante principal del consorcio '%s'. Por favor asegúrese que se ha definido solo un integrante principal en el registro de Personas de la PGIM",
						nombrePersona);

				throw new PgimException("error", mensajeExcepcion);
			}
		}

		ExpedienteNuevo expNuevoSiged = new ExpedienteNuevo(pgimPersona, documentoDTO.getDeAsuntoDocumento(),
				String.valueOf(documentoDTO.getCoTipoDocumentoSiged()), documentoDTO.getNumeroDocumento(),
				documentoDTO.getFlNumeradoPorSiged(), pgimProceso.getCoProcesoSiged().toString(),
				auditoriaDTO.getCoUsuarioSiged());

		ExpedienteOutRO expedienteOutRO = this.expedienteCrearSiged(expNuevoSiged, multipartFile, auditoriaDTO);

		return expedienteOutRO;
	}

	@Transactional(readOnly = false)
	@Override
	public Long incluirDocumento(PgimDocumentoDTO documentoDTO, AuditoriaDTO auditoriaDTO) {

		log.info("Ingresando a registrar Documento");

		Long rpta = 0L;

		PgimDocumento documento = null;

		if (!CommonsUtil.isNullOrZeroLong(documentoDTO.getIdDocumento())) {

			documento = new PgimDocumento();

			documento.setPgimInstanciaProces(new PgimInstanciaProces());
			documento.getPgimInstanciaProces().setIdInstanciaProceso(documentoDTO.getIdInstanciaProceso());

			documento.setPgimSubcategoriaDoc(new PgimSubcategoriaDoc());
			documento.getPgimSubcategoriaDoc().setIdSubcatDocumento(documentoDTO.getIdSubcatDocumento());

			documento.setTipoOrigenDocumento(new PgimValorParametro());
			documento.getTipoOrigenDocumento().setIdValorParametro(documentoDTO.getIdTipoOrigenDocumento());

			documento.setPgimFaseProceso(new PgimFaseProceso());
			documento.getPgimFaseProceso().setIdFaseProceso(documentoDTO.getIdFaseProceso());

			documento.setDeAsuntoDocumento(documentoDTO.getDeAsuntoDocumento());
			documento.setFeOrigenDocumento(documentoDTO.getFeOrigenDocumento());
			documento.setEsRegistro(ConstantesUtil.IND_ACTIVO);
			documento.setFeCreacion(auditoriaDTO.getFecha());
			documento.setUsCreacion(auditoriaDTO.getUsername());
			documento.setIpCreacion(auditoriaDTO.getTerminal());

			documentoRepository.save(documento);
			rpta = documento.getIdDocumento();

		}

		return rpta;
	}

	@Override
	public Map<String, Object> obtenerPermisosExpediente(Long coTablaInstancia, Long idProceso, Long idFase,
			AuditoriaDTO auditoriaDTO) throws Exception {

		Map<String, Object> paramSalida = new HashMap<String, Object>();
		// Obetener lista de documentos
		SigedPermisos sigedPermisos = new SigedPermisos();

		List<PgimInstanciaProcesDTO> listInstancias = null;
		// Obtener instancia del objeto
		if (idFase == 0) {
			listInstancias = this.instanciaProcesRepository.obtenerInstanciasProceso(idProceso, coTablaInstancia);
		} else {
			listInstancias = this.instanciaProcesRepository.obtenerInstanciasProcesoFase(idProceso, idFase,
					coTablaInstancia);
		}

		if (listInstancias.size() > 0) {

			// Obtener Nombre de la tabla en donde se encuentra la instancia de negocio
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO = listInstancias.get(0);

			// this.obtenerInstanciaProceso(idInstanciaProceso);
			String noTablaProceso = pgimInstanciaProcesDTO.getNoTablaInstancia();

			// String nuExpedienteSiged = pgimInstanciaProcesDTO.getNuExpedienteSiged();
			String nuExpedienteSiged = "";

			switch (noTablaProceso) {
				case ConstantesUtil.PARAM_TABLA_TM_EVENTO:
					if (pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre() != null) {
						PgimInstanciaProces pgimInstanciaProcesPadre = this.instanciaProcesRepository
								.findById(pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre()).orElse(null);
						;
						if (pgimInstanciaProcesPadre != null)
							nuExpedienteSiged = pgimInstanciaProcesPadre.getNuExpedienteSiged();

					}
					break;
				case ConstantesUtil.PARAM_TABLA_TM_AUTORIZACION:
					if (pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre() != null) {
						PgimInstanciaProces pgimInstanciaProcesPadre = this.instanciaProcesRepository
								.findById(pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre()).orElse(null);

						if (pgimInstanciaProcesPadre != null)
							nuExpedienteSiged = pgimInstanciaProcesPadre.getNuExpedienteSiged();

					}
					break;
				case ConstantesUtil.PARAM_TABLA_TM_DENUNCIA:
					if (pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre() != null) {
						PgimInstanciaProces pgimInstanciaProcesPadre = this.instanciaProcesRepository
								.findById(pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre()).orElse(null);

						if (pgimInstanciaProcesPadre != null)
							nuExpedienteSiged = pgimInstanciaProcesPadre.getNuExpedienteSiged();

					}
					break;
				default:
					// Parea los procesos misionales:
					nuExpedienteSiged = pgimInstanciaProcesDTO.getNuExpedienteSiged();
					break;
			}

			if (nuExpedienteSiged != null && !nuExpedienteSiged.equals("")) {
				// Validar permisos sobre el expediente
				sigedPermisos = sigedSoapService.accesoExpediente(nuExpedienteSiged, auditoriaDTO);
				sigedPermisos.setDescNuExpedienteSiged(nuExpedienteSiged);
			} else {
				sigedPermisos.setDescNuExpedienteSiged("0");
			}
		} else {
			sigedPermisos.setDescNuExpedienteSiged("0");
			sigedPermisos.setListarDocumentos(true);
			sigedPermisos.setCrearExpediente(true);
		}

		paramSalida.put("sigedPermisos", sigedPermisos);
		return paramSalida;
	}

	@Override
	public Map<String, Object> verDocumentos(Long coTablaInstancia, Long idProceso, Long idFaseProceso,
			Long idSubcatDocumento, Sort sort, AuditoriaDTO auditoriaDTO) throws Exception {

		PgimDocumentoDTO pgimDocumentoDTO = new PgimDocumentoDTO();
		pgimDocumentoDTO.setCoTablaInstancia(coTablaInstancia);
		pgimDocumentoDTO.setIdProceso(idProceso);
		pgimDocumentoDTO.setIdFaseProceso(idFaseProceso);
		pgimDocumentoDTO.setIdSubcatDocumento(idSubcatDocumento);

		Map<String, Object> paramSalida = this.verDocumentos(pgimDocumentoDTO, sort, auditoriaDTO);

		return paramSalida;
	}

	@Override
	public List<PgimInfraccionContraDTO> listarDestinatarios(PgimDocumentoDTO pgimDocumentoDTO) throws Exception {
		List<PgimInfraccionContraDTO> lPgimDestinatarioDocDTO = new ArrayList<PgimInfraccionContraDTO>();
		List<PgimInfraccionContraDTO> lContratistas = new ArrayList<PgimInfraccionContraDTO>();
		List<PgimInfraccionAuxDTO> lPgimInfraccion  = new ArrayList<PgimInfraccionAuxDTO>();
		PgimDestinatarioDocDTO pgimDestinatarioDocDTOSelec = new PgimDestinatarioDocDTO();
		PgimInfraccionContraDTO pgimInfraccionContraDTOActual = null;
		Boolean existe;

		lPgimInfraccion = infraccionAuxRepository.listarInfraccionPorIdSupervision(pgimDocumentoDTO.getDescIdSupervision());

		for (PgimInfraccionAuxDTO infraccionDTO : lPgimInfraccion ){		
			lContratistas = infraccionServiceImpl.listarInfraccionResponsables(infraccionDTO.getIdInfraccionAux());
			for(PgimInfraccionContraDTO pgimInfraccionContraDTO: lContratistas){
				pgimInfraccionContraDTOActual = pgimInfraccionContraDTO;
				existe = false;
				if(lPgimDestinatarioDocDTO.size()>0){
					for(PgimInfraccionContraDTO pgimInfraccionContraDTOExiste:lPgimDestinatarioDocDTO){
						if(pgimInfraccionContraDTOActual.getDescCoDocumentoIdentidad().equals(pgimInfraccionContraDTOExiste.getDescCoDocumentoIdentidad())){
							existe = true;
							break;
						}							
					}
				}
				
				if(existe == false){
					if(pgimInfraccionContraDTOActual.getDescFlAgenteFiscalizado() != null){
						PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTO =  agenteSupervisadoRepository.obtenerAgenteSupervisadoPorRuc(pgimInfraccionContraDTOActual.getDescCoDocumentoIdentidad());
						pgimInfraccionContraDTOActual.setIdPersona(pgimAgenteSupervisadoDTO.getIdPersona());
					}

					pgimDestinatarioDocDTOSelec = this.destinatarioDocRepository.obtenerDestinatarioPorIdDocYper(pgimDocumentoDTO.getIdDocumento(),pgimInfraccionContraDTOActual.getIdPersona());
					if(pgimDestinatarioDocDTOSelec != null){
						pgimInfraccionContraDTOActual.setDescFlDestinatarioActual(ConstantesUtil.FL_IND_SI);
					}else{
						pgimInfraccionContraDTOActual.setDescFlDestinatarioActual(ConstantesUtil.FL_IND_NO);
					}
					lPgimDestinatarioDocDTO.add(pgimInfraccionContraDTOActual); 
				}
			}				
		}		

		return lPgimDestinatarioDocDTO;
	}

	@Transactional(readOnly = false)
	@Override
	public List<PgimDestinatarioDocDTO> definirDestinatarios(PgimDestinatarioDocDTO[] lPgimDestinatarioDocDTO, Long idDocumento, AuditoriaDTO auditoriaDTO)	throws Exception {
		List<PgimDestinatarioDocDTO> lPgimDestinatarioDocDTOExistentes = new ArrayList<PgimDestinatarioDocDTO>();
		List<PgimDestinatarioDocDTO> lPgimDestinatarioDocDTODefinidos = null;
		PgimDestinatarioDoc pgimDestinatarioDoc = new PgimDestinatarioDoc();
		
		lPgimDestinatarioDocDTOExistentes = destinatarioDocRepository.listaDestinatarioPorDoc(idDocumento);
		
		//Elimina lógicamente los destinatarios deseleccionados.
		//--------------------------------------------------------------------------------------------
		for(PgimDestinatarioDocDTO pgimDestinatarioDocDTOExiste: lPgimDestinatarioDocDTOExistentes){
			Boolean existe = false;
			for(PgimDestinatarioDocDTO pgimDestinatarioDocDTO: lPgimDestinatarioDocDTO){
				if(pgimDestinatarioDocDTOExiste.getIdPersona().equals(pgimDestinatarioDocDTO.getIdPersona())){
					existe = true;
					break;
				}
			}
			if(!existe){
				//Eliminación lógica
				pgimDestinatarioDoc = this.getByIdDestinatarioDoc(pgimDestinatarioDocDTOExiste.getIdDestinatarioDoc());

				pgimDestinatarioDoc.setEsRegistro(ConstantesUtil.IND_INACTIVO);
				pgimDestinatarioDoc.setFeActualizacion(auditoriaDTO.getFecha());
				pgimDestinatarioDoc.setUsActualizacion(auditoriaDTO.getUsername());
				pgimDestinatarioDoc.setIpActualizacion(auditoriaDTO.getTerminal());

				destinatarioDocRepository.save(pgimDestinatarioDoc);
			}
		}

		//Registra destinatarios seleccionado de no estar registrado.
		//-------------------------------------------------------------------------------------------	
		for(PgimDestinatarioDocDTO pgimDestinatarioDocDTO: lPgimDestinatarioDocDTO){
			//Busca si seleccionado existe
			PgimDestinatarioDoc pgimDestinatarioDocSelec = null;
			PgimDestinatarioDocDTO pgimDestinatarioDocDTOSelec = null;

			if(lPgimDestinatarioDocDTOExistentes.size() != 0L){
				pgimDestinatarioDocDTOSelec = this.destinatarioDocRepository.obtenerDestinatarioPorIdDocYper(pgimDestinatarioDocDTO.getIdDocumento(),pgimDestinatarioDocDTO.getIdPersona());
			}
			
			if(pgimDestinatarioDocDTOSelec == null){
				//registro de destinatario

				pgimDestinatarioDocSelec = new PgimDestinatarioDoc();
				pgimDestinatarioDocSelec.setPgimDocumento(new PgimDocumento());
				pgimDestinatarioDocSelec.getPgimDocumento().setIdDocumento(idDocumento);

				pgimDestinatarioDocSelec.setPgimPersona(new PgimPersona());
				pgimDestinatarioDocSelec.getPgimPersona().setIdPersona(pgimDestinatarioDocDTO.getIdPersona());

				pgimDestinatarioDocSelec.setEsRegistro(ConstantesUtil.IND_ACTIVO);
				pgimDestinatarioDocSelec.setFeCreacion(auditoriaDTO.getFecha());
				pgimDestinatarioDocSelec.setUsCreacion(auditoriaDTO.getUsername());
				pgimDestinatarioDocSelec.setIpCreacion(auditoriaDTO.getTerminal());

				destinatarioDocRepository.save(pgimDestinatarioDocSelec);

			}
		}

		lPgimDestinatarioDocDTODefinidos = destinatarioDocRepository.listaDestinatarioPorDoc(idDocumento);		

		return lPgimDestinatarioDocDTODefinidos;
	}

	@Override
	public Map<String, Object> verDocumentos(PgimDocumentoDTO pgimDocumentoDTO, Sort sort, AuditoriaDTO auditoriaDTO)
			throws Exception {

		Long idFase = pgimDocumentoDTO.getIdFaseProceso();
		Long idProceso = pgimDocumentoDTO.getIdProceso();
		Long coTablaInstancia = pgimDocumentoDTO.getCoTablaInstancia();
		Long idSubcatDocumento = pgimDocumentoDTO.getIdSubcatDocumento();
		Long idPasoActual = 0L;
		
		if(pgimDocumentoDTO.getDescIdInstanciaPasoActual() != null){
			idPasoActual = this.instanciaPasoRepository.obtenerInstanciaPasoPorId(pgimDocumentoDTO.getDescIdInstanciaPasoActual()).getIdPasoProcesoDestino();
		}

		Map<String, Object> paramSalida = new HashMap<String, Object>();
		Long contadorDocumentos = 0L;

		// Obetener lista de documentos
		List<PgimDocumentoDTO> lPgimDocumentoDTOResultado = new ArrayList<PgimDocumentoDTO>();

		List<PgimInstanciaProcesDTO> listInstancias = null;

		// Obtener instancia del objeto
		if (idFase == 0) {
			listInstancias = this.instanciaProcesRepository.obtenerInstanciasProceso(idProceso, coTablaInstancia);
		} else {
			listInstancias = this.instanciaProcesRepository.obtenerInstanciasProcesoFase(idProceso, idFase, coTablaInstancia);
		}

		if (listInstancias.size() > 0) {

			// Obtener Nombre de la tabla en donde se encuentra la instancia de negocio
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO = listInstancias.get(0);

			String noTablaProceso = pgimInstanciaProcesDTO.getNoTablaInstancia();

			String nuExpedienteSiged = "";

			Long idInstanciaProceso = pgimInstanciaProcesDTO.getIdInstanciaProceso();

			// Obtener documentos de la instancia proceso y de la fase
			List<PgimDocumentoDTO> lPgimDocumentoDTO = null;

			if (idFase == 0) {
				Long idPas = null;
				PgimFiltroItemDocumentoDTO[] lPgimFiltroItemDocumentoDTO = null;

				if (pgimDocumentoDTO.getFiltroDocumento() != null) {
					lPgimFiltroItemDocumentoDTO = pgimDocumentoDTO.getFiltroDocumento().getPgimFiltroItemDocumento();
				}

				if (lPgimFiltroItemDocumentoDTO != null) {

					for (PgimFiltroItemDocumentoDTO pgimFiltroItemDocumentoDTO : lPgimFiltroItemDocumentoDTO) {
						if (pgimFiltroItemDocumentoDTO.getNombreTabla().equals("EXCLUIR_DOCS_YA_COPIADOS")) {
							idPas = pgimFiltroItemDocumentoDTO.getIdTabla();
							
							break;
						}
					}
				}

				if (idPas != null) {
					Long idInstanciaProcesoPas = this.pasRepository.findById(idPas).orElse(null).getPgimInstanciaProces().getIdInstanciaProceso();
					lPgimDocumentoDTO = this.documentoRepository.obtenerDocumentosInstancia(idInstanciaProceso, idInstanciaProcesoPas, sort);
				} else {
					lPgimDocumentoDTO = this.documentoRepository.obtenerDocumentosInstancia(idInstanciaProceso, sort);
				}

				
			} else {
				lPgimDocumentoDTO = this.documentoRepository.obtenerDocumentosInstanciaFase(idInstanciaProceso, idFase,
						sort);
				if (idSubcatDocumento != null) {
					lPgimDocumentoDTO = this.documentoRepository.obtenerDocPorInstanciaYSubCategoria(idInstanciaProceso,
							idSubcatDocumento);
				}
			}

			switch (noTablaProceso) {
				case ConstantesUtil.PARAM_TABLA_TM_EVENTO:
					if (pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre() != null) {
						PgimInstanciaProces pgimInstanciaProcesPadre = this.instanciaProcesRepository
								.findById(pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre()).orElse(null);
						;
						if (pgimInstanciaProcesPadre != null)
							nuExpedienteSiged = pgimInstanciaProcesPadre.getNuExpedienteSiged();

					}
					break;
				case ConstantesUtil.PARAM_TABLA_TM_AUTORIZACION:
					if (pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre() != null) {
						PgimInstanciaProces pgimInstanciaProcesPadre = this.instanciaProcesRepository
								.findById(pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre()).orElse(null);

						if (pgimInstanciaProcesPadre != null)
							nuExpedienteSiged = pgimInstanciaProcesPadre.getNuExpedienteSiged();

					}
					break;
				case ConstantesUtil.PARAM_TABLA_TM_DENUNCIA:
					if (pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre() != null) {
						PgimInstanciaProces pgimInstanciaProcesPadre = this.instanciaProcesRepository
								.findById(pgimInstanciaProcesDTO.getIdInstanciaProcesoPadre()).orElse(null);

						if (pgimInstanciaProcesPadre != null)
							nuExpedienteSiged = pgimInstanciaProcesPadre.getNuExpedienteSiged();

					}
					break;
				default:
					// Para los procesos misionales:
					nuExpedienteSiged = pgimInstanciaProcesDTO.getNuExpedienteSiged();
					break;
			}

			if (nuExpedienteSiged == null) {
				String mensajeError = "No se ha definido un expediente Siged";
				throw new PgimException("error", mensajeError);
			}

			if (nuExpedienteSiged != null && !nuExpedienteSiged.equals("")) {

				Documentos documentosYArchivosSiged = new Documentos();

				// Llamar al servicio Siged para completar datos de los documentos
				documentosYArchivosSiged = this.obtenerExpedienteDocumentoSiged(nuExpedienteSiged, "1", auditoriaDTO);

				if (documentosYArchivosSiged.getListaDocumento() == null
						|| documentosYArchivosSiged.getListaDocumento().size() == 0) {
					lPgimDocumentoDTOResultado = lPgimDocumentoDTO;
				} else {

					PgimDocumentoDTO pgimDocumentoDTOResultado = null;

					// Iterando la lista de documentos PGIM en busca de los documentos Siged.
					for (PgimDocumentoDTO pgimDocumentoDTOItem : lPgimDocumentoDTO) {
						pgimDocumentoDTOResultado = pgimDocumentoDTOItem;

						if (pgimDocumentoDTOItem.getCoDocumentoSiged() == null) {
							continue;
						}

						// Para poder verificar si se puede firmar el archivo, en función a la
						// subcategoría documental y al paso del proceso actual
						List<PgimSubcatDocFirmaDTO> lPgimSubcatDocFirmaDTO = this.subcatDocFirmaRepository
								.listarPgimSubcatDocFirmaBySubcatAndPaso(pgimDocumentoDTOItem.getIdSubcatDocumento(),
										pgimDocumentoDTO.getDescIdInstanciaPasoActual());
						
						// Para verificar si se puede modificar cuando tenga fecha de envío
						PgimPasoSubcatDTO pgimPasoSubcatDTO = this.pasoSubcatRepository
								.obtenerConfigPasoSubcat(pgimDocumentoDTOItem.getIdSubcatDocumento(), idPasoActual);
						if(pgimPasoSubcatDTO != null ){
							pgimDocumentoDTOResultado.setDescFlModificarEnviado(pgimPasoSubcatDTO.getFlModificarEnviado());
							pgimDocumentoDTOResultado.setDescFlDefinirDestinatario(pgimPasoSubcatDTO.getFlDefinirDestinatario());
						} 

						//Lista de destinarios para notificación cuando la fiscalización pertenece a accidente mortal
						List<PgimDestinatarioDocDTO> lPgimDestinatarioDocDTO = this.destinatarioDocRepository.listarDestinatarioDocPorIdDocumento(pgimDocumentoDTOItem.getIdDocumento());
						String nombresDestinatarios = ""; 
						for (PgimDestinatarioDocDTO pgimDestinatarioDocDTO : lPgimDestinatarioDocDTO) {
							nombresDestinatarios += pgimDestinatarioDocDTO.getDescNoRazonSocial() + " | " + pgimDestinatarioDocDTO.getDescCoDocumentoIdentidad() + "; ";
						}
						
						nombresDestinatarios = nombresDestinatarios.trim();
						nombresDestinatarios = (nombresDestinatarios.length() > 0) ? nombresDestinatarios.substring(0, nombresDestinatarios.length() - 1) : "";
						
						// Actualizar valores de los documentos desde Siged
						Long contador = 0L;
						for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {

							if (pgimDocumentoDTOItem.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {

								pgimDocumentoDTOResultado.setNumeroDocumento(docSiged.getNroDocumento());
								pgimDocumentoDTOResultado.setNombreTipoDocumento(docSiged.getNombreTipoDocumento());
								pgimDocumentoDTOResultado.setAsuntoSiged(docSiged.getAsunto());
								pgimDocumentoDTOResultado.setFechaDocumentoSiged(docSiged.getFechaDocumento());
								pgimDocumentoDTOResultado.setFechaCreacionSiged(docSiged.getFechaCreacion());
								pgimDocumentoDTOResultado.setFechaLimiteAtencionSiged(docSiged.getFechaLimiteAtencion());
								pgimDocumentoDTOResultado.setFechaNumeracionSiged(docSiged.getFechaNumeracion());
								pgimDocumentoDTOResultado.setNuExpedienteSiged(nuExpedienteSiged);
								pgimDocumentoDTOResultado.setDescCantidadArchivosDoc(docSiged.getArchivos().size());
								pgimDocumentoDTOResultado.setDescIdInstanciaPasoActual(pgimDocumentoDTO.getDescIdInstanciaPasoActual());
								pgimDocumentoDTOResultado.setDescNombresDestinatarios(nombresDestinatarios);

								// Verificar si se puede firmar el archivo, en función a la subcategoría
								// documental y al paso del proceso actual
								if (lPgimSubcatDocFirmaDTO.size() > 0) {
									pgimDocumentoDTOResultado.setDescFlFirmaPaso("1");
									pgimDocumentoDTOResultado.setDescFlFirmaMultiple(lPgimSubcatDocFirmaDTO.get(0).getFlFirmaMultiple());
									pgimDocumentoDTOResultado.setFlVistoBueno(lPgimSubcatDocFirmaDTO.get(0).getFlVistoBueno());

								} else {
									pgimDocumentoDTOResultado.setDescFlFirmaPaso("0");
								}

								// Ordenar archivos siged por su Id asc								
								List<Archivo> lArchivosSiged = docSiged.getArchivos().stream()
										.sorted(Comparator.comparing(Archivo::getIdArchivo))
										.collect(Collectors.toList());
								
								for (Archivo archivoSiged : lArchivosSiged) {

									if (contador > 0) {
										PgimDocumentoDTO pgimDocumentoDTOTemp = pgimDocumentoDTOResultado;
										pgimDocumentoDTOResultado = new PgimDocumentoDTO();
										BeanUtils.copyProperties(pgimDocumentoDTOTemp, pgimDocumentoDTOResultado);
										pgimDocumentoDTOResultado.setTipoRegistro("A");
									} else {
										pgimDocumentoDTOResultado.setTipoRegistro("D");
									}

									pgimDocumentoDTOResultado.setIdDocumento(pgimDocumentoDTOItem.getIdDocumento());
									pgimDocumentoDTOResultado
											.setIdInstanciaProceso(pgimDocumentoDTOItem.getIdInstanciaProceso());
									pgimDocumentoDTOResultado
											.setCoDocumentoSiged(pgimDocumentoDTOItem.getCoDocumentoSiged());
									pgimDocumentoDTOResultado.setNombreArchivo(archivoSiged.getNombre());
									pgimDocumentoDTOResultado.setRutaAlfresco(archivoSiged.getRutaAlfresco());

									pgimDocumentoDTOResultado.setIdArchivo(Long.parseLong(archivoSiged.getIdArchivo()));

									pgimDocumentoDTOResultado.setIdFaseProceso(pgimDocumentoDTOItem.getIdFaseProceso());

									// Verificar firma digital
									pgimDocumentoDTOResultado.setDescFlFirmado("0");
									pgimDocumentoDTOResultado.setDescFlFirmaUsuario("0");
									pgimDocumentoDTOResultado.setDescFlUltimaFirmaUsuario("0");
									String coUsuarioUltimoFirma = "";
									int contFirmas = 0;

									LocalDateTime fechamax = null;
									if (archivoSiged.getFirmaDigitalSiged() != null) {
										if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
											pgimDocumentoDTOResultado.setDescFlFirmado("1");
										}

										for (FirmaDigitalSiged firmaDigitalSiged : archivoSiged
												.getFirmaDigitalSiged()) {
											if (firmaDigitalSiged.getIdUsuarioFirma()
													.equals(auditoriaDTO.getCoUsuarioSiged())) {
												pgimDocumentoDTOResultado.setDescFlFirmaUsuario("1");
											}

											// Hallar última firma (según la fecha de la firma)
											if (contFirmas == 0) {
												fechamax = firmaDigitalSiged.getFechaFirma();
												coUsuarioUltimoFirma = firmaDigitalSiged.getIdUsuarioFirma();
											} else {
												if (firmaDigitalSiged.getFechaFirma().isAfter(fechamax)) {
													fechamax = firmaDigitalSiged.getFechaFirma();
													coUsuarioUltimoFirma = firmaDigitalSiged.getIdUsuarioFirma();
												}
											}
										}
										// Validar si el usuario actual es el último firmante
										if (coUsuarioUltimoFirma.equals(auditoriaDTO.getCoUsuarioSiged())) {
											pgimDocumentoDTOResultado.setDescFlUltimaFirmaUsuario("1");
										}

									}
									lPgimDocumentoDTOResultado.add(pgimDocumentoDTOResultado);
									contador += 1;
								}
								break;
							}
						}
					}
				}

			} else {
				// Si no hay expediente, se toma solo los datos del PGIM
				lPgimDocumentoDTOResultado = lPgimDocumentoDTO;
			}
		}

		if (pgimDocumentoDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)
				|| pgimDocumentoDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)
				|| pgimDocumentoDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)) {
			lPgimDocumentoDTOResultado = this.filtrarDocumentos(pgimDocumentoDTO, lPgimDocumentoDTOResultado);
		}

		for (PgimDocumentoDTO pgimDocumento : lPgimDocumentoDTOResultado) {
			if (pgimDocumento.getTipoRegistro().equals("D")) {
				contadorDocumentos++;
			}	
		}

		paramSalida.put("lPgimDocumentoDTOResultado", lPgimDocumentoDTOResultado);
		paramSalida.put("cantidadDocumentos", contadorDocumentos);

		return paramSalida;
	}

	@Override
	public PgimInstanciaProces obtenerInstanciaProceso(Long idInstanciaProceso) {
		return this.instanciaProcesRepository.findById(idInstanciaProceso).orElse(null);
	}

	public Documentos obtenerExpedienteDocumentoSiged(String nroExp, String files, AuditoriaDTO auditoriaDTO)
			throws Exception {
		auditoriaDTO.setModuloPgimActual(ConstantesUtil.PARAM_MODULO_GENERICO);
		
		if(nroExp == null) {
			String mensaje = "No se puede obtener los documentos de un expediente Siged no especificado";
			throw new PgimException(TipoResultado.ERROR, mensaje);
		}

		return sigedSoapService.listarDocumentos(nroExp, files, auditoriaDTO, false);
	}

	public ListarTrazabilidadDocumentosResponse listarTrazabilidad(String sIdDocumento, AuditoriaDTO auditoriaDTO)
			throws Exception {
		return sigedSoapService.listarTrazabilidad(sIdDocumento, auditoriaDTO);
	}

	@Override
	public DocumentoOutRO agregarDocumentoSiged_old(DocumentoNuevo docNuevoSiged, MultipartFile multipartFile)
			throws Exception {

		String carpetaTmp = propertiesConfig.getCarpetaTmp();

		DocumentoOutRO documentoOutRO = new DocumentoOutRO();
		String LINE_FEED = "\r\n";
		String boundary;
		OutputStream outputStream;
		PrintWriter writer;

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String agregarDocumentoExpediente = ConstantesUtil.PARAM_SIGED_AGREGAR_DOCUMENTO;
		String urlAgregarDocumentoExpediente = agregarDocumentoExpediente.replace("{versionar}", "0");

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"AGREGAR_DOCUMENTO: " + docNuevoSiged.getNroExpediente()));

		boundary = "===" + System.currentTimeMillis() + "===";
		URL url = new URL(serverUrl + urlAgregarDocumentoExpediente);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
		conn.setUseCaches(false);
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
				"multipart/form-data; charset=UTF-8; boundary=" + boundary);
		conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_USER_AGENT, "CodeJava Agent");
		outputStream = conn.getOutputStream();
		writer = new PrintWriter(new OutputStreamWriter(outputStream, "UTF-8"), true);
		
		// Validamos el nombre del archivo para evitar el error remitido por el Siged cuando se supera la longitud máxima
		multipartFile = this.archivoService.validarLongitudNombreArchivo(multipartFile);
		
		/* Crear xml file */
		String xmlPath = DocumentoNuevo.getConstruirXmlFileNuevo(docNuevoSiged, carpetaTmp);
		// Se agrega la carpta temporal
		File fileDocument = new File(carpetaTmp + multipartFile.getName());
		multipartFile.transferTo(fileDocument);
		File fileXml = new File(xmlPath);

		writer = CommonsUtil.addFileToService(fileDocument.getName(), fileDocument, writer, outputStream, boundary);
		writer = CommonsUtil.addFileToService("objeto", fileXml, writer, outputStream, boundary);

		writer.append(LINE_FEED).flush();
		writer.append("--" + boundary + "--").append(LINE_FEED);
		writer.close();

		if (conn.getResponseCode() != 200) {
			documentoOutRO.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			documentoOutRO.setErrorCode(String.valueOf(conn.getResponseCode()));
			documentoOutRO.setMessage(conn.getResponseMessage());
			log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
					"AGREGAR_DOCUMENTO: " + docNuevoSiged.getNroExpediente()));
			return documentoOutRO;
		}

		// Procesar resultado de ejecución del servicio SIGED
		BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
		StringBuilder xmlString = new StringBuilder("");

		String output;
		while ((output = br.readLine()) != null) {
			output = CommonsUtil.getLimpiarString(output);
			xmlString.append(output);
		}
		Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
		doc.getDocumentElement().normalize();
		String resultCode = CommonsUtil.getResultCode(doc, "documentoOutRO", "resultCode");
		String claseXMLPadre = "pe.gob.osinergmin.pgim.siged.DocumentoOutRO";
		String claseXMLHijo = "";
		String nodoHijo = "";
		String methodsOff = "";

		NodeList nodeList = doc.getElementsByTagName("documentoOutRO");
		for (int i = 0; i < nodeList.getLength(); i++) {
			try {
				if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
					Element element = (Element) nodeList.item(i);
					documentoOutRO = (DocumentoOutRO) CommonsUtil.getXML2Object(nodeList.item(i), claseXMLPadre,
							claseXMLHijo, nodoHijo, methodsOff, element, null);
				}
			} catch (IllegalArgumentException e) {
				documentoOutRO.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				documentoOutRO.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
				documentoOutRO.setMessage("Error al momento de procesar el listado de documentos: "+e.getMessage());
				log.error(e.getMessage(), e);
				e.printStackTrace();
			}
		}

		if (!resultCode.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			// Message: "Error al momento de consumir el servicio SIGED."
			documentoOutRO.setCodigoDocumento("0");
			String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, "Agregar documento",
					documentoOutRO.getErrorCode(), documentoOutRO.getMessage());
			documentoOutRO.setMessage(mensajeErrorSiged);
		}
		conn.disconnect();

		// Borramos archivos temporales
		List<File> lstArchivosTmp = new ArrayList<>();
		lstArchivosTmp.add(fileDocument);
		lstArchivosTmp.add(fileXml);
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Agregar documento");

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"AGREGAR_DOCUMENTO: " + docNuevoSiged.getNroExpediente()));
		return documentoOutRO;
	}

	@Override
	public DocumentoOutRO agregarDocumentoSiged(DocumentoNuevo docNuevoSiged, MultipartFile multipartFile,
			AuditoriaDTO auditoriaDTO) throws Exception {
		String versionar = "0";
		return sigedSoapService.agregarDocumentoExpediente(docNuevoSiged, multipartFile, versionar, auditoriaDTO);
	}

	@Override
	public DocumentoOutRO agregarReemplazoDocumentoSiged_old(DocumentoNuevo docNuevoSiged, MultipartFile multipartFile)
			throws Exception {

		String carpetaTmp = propertiesConfig.getCarpetaTmp();

		DocumentoOutRO documentoOutRO = new DocumentoOutRO();
		String LINE_FEED = "\r\n";
		String boundary;
		OutputStream outputStream;
		PrintWriter writer;

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String agregarDocumentoExpediente = ConstantesUtil.PARAM_SIGED_AGREGAR_DOCUMENTO;
		String urlAgregarDocumentoExpediente = agregarDocumentoExpediente.replace("{versionar}", "1");

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"AGREGAR_REEMPLAZAR_DOCUMENTO: " + docNuevoSiged.getNroExpediente()));

		boundary = "===" + System.currentTimeMillis() + "===";
		URL url = new URL(serverUrl + urlAgregarDocumentoExpediente);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
		conn.setUseCaches(false);
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
				"multipart/form-data; charset=UTF-8; boundary=" + boundary);
		conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_USER_AGENT, "CodeJava Agent");
		outputStream = conn.getOutputStream();
		writer = new PrintWriter(new OutputStreamWriter(outputStream, "UTF-8"), true);
		
		// Validamos el nombre del archivo para evitar el error remitido por el Siged cuando se supera la longitud máxima
		multipartFile = this.archivoService.validarLongitudNombreArchivo(multipartFile);

		/* Crear xml file */
		String xmlPath = DocumentoNuevo.getConstruirXmlFileReemplazo(docNuevoSiged, carpetaTmp);
		// Se agrega la carpta temporal
		File fileDocument = new File(carpetaTmp + multipartFile.getName());
		multipartFile.transferTo(fileDocument);
		File fileXml = new File(xmlPath);

		writer = CommonsUtil.addFileToService(fileDocument.getName(), fileDocument, writer, outputStream, boundary);
		writer = CommonsUtil.addFileToService("objeto", fileXml, writer, outputStream, boundary);

		writer.append(LINE_FEED).flush();
		writer.append("--" + boundary + "--").append(LINE_FEED);
		writer.close();

		if (conn.getResponseCode() != 200) {
			documentoOutRO.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			documentoOutRO.setErrorCode(String.valueOf(conn.getResponseCode()));
			documentoOutRO.setMessage(conn.getResponseMessage());
			log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
					"AGREGAR_REEMPLAZAR_DOCUMENTO: " + docNuevoSiged.getNroExpediente()));
			return documentoOutRO;
		}

		// Procesar resultado de ejecución del servicio SIGED
		BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
		StringBuilder xmlString = new StringBuilder("");

		String output;
		while ((output = br.readLine()) != null) {
			output = CommonsUtil.getLimpiarString(output);
			xmlString.append(output);
		}
		Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
		doc.getDocumentElement().normalize();
		String resultCode = CommonsUtil.getResultCode(doc, "documentoOutRO", "resultCode");
		String claseXMLPadre = "pe.gob.osinergmin.pgim.siged.DocumentoOutRO";
		String claseXMLHijo = "";
		String nodoHijo = "";
		String methodsOff = "";

		NodeList nodeList = doc.getElementsByTagName("documentoOutRO");
		for (int i = 0; i < nodeList.getLength(); i++) {
			try {
				if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
					Element element = (Element) nodeList.item(i);
					documentoOutRO = (DocumentoOutRO) CommonsUtil.getXML2Object(nodeList.item(i), claseXMLPadre,
							claseXMLHijo, nodoHijo, methodsOff, element, null);
				}
			} catch (IllegalArgumentException e) {
				documentoOutRO.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				documentoOutRO.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
				documentoOutRO.setMessage("Error al momento de procesar el listado de documentos: "+e.getMessage());
				log.error(e.getMessage(), e);
				e.printStackTrace();
			}
		}

		if (!resultCode.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			// Message: "Error al momento de consumir el servicio SIGED."
			documentoOutRO.setCodigoDocumento("0");
			String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, "Agregar reemplazar documento",
					documentoOutRO.getErrorCode(), documentoOutRO.getMessage());
			documentoOutRO.setMessage(mensajeErrorSiged);
		}

		conn.disconnect();

		// Borramos archivos temporales
		List<File> lstArchivosTmp = new ArrayList<>();
		lstArchivosTmp.add(fileDocument);
		lstArchivosTmp.add(fileXml);
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Agregar reemplazar Documento");

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"AGREGAR_REEMPLAZAR_DOCUMENTO: " + docNuevoSiged.getNroExpediente()));

		return documentoOutRO;
	}

	@Override
	public DocumentoOutRO agregarReemplazoDocumentoSiged(DocumentoNuevo docNuevoSiged, MultipartFile multipartFile,
			AuditoriaDTO auditoriaDTO) throws Exception {
		String versionar = "1";
		return sigedSoapService.agregarDocumentoExpediente(docNuevoSiged, multipartFile, versionar, auditoriaDTO);
	}

	@Override
	public List<PgimDocumentoDTO> obtenerDocumentosPgim(Long idInstanciaProceso) {
		return this.documentoRepository.obtenerDocumentosSiged(idInstanciaProceso);
	}

	@Override
	public ExpedienteOutRO expedienteCrearSiged(ExpedienteNuevo expNuevoSiged, MultipartFile multipartFile,
			AuditoriaDTO auditoriaDTO) {

		return sigedSoapService.crearExpediente(expNuevoSiged, multipartFile, auditoriaDTO);
	}

	@Transactional(readOnly = false)
	@Override
	public PgimDocumentoDTO crearDocumentoPGIM(PgimDocumentoDTO documentoDTO, AuditoriaDTO auditoriaDTO) {
		PgimDocumento pgimDocumento = new PgimDocumento();

		pgimDocumento.setPgimInstanciaProces(new PgimInstanciaProces());
		pgimDocumento.getPgimInstanciaProces().setIdInstanciaProceso(documentoDTO.getIdInstanciaProceso());

		pgimDocumento.setPgimSubcategoriaDoc(new PgimSubcategoriaDoc());
		pgimDocumento.getPgimSubcategoriaDoc().setIdSubcatDocumento(documentoDTO.getIdSubcatDocumento());

		pgimDocumento.setTipoOrigenDocumento(new PgimValorParametro());
		pgimDocumento.getTipoOrigenDocumento().setIdValorParametro(documentoDTO.getIdTipoOrigenDocumento());

		pgimDocumento.setPgimFaseProceso(new PgimFaseProceso());
		pgimDocumento.getPgimFaseProceso().setIdFaseProceso(documentoDTO.getIdFaseProceso());

		pgimDocumento.setCoDocumentoSiged(documentoDTO.getCoDocumentoSiged());
		pgimDocumento.setSeDocumento(documentoDTO.getSeDocumento());
		pgimDocumento.setDeAsuntoDocumento(documentoDTO.getDeAsuntoDocumento());
		pgimDocumento.setFeOrigenDocumento(documentoDTO.getFeOrigenDocumento());

		pgimDocumento.setEsRegistro(ConstantesUtil.IND_ACTIVO);
		pgimDocumento.setFeCreacion(auditoriaDTO.getFecha());
		pgimDocumento.setUsCreacion(auditoriaDTO.getUsername());
		pgimDocumento.setIpCreacion(auditoriaDTO.getTerminal());

		PgimDocumento pgimDocumentoCreado = documentoRepository.save(pgimDocumento);

		PgimDocumentoDTO pgimDocumentoDTOCreado = this.documentoRepository
				.obtenerDocumentoById(pgimDocumentoCreado.getIdDocumento());

		return pgimDocumentoDTOCreado;
	}

	@Override
	public List<PgimInstanciaProcesDTO> obtenerExpedientes(Long idInstanciaProceso) {

		PgimInstanciaProces pgimInstanciaProces = this.instanciaProcesRepository.findById(idInstanciaProceso)
				.orElse(null);

		List<PgimInstanciaProcesDTO> lPgimInstanciaProcesDTO = new LinkedList<>();
		List<PgimInstanciaProcesDTO> listaExpedientes = new LinkedList<>();

		if (pgimInstanciaProces.getPgimProceso().getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {
			Long idSupervision = pgimInstanciaProces.getCoTablaInstancia();

			List<PgimInstanciaProcesDTO> listaExpPgimContrato = instanciaProcesRepository
					.obtenerExpPgimContrato(idSupervision);

			List<PgimInstanciaProcesDTO> listaExpPgimSupervision = instanciaProcesRepository
					.obtenerExpPgimSupervision(idSupervision);

			List<PgimInstanciaProcesDTO> listaExpPgimPas = instanciaProcesRepository.obtenerExpPgimPas(idSupervision);

			listaExpedientes.addAll(listaExpPgimContrato);
			listaExpedientes.addAll(listaExpPgimSupervision);
			listaExpedientes.addAll(listaExpPgimPas);

		} else if (pgimInstanciaProces.getPgimProceso().getIdProceso()
				.equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)) {

			Long idLiquidacion = pgimInstanciaProces.getCoTablaInstancia();

			PgimLiquidacion pgimLiquidacion = this.liquidacionRepository
					.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);

			List<PgimInstanciaProcesDTO> listaExpPgimContrato = instanciaProcesRepository
					.obtenerExpPgimContratoXIdContrato(pgimLiquidacion.getPgimContrato().getIdContrato());

			List<PgimInstanciaProcesDTO> listaExpPgimLiquidacion = this.instanciaProcesRepository
					.obtenerExpPgimLiquidacion(idLiquidacion);

			listaExpedientes.addAll(listaExpPgimContrato);
			listaExpedientes.addAll(listaExpPgimLiquidacion);
		} else if (pgimInstanciaProces.getPgimProceso().getIdProceso()
				.equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)) {

			Long idPas = pgimInstanciaProces.getCoTablaInstancia();

			List<PgimInstanciaProcesDTO> listaExpPgimPas = this.instanciaProcesRepository
					.obtenerExpPgimPasPorIdPas(idPas);

			listaExpedientes.addAll(listaExpPgimPas);
		}

		for (PgimInstanciaProcesDTO exp : listaExpedientes) {
			PgimInstanciaProcesDTO obj = exp;

			if (obj.getNoTablaInstancia().equals(ConstantesUtil.PARAM_TABLA_TC_SUPERVISION)) {
				obj.setDescNoTablaInstancia("Fiscalización");
			} else if (obj.getNoTablaInstancia().equals(ConstantesUtil.PARAM_TABLA_TC_CONTRATO)) {
				obj.setDescNoTablaInstancia("Contratación");
			} else if (obj.getNoTablaInstancia().equals(ConstantesUtil.PARAM_TABLA_TC_PAS)) {
				obj.setDescNoTablaInstancia("PAS");
			} else if (obj.getNoTablaInstancia().equals(ConstantesUtil.PARAM_TABLA_TC_LIQUIDACION)) {
				obj.setDescNoTablaInstancia("Liquidación");
			}

			lPgimInstanciaProcesDTO.add(obj);
		}

		return lPgimInstanciaProcesDTO;
	}

	@Override
	public DescargaArchivo descargaArchivo_old(String idArchivo) throws IOException {

		DescargaArchivo descargaArchivo = new DescargaArchivo();
		ByteArrayOutputStream aFile = null;

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI, "DESCARGAR_ARCHIVO: idArchivo-" + idArchivo));

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String descargarArchivoExpediente = ConstantesUtil.PARAM_SIGED_DESCARGAR_ARCHIVO;
		String urlDescargarArchivoExpediente = descargarArchivoExpediente.replace("{idarchivo}", idArchivo);
		URL url = new URL(serverUrl + urlDescargarArchivoExpediente);
		HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
		int responseCode = httpConn.getResponseCode();

		// always check HTTP response code first
		if (responseCode == HttpURLConnection.HTTP_OK) {
			String fileName = "";
			String disposition = httpConn.getHeaderField("Content-Disposition");
			String contentType = httpConn.getContentType();
			int contentLength = httpConn.getContentLength();

			if (disposition != null) {
				// extracts file name from header field
				int index = disposition.indexOf("filename=");
				if (index > 0) {
					fileName = disposition.substring(index + 10, disposition.length() - 1);
				}
			} else {
				fileName = idArchivo;
			}

			System.out.println("Content-Type = " + contentType);
			System.out.println("Content-Disposition = " + disposition);
			System.out.println("Content-Length = " + contentLength);
			System.out.println("fileName = " + fileName);

			// opens input stream from the HTTP connection
			InputStream inputStream = httpConn.getInputStream();
			int bytesRead = -1;
			byte[] buffer = new byte[4096];
			aFile = new ByteArrayOutputStream(buffer.length);
			while ((bytesRead = inputStream.read(buffer)) != -1) {
				aFile.write(buffer, 0, bytesRead);
			}

			inputStream.close();
			descargaArchivo.setFile(aFile);
			descargaArchivo.setResultCode(ConstantesUtil.PARAM_RESULTADO_SUCCESS);
			descargaArchivo.setIdArchivo(idArchivo);
			descargaArchivo.setNombre(fileName);

		} else {
			log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
					"DESCARGAR_ARCHIVO: idArchivo-" + idArchivo));
			descargaArchivo.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			descargaArchivo.setErrorCode(String.valueOf(httpConn.getResponseCode()));
			descargaArchivo.setMessage(httpConn.getResponseMessage());
			String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, "Descargar archivo",
					descargaArchivo.getErrorCode(), descargaArchivo.getMessage());
			descargaArchivo.setMessage(mensajeErrorSiged);
			return descargaArchivo;
		}
		httpConn.disconnect();
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN, "DESCARGAR_ARCHIVO: idArchivo-" + idArchivo));

		return descargaArchivo;
	}


	@Override
	public DescargaArchivo descargaArchivo(String idArchivo, AuditoriaDTO auditoriaDTO) throws IOException {
		return sigedSoapService.descargarArchivo(idArchivo, auditoriaDTO);
	}

	@Override
	public Archivos obtenerArhivosSiged(String idDocumento, AuditoriaDTO auditoriaDTO) throws Exception {
		return sigedSoapService.obtenerArhivosSiged(idDocumento, auditoriaDTO); 
	}
	
	@Override
	public Archivos obtenerArhivosConVersionesSiged(String idDocumento, AuditoriaDTO auditoriaDTO) throws Exception {
		Archivos sigedArchivos = new Archivos();
		
		DocumentoConsultaOutRO documentoConsultaOutRO = this.listarArchivosConVersiones_old(idDocumento, auditoriaDTO); 
		
		if(documentoConsultaOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			sigedArchivos.setResultCode(documentoConsultaOutRO.getResultCode());
			sigedArchivos.setListaArchivo(documentoConsultaOutRO.getListaArchivo());
			
		}else {
			sigedArchivos.setResultCode(documentoConsultaOutRO.getResultCode());
			sigedArchivos.setErrorCode(documentoConsultaOutRO.getErrorCode());
			sigedArchivos.setMessage(documentoConsultaOutRO.getMessage());
		}
		
		return sigedArchivos;
	}

	@Transactional(readOnly = false)
	@Override
	public Archivos agregarArchivoSiged_old(Documento documento, String versionar, MultipartFile multipartFile,
			String NuExpedienteSiged, Long idProceso, AuditoriaDTO auditoriaDTO) throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(NuExpedienteSiged);
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Agregar / reemplazar archivo", auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		Archivos objRespuesta = new Archivos();
		String LINE_FEED = "\r\n";
		String boundary;
		OutputStream outputStream;
		PrintWriter writer;

		String carpetaTmp = propertiesConfig.getCarpetaTmp();

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"AGREGAR_ARCHIVO: nroExpediente/idDocumento-" + NuExpedienteSiged + "/" + documento.getIdDocumento()));
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_AGREGAR_ARCHIVO;
		String urlServicio = servicio.replace("{versionar}", versionar);

		boundary = "===" + System.currentTimeMillis() + "===";
		URL url = new URL(serverUrl + urlServicio);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
		conn.setUseCaches(false);
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
				"multipart/form-data; charset=UTF-8; boundary=" + boundary);
		conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_USER_AGENT, "CodeJava Agent");
		outputStream = conn.getOutputStream();
		writer = new PrintWriter(new OutputStreamWriter(outputStream, "UTF-8"), true);
		
		// Validamos el nombre del archivo para evitar el error remitido por el Siged cuando se supera la longitud máxima
		multipartFile = this.archivoService.validarLongitudNombreArchivo(multipartFile);

		/* Crear xml file */
		String xmlPath = Documento.getConstruirXmlFile(documento, carpetaTmp);
		// Se agrega la carpta temporal
		File fileDocument = new File(carpetaTmp + multipartFile.getName());
		multipartFile.transferTo(fileDocument);
		File fileXml = new File(xmlPath);

		// STORY: PGIM-7013: Configuración de número de documento en reemplazo de archivo
		Long idDocumento = null;

		idDocumento = Long.parseLong(documento.getIdDocumento());

		PgimDocumentoDTO pgimDocumentoDTO = documentoRepository.obtenerDocumentoPgimByIdDocumentoSiged(idDocumento);

		PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository.obtenerSubcategoriaDocPorId(pgimDocumentoDTO.getIdSubcatDocumento());

		String numeroDocumento = null;

		if(pgimDocumentoDTO.getFlReservaActiva() != null){
			if (versionar.equals("1") && pgimDocumentoDTO.getFlReservaActiva().equals(ConstantesUtil.IND_ACTIVO)){
				this.cambiarFlReservaActivaDocumento(pgimDocumentoDTO.getIdDocumento(), auditoriaDTO);
			}
		}
		
		// Si es reemplazar archivo y enumerado por Siged, se procede
		if (versionar.equals("1") && pgimSubcategoriaDocDTO.getFlNumeradoPorSiged().equals("1")) {

			if (NuExpedienteSiged == null) {
				String mensajeError = "No se ha definido un expediente Siged";
				throw new PgimException(TipoResultado.ERROR, mensajeError);
			}

			// Verifica si el expediente tiene registro
			if (NuExpedienteSiged != null && !NuExpedienteSiged.equals("")) {

				Documentos documentosYArchivosSiged = new Documentos();

				// Llamar al servicio Siged para completar datos de los documentos
				documentosYArchivosSiged = this.obtenerExpedienteDocumentoSiged(NuExpedienteSiged, "1", auditoriaDTO);

				// Iterando la lista de documentos PGIM en busca de los documentos Siged.
				for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {
					if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {
						numeroDocumento = docSiged.getNroDocumento();
						break;
					}
				}
			}
			
			// Para evitar el error "Zip bomb detected"
			ZipSecureFile.setMinInflateRatio( 0 );

			// Obtener el nombre ruta del archivo
			String pathFile = fileDocument.getPath();

			// Capturamos los ultimos 4(docx) o 3(doc) digitos del documento que termina con la extensión ."docx" o "doc"
			String ultimosDigitosDocx = pathFile.substring(pathFile.length() - 4);
			String ultimosDigitosDoc = pathFile.substring(pathFile.length() - 3);

			if(ultimosDigitosDocx.equals("docx") || ultimosDigitosDoc.equals("doc")){

				XWPFDocument documents = new XWPFDocument(Files.newInputStream(Paths.get(fileDocument.getPath())));

				// «osinumero»
				if (numeroDocumento != null) {
					if (PoiWordUtil.existTextFindNumeroDoc(documents, "osinumero", numeroDocumento)) {
						try (FileOutputStream out = new FileOutputStream(fileDocument.getPath())) {
							documents.write(out);
						}
					}
				}

				// «osiexpediente»
				if(!numeroDocumento.equals(".s/n")){
					if (NuExpedienteSiged != null) {
						if (PoiWordUtil.existTextFindOsiExpediente(documents, "osiexpediente", NuExpedienteSiged)) {
							try (FileOutputStream out = new FileOutputStream(fileDocument.getPath())) {
								documents.write(out);
							}
						}
					}
				}
				
			}

		}

		writer = CommonsUtil.addFileToService(fileDocument.getName(), fileDocument, writer, outputStream, boundary);
		writer = CommonsUtil.addFileToService("objeto", fileXml, writer, outputStream, boundary);

		writer.append(LINE_FEED).flush();
		writer.append("--" + boundary + "--").append(LINE_FEED);
		writer.close();

		if (conn.getResponseCode() != 200) {
			objRespuesta.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objRespuesta.setErrorCode(String.valueOf(conn.getResponseCode()));
			objRespuesta.setMessage(conn.getResponseMessage());
			log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
					"AGREGAR_ARCHIVO: nroExpediente/idDocumento-" + NuExpedienteSiged + "/"
							+ documento.getIdDocumento()));
			return objRespuesta;
		}

		// Procesar resultado de ejecución del servicio SIGED
		BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
		StringBuilder xmlString = new StringBuilder("");

		String output;
		while ((output = br.readLine()) != null) {
			output = CommonsUtil.getLimpiarString(output);
			xmlString.append(output);
		}
		Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
		doc.getDocumentElement().normalize();
		String resultCode = CommonsUtil.getResultCode(doc, "archivos", "resultCode");
		String claseXMLPadre = "pe.gob.osinergmin.pgim.siged.Archivos";
		String claseXMLHijo = "pe.gob.osinergmin.pgim.siged.Archivo";
		String nodoHijo = "archivo";
		String methodsOff = "setListaArchivo";

		NodeList nodeList = doc.getElementsByTagName("archivos");
		for (int i = 0; i < nodeList.getLength(); i++) {
			List<Object> listaHija = new LinkedList<Object>();
			try {
				if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
					Element element = (Element) nodeList.item(i);
					objRespuesta = (Archivos) CommonsUtil.getXML2Object(nodeList.item(i), claseXMLPadre, claseXMLHijo,
							nodoHijo, methodsOff, element, listaHija);
				}
			} catch (IllegalArgumentException e) {
				objRespuesta.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objRespuesta.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
				objRespuesta.setMessage("Error al momento de procesar el listado de documentos: "+e.getMessage());
				log.error(e.getMessage(), e);
				e.printStackTrace();
			}
		}

		if (!resultCode.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			// Mensaje "Error al momento de consumir el servicio SIGED."
			objRespuesta.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objRespuesta.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, "Agregar / reemplazar archivo",
					objRespuesta.getErrorCode(), objRespuesta.getMessage());
			objRespuesta.setMessage(mensajeErrorSiged);
		}
		conn.disconnect();

		// Borramos archivos temporales
		List<File> lstArchivosTmp = new ArrayList<>();
		lstArchivosTmp.add(fileDocument);
		lstArchivosTmp.add(fileXml);
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Agregar / reemplazar archivo");

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"AGREGAR_ARCHIVO: nroExpediente/idDocumento-" + NuExpedienteSiged + "/" + documento.getIdDocumento()));

		return objRespuesta;
	}

	@Transactional(readOnly = false)
	@Override
	public Archivos agregarArchivoSiged(Documento documento, String versionar, MultipartFile multipartFile,
			String NuExpedienteSiged, Long idProceso, AuditoriaDTO auditoriaDTO) throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(NuExpedienteSiged);
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Adjuntar archivo al documento",
				auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException("error", expedienteOutRO.getMessage());
		}

		return sigedSoapService.agregarArchivosDocumento(documento, versionar, multipartFile, NuExpedienteSiged,
				auditoriaDTO);
	}

	@Override
	public DocumentoAnularOutRO anularDocumentoSiged(DocumentoAnularInRO documentoAnularInRO, Long idProceso,
			AuditoriaDTO auditoriaDTO) throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(documentoAnularInRO.getNroExpediente());
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Anular documento",
				auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage());  //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}
		return sigedSoapService.anularDocumentoSIGED(documentoAnularInRO, auditoriaDTO);
	}

	@Override
	public ArchivoAnularOutRO anularArchivoSIGED(ArchivoAnularInRO archivoAnularInRO, Long idProceso,
			AuditoriaDTO auditoriaDTO) throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(archivoAnularInRO.getNroExpediente());
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Anular archivo",
				auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}
		return sigedSoapService.anularArchivoSIGED(archivoAnularInRO, auditoriaDTO);
	}

	@Transactional(readOnly = false)
	@Override
	public void eliminarDocumentoPgim(PgimDocumento pgimDocumentoActual, AuditoriaDTO auditoriaDTO) {

		pgimDocumentoActual.setEsRegistro(ConstantesUtil.IND_INACTIVO);
		pgimDocumentoActual.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocumentoActual.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocumentoActual.setIpActualizacion(auditoriaDTO.getTerminal());

		this.documentoRepository.save(pgimDocumentoActual);
	}

	@Transactional(readOnly = false)
	@Override
	public void registrarFlFirmadoDoc(PgimDocumento pgimDocumento, String fgFirmado, AuditoriaDTO auditoriaDTO) {

		pgimDocumento.setFlFirmadoDigitalmente(fgFirmado);
		pgimDocumento.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocumento.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocumento.setIpActualizacion(auditoriaDTO.getTerminal());

		this.documentoRepository.save(pgimDocumento);
	}
	
	@Override
	public PgimDocumento obtenerDocumentoPgim(Long idDocumento) {
		return documentoRepository.findById(idDocumento).orElse(null);
	}

	@Transactional(readOnly = false)
	@Override
	public PgimDocumentoDTO modificarDocumento(PgimDocumentoDTO pgimDocumentoDTO,
			PgimInstanciaProces pgimInstanciaProces, PgimDocumento pgimDocumento, AuditoriaDTO auditoriaDTO) {

		pgimDocumento.setPgimInstanciaProces(pgimInstanciaProces);

		pgimDocumento.setPgimSubcategoriaDoc(new PgimSubcategoriaDoc());
		pgimDocumento.getPgimSubcategoriaDoc().setIdSubcatDocumento(pgimDocumentoDTO.getIdSubcatDocumento());

		pgimDocumento.setTipoOrigenDocumento(new PgimValorParametro());
		pgimDocumento.getTipoOrigenDocumento().setIdValorParametro(pgimDocumentoDTO.getIdTipoOrigenDocumento());

		pgimDocumento.setPgimFaseProceso(new PgimFaseProceso());
		pgimDocumento.getPgimFaseProceso().setIdFaseProceso(pgimDocumentoDTO.getIdFaseProceso());

		pgimDocumento.setCoDocumentoSiged(pgimDocumentoDTO.getCoDocumentoSiged());
		pgimDocumento.setSeDocumento(pgimDocumentoDTO.getSeDocumento());
		pgimDocumento.setDeAsuntoDocumento(pgimDocumentoDTO.getDeAsuntoDocumento());
		pgimDocumento.setFeOrigenDocumento(pgimDocumentoDTO.getFeOrigenDocumento());

		pgimDocumento.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocumento.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocumento.setIpActualizacion(auditoriaDTO.getTerminal());

		PgimDocumento pgimDocumentoModificado = this.documentoRepository.save(pgimDocumento);

		PgimDocumentoDTO pgimDocumentoDTOModificado = this.documentoRepository
				.obtenerDocumentoById(pgimDocumentoModificado.getIdDocumento());

		return pgimDocumentoDTOModificado;
	}
	
	@Transactional(readOnly = false)
	@Override
	public PgimDocumento modificarDocumentoEntity(PgimDocumento pgimDocumento, AuditoriaDTO auditoriaDTO) {
		
		pgimDocumento.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocumento.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocumento.setIpActualizacion(auditoriaDTO.getTerminal());

		PgimDocumento pgimDocumentoModificado = this.documentoRepository.save(pgimDocumento);
		
		return pgimDocumentoModificado;
	}

	@Override
	@Transactional(readOnly = false)
	public void eliminarDocumento(Long idDocumentoPGIM, AuditoriaDTO auditoriaDTO) {

		PgimDocumento pgimDocumento = this.documentoRepository.findById(idDocumentoPGIM).orElse(null);

		pgimDocumento.setEsRegistro(ConstantesUtil.IND_INACTIVO);

		pgimDocumento.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocumento.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocumento.setIpActualizacion(auditoriaDTO.getTerminal());

		this.documentoRepository.save(pgimDocumento);

		// Se debe eliminar el registro de documentoRelacion cuando este sea una ficha
		// de
		// justificación relacionada con informe de fiscalización
		if (pgimDocumento.getPgimSubcategoriaDoc()
				.getIdSubcatDocumento() == ConstantesUtil.PARAM_SC_FICHA_JUSTIFICACION) {
			PgimDocumentoRelacionDTO pgimDocumentoRelacionDTO = this.documentoRelacionRepository
					.obtenerDocumentoRelacionPorIdDocumento(pgimDocumento.getIdDocumento(),
							this.valorParametroRepository
									.obtenerIdValorParametro(EValorParametro.REDOC_JSTFCCION.toString()));

			PgimDocumentoRelacion pgimDocumentoRelacion = this.documentoRelacionRepository
					.findById(pgimDocumentoRelacionDTO.getIdDocumentoRelacion()).orElse(null);

			pgimDocumentoRelacion.setEsRegistro(ConstantesUtil.IND_INACTIVO);
			pgimDocumentoRelacion.setFeActualizacion(auditoriaDTO.getFecha());
			pgimDocumentoRelacion.setUsActualizacion(auditoriaDTO.getUsername());
			pgimDocumentoRelacion.setIpActualizacion(auditoriaDTO.getTerminal());

			this.documentoRelacionRepository.save(pgimDocumentoRelacion);
		}
		
		// Si se elimina una constancia/cargo de notificación lo desasociamos del documento notificado en la tabla de destinatarios
		PgimDestinatarioDocDTO pgimDestinatarioDocDTODesasociar = this.destinatarioDocRepository.obtenerDestinatarioDocNotificable(idDocumentoPGIM);	
		
		if (pgimDestinatarioDocDTODesasociar != null) {
			PgimDestinatarioDoc pgimDestinatarioDocDesasoc = this.destinatarioDocRepository.findById(pgimDestinatarioDocDTODesasociar.getIdDestinatarioDoc()).orElse(null);
			
			pgimDestinatarioDocDesasoc.setDocumentoConstancia(null);
			pgimDestinatarioDocDesasoc.setFeActualizacion(auditoriaDTO.getFecha());
			pgimDestinatarioDocDesasoc.setUsActualizacion(auditoriaDTO.getUsername());
			pgimDestinatarioDocDesasoc.setIpActualizacion(auditoriaDTO.getTerminal());
			
			this.destinatarioDocRepository.save(pgimDestinatarioDocDesasoc);
		}
		
		// Si se elimina un documento notificable con destinatarios predefinidos, eliminamos estos registros. 
		List<PgimDestinatarioDocDTO> lstPgimDestinatarioDocDTOElim = this.destinatarioDocRepository.listaDestinatarioPorDoc(idDocumentoPGIM);	
		
		for (PgimDestinatarioDocDTO pgimDestinatarioDocDTO : lstPgimDestinatarioDocDTOElim) {
			PgimDestinatarioDoc pgimDestinatarioDocElim = this.destinatarioDocRepository.findById(pgimDestinatarioDocDTO.getIdDestinatarioDoc()).orElse(null);
			
			pgimDestinatarioDocElim.setEsRegistro(ConstantesUtil.IND_INACTIVO);
			pgimDestinatarioDocElim.setFeActualizacion(auditoriaDTO.getFecha());
			pgimDestinatarioDocElim.setUsActualizacion(auditoriaDTO.getUsername());
			pgimDestinatarioDocElim.setIpActualizacion(auditoriaDTO.getTerminal());
			
			this.destinatarioDocRepository.save(pgimDestinatarioDocElim);
		}
	}

	@Transactional(readOnly = false)
	public void cambiarFlReservaActivaDocumento(Long idDocumentoPGIM, AuditoriaDTO auditoriaDTO) {

		PgimDocumento pgimDocumento = this.documentoRepository.findById(idDocumentoPGIM).orElse(null);

		pgimDocumento.setFlReservaActiva(ConstantesUtil.IND_INACTIVO);
		pgimDocumento.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocumento.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocumento.setIpActualizacion(auditoriaDTO.getTerminal());

		this.documentoRepository.save(pgimDocumento);
	}

	@Override
	public PgimDocumentoDTO obtenerDocumentoPgimById(Long idDocumento) {
		return documentoRepository.obtenerDocumentoPgimById(idDocumento);
	}

	@Override
	public List<PgimDocumentoDTO> obtenerDocumentosLiquidacion(Long idSupervision, AuditoriaDTO auditoriaDTO) throws Exception {

		Long subcategoriasDoc[] = {ConstantesUtil.PARAM_SUBCAT_DOC_IS,ConstantesUtil.PARAM_SUBCAT_DOC_CIS,ConstantesUtil.PARAM_SUBCAT_DOC_OIS,ConstantesUtil.PARAM_SC_FICHA_JUSTIFICACION};
		
		List<PgimDocumentoDTO> listaPgimDocumentoDTO = new ArrayList<PgimDocumentoDTO>();

		PgimSupervisionDTO pgimSupervisionDTO = this.supervisionRepository.obtenerSupervisionByIdSupervisionCompleta(idSupervision);
		String nuExpedienteSiged = pgimSupervisionDTO.getDescNuExpedienteSiged();
		// Llamar al servicio Siged para completar datos de los documentos
		Documentos documentosYArchivosSiged = new Documentos();
		documentosYArchivosSiged = this.obtenerExpedienteDocumentoSiged(nuExpedienteSiged, "1", auditoriaDTO);
		
		List<PgimDocumentoDTO> listaDocumentosSuperv = null;
		for(Long subcategoria: subcategoriasDoc){

			listaDocumentosSuperv = this.documentoRepository.obtenerDocumentosDescendentes(pgimSupervisionDTO.getIdInstanciaProceso(),subcategoria);
			for(PgimDocumentoDTO pgimDocumentoDTO : listaDocumentosSuperv){
				pgimDocumentoDTO.setIdSubcatDocumento(subcategoria);
				pgimDocumentoDTO.setDescProcedencia("Fiscalización "+pgimSupervisionDTO.getCoSupervision());
				pgimDocumentoDTO.setDeAsuntoDocumento(pgimDocumentoDTO.getDeAsuntoDocumento() );							
				
				if (pgimDocumentoDTO.getCoDocumentoSiged() == null) {
					continue;
				}
				// Actualizar valores de los documentos desde Siged
				Long contador = 0L;
				for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {

					if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {

						pgimDocumentoDTO.setNumeroDocumento(docSiged.getNroDocumento());
						pgimDocumentoDTO.setNombreTipoDocumento(docSiged.getNombreTipoDocumento());
						pgimDocumentoDTO.setAsuntoSiged(docSiged.getAsunto());
						pgimDocumentoDTO.setFechaDocumentoSiged(docSiged.getFechaDocumento());
						pgimDocumentoDTO.setFechaCreacionSiged(docSiged.getFechaCreacion());
						pgimDocumentoDTO.setFechaLimiteAtencionSiged(docSiged.getFechaLimiteAtencion());
						pgimDocumentoDTO.setFechaNumeracionSiged(docSiged.getFechaNumeracion());
						pgimDocumentoDTO.setNuExpedienteSiged(nuExpedienteSiged);
						pgimDocumentoDTO.setDescCantidadArchivosDoc(docSiged.getArchivos().size());
						pgimDocumentoDTO.setDescIdInstanciaPasoActual(pgimDocumentoDTO.getDescIdInstanciaPasoActual());

						List<Archivo> lArchivosSiged = docSiged.getArchivos();
						for (Archivo archivoSiged : lArchivosSiged) {

							if (contador > 0) {
								PgimDocumentoDTO pgimDocumentoDTOTemp = pgimDocumentoDTO;
								pgimDocumentoDTO = new PgimDocumentoDTO();
								BeanUtils.copyProperties(pgimDocumentoDTOTemp, pgimDocumentoDTO);
								pgimDocumentoDTO.setTipoRegistro("A");
							} else {
								pgimDocumentoDTO.setTipoRegistro("D");
							}

							pgimDocumentoDTO.setNombreArchivo(archivoSiged.getNombre());
							pgimDocumentoDTO.setRutaAlfresco(archivoSiged.getRutaAlfresco());

							pgimDocumentoDTO.setIdArchivo(Long.parseLong(archivoSiged.getIdArchivo()));
							
							listaPgimDocumentoDTO.add(pgimDocumentoDTO);
							contador += 1;
						}
						break;
					}
				}
				break;
			}
		}

		List<PgimDocumentoDTO> lPgimDocumentoDTOFiltrada = new ArrayList<PgimDocumentoDTO>();
		lPgimDocumentoDTOFiltrada = listaPgimDocumentoDTO.stream().filter(pgimDocumentoDTOEle -> {
			return (pgimDocumentoDTOEle.getTipoRegistro().equals("D"));
		}).collect(Collectors.toList());

		return lPgimDocumentoDTOFiltrada;
	}

	private ExpedienteDocOutRO procesarUsuarioSiged(ExpedienteSiged expedienteSiged, AuditoriaDTO auditoriaDTO)
			throws Exception {
		ExpedienteDocOutRO objResultado = new ExpedienteDocOutRO();
		objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_SUCCESS);

		if (expedienteSiged.getIdPropietario() == null) {
			objResultado.setResultCode(ConstantesUtil.PARAM_noConfigurado);
			objResultado.setMessage("Su sesión no cuenta el usuario Siged configurado.");
			return objResultado;
		}

		// seteamos el propietario, si corresponde
		if (expedienteSiged.getIdPropietario() != null && expedienteSiged.getIdPropietario() > 0L) {
			auditoriaDTO.setCoUsuarioSiged(expedienteSiged.getIdPropietario().toString());
		}

		// Validación del propietario del expediente
		Documentos documentosYArchivosSiged = this
				.obtenerExpedienteDocumentoSiged(expedienteSiged.getNumeroExpediente(), "1", auditoriaDTO);
		for (Documento documento : documentosYArchivosSiged.getListaDocumento()) {
			if (documento.getPrincipal().equals(ConstantesUtil.PARAM_documentoPrincipal)) {
				long idPropietario = Long.parseLong(documento.getIdPropietario());

				if (idPropietario != expedienteSiged.getIdPropietario()) {
					objResultado.setResultCode(ConstantesUtil.PARAM_noPropietario);
					objResultado.setMessage("Usted no es el propietario del expediente.");
					
					DetalleExcepcionDTO detalleExcepcionDTO = new DetalleExcepcionDTO();
					detalleExcepcionDTO.setMensajeInfraResumen("El propietario del expediente Siged no el mismo que el de la PGIM");					
					
					final List<String> lstAcciones = new ArrayList<String>();
					lstAcciones.add("El propietario del expediente Siged debe reenviar a través del Siged web al propietario actual del objeto de trabajo PGIM");
					lstAcciones.add("Verificar que la trazabilidad tanto Siged como PGIM se encuentren alineadas");
					lstAcciones.add("Volver a ejecutar la acción");
					detalleExcepcionDTO.setListAcciones(lstAcciones);
					
					objResultado.setDetalleExcepcionDTO(detalleExcepcionDTO);				
				}
				if (expedienteSiged.getIdDestinatario() != null
						&& idPropietario == expedienteSiged.getIdDestinatario()) {
					objResultado.setResultCode(ConstantesUtil.PARAM_mismoPropietario);
					objResultado.setMessage("No es posible hacer el reenvio de expedientes hacia usted mismo.");
				}
			}
		}
		objResultado.setDocumentos(documentosYArchivosSiged);
		return objResultado;
	}

	public ExpedienteDocOutRO validarUsuarioPropietarioExpedienteSiged(ExpedienteSiged expedienteSiged, Long idProceso,
			String accion, AuditoriaDTO auditoriaDTO) throws Exception {

		ExpedienteDocOutRO objResultado = null;

		if (idProceso.equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)
				|| idProceso.equals(ConstantesUtil.PARAM_PROCESO_CONTRATO)
				|| idProceso.equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)
				|| idProceso.equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)) {

			objResultado = this.procesarUsuarioSiged(expedienteSiged, auditoriaDTO);

			if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				log.error("Ocurrió un error al validar el propietario del expediente SIGED: " + expedienteSiged.getNumeroExpediente());
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, accion,
						objResultado.getResultCode(), objResultado.getMessage());
				objResultado.setMessage(mensajeErrorSiged);
			}
		} else {
			objResultado = new ExpedienteDocOutRO();
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_SUCCESS);
		}
		return objResultado;
	}

	// @Override
	public ExpedienteOutRO reenviarExpedienteSiged_old(ExpedienteReenvio expedienteReenvio, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteOutRO objResultado = new ExpedienteOutRO();

		// Validación del propietario del expediente
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(expedienteReenvio.getNumeroExpediente());
		expedienteSiged.setIdPropietario(expedienteReenvio.getIdRemitente());
		expedienteSiged.setIdDestinatario(expedienteReenvio.getIdDestinatario());

		ExpedienteDocOutRO obj = this.procesarUsuarioSiged(expedienteSiged, auditoriaDTO);

		objResultado.setResultCode(obj.getResultCode());
		objResultado.setMessage(obj.getMessage());
		objResultado.setDetalleExcepcionDTO(obj.getDetalleExcepcionDTO());

		if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)
				&& !objResultado.getResultCode().equals(ConstantesUtil.PARAM_mismoPropietario)) {
			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_noPropietario)) {
				objResultado.setMessage(objResultado.getMessage() + " Realice la corrección pertinente en el Siged.");
			}
			String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, "Reenviar expediente",
					objResultado.getResultCode(), objResultado.getMessage());
			objResultado.setMessage(mensajeErrorSiged);
			return objResultado;
		}

		// Ejecutar el procedimiento de reenvío del expediente
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_EXPEDIENTE_REENVIAR;
		String urlServicio = servicio.replace("{aprobacion}", expedienteReenvio.getAprobacion());
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"EXPEDIENTE_REENVIAR: " + expedienteReenvio.getNumeroExpediente()));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			String xmlStringReq = ExpedienteReenvio.getStringXmlFile(expedienteReenvio);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"EXPEDIENTE_REENVIAR: " + expedienteReenvio.getNumeroExpediente()));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "errorCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "message"));
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "resultCode"));
			objResultado.setCodigoExpediente(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "codigoExpediente"));

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"EXPEDIENTE_REENVIAR: " + expedienteReenvio.getNumeroExpediente()));

		return objResultado;
	}

	@Override
	public ExpedienteOutRO reenviarExpedienteSiged(ExpedienteReenvio expedienteReenvio, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteOutRO objResultado = new ExpedienteOutRO();

		// Validación del propietario del expediente
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(expedienteReenvio.getNumeroExpediente());
		expedienteSiged.setIdPropietario(expedienteReenvio.getIdRemitente());
		expedienteSiged.setIdDestinatario(expedienteReenvio.getIdDestinatario());

		ExpedienteDocOutRO obj = this.procesarUsuarioSiged(expedienteSiged, auditoriaDTO);

		objResultado.setResultCode(obj.getResultCode());
		objResultado.setMessage(obj.getMessage());
		objResultado.setDetalleExcepcionDTO(obj.getDetalleExcepcionDTO());
		
		if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)
				&& !objResultado.getResultCode().equals(ConstantesUtil.PARAM_mismoPropietario)) {
			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_noPropietario)) {
				objResultado.setMessage(objResultado.getMessage() + " Realice la corrección pertinente en el Siged.");
			}
			String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged, "Reenviar expediente",
					objResultado.getResultCode(), objResultado.getMessage());
			objResultado.setMessage(mensajeErrorSiged);
			return objResultado;
		}

		int idUsuarioRemitente = 0;
		if (expedienteReenvio.getIdRemitente() != null && expedienteReenvio.getIdRemitente() > 0L) {
			idUsuarioRemitente = Integer.parseInt(expedienteReenvio.getIdRemitente().toString());
		} else {
			Integer.parseInt(auditoriaDTO.getCoUsuarioSiged());
		}

		return this.sigedSoapService.reenviarExpediente(expedienteReenvio.getAsunto(), expedienteReenvio.getContenido(),
				expedienteReenvio.getIdDestinatario(), expedienteReenvio.getNumeroExpediente(),
				Integer.parseInt(expedienteReenvio.getAprobacion()), idUsuarioRemitente,
				// Integer.parseInt(auditoriaDTO.getCoUsuarioSiged()),
				Integer.parseInt(auditoriaDTO.getIdRolSiged()));

	}

	@Override
	public PgimDocumentoDTO obtenerAprobacionResultadoPlazo(Long idInstanciaProceso, Long idSubcatDocumento,
			Long idRelacionPaso) throws Exception {
		PgimDocumentoDTO pgimDocumentoDTOResultado = null;
		List<PgimDocumentoDTO> lpgimDocumentoDTOResultado = documentoRepository
				.obtenerAprobacionResultadoPlazo(idInstanciaProceso, idSubcatDocumento, idRelacionPaso);

		if (lpgimDocumentoDTOResultado.size() > 0)
			pgimDocumentoDTOResultado = lpgimDocumentoDTOResultado.get(0);

		return pgimDocumentoDTOResultado;
	}

	public EnumerarDocumentoOutRO enumeraDocumentoSiged_old(String nroExp, String idDocumento, String idUsuario)
			throws Exception {
		EnumerarDocumentoOutRO obj = new EnumerarDocumentoOutRO();

		String serverUrl = propertiesConfig.getUrlSiged();
		String enumerarDocumento = ConstantesUtil.PARAM_SIGED_ENUMERAR_DOCUMENTO;
		String urlEnumerarDocumento = enumerarDocumento.replace("{nroExpediente}", nroExp)
				.replace("{idDocumento}", idDocumento).replace("{idUsuarioEnumerador}", idUsuario);
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"ENUMERAR_DOCUMENTO: nroExpediente/idDocumento-" + nroExp + "/" + idDocumento));

		try {
			URL url = new URL(serverUrl + urlEnumerarDocumento);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
					"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				obj.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				obj.setErrorCode(String.valueOf(conn.getResponseCode()));
				obj.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"ENUMERAR_DOCUMENTO: nroExpediente/idDocumento-" + nroExp + "/" + idDocumento));
				return obj;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);

			StringBuilder xmlString = new StringBuilder("");

			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			obj.setErrorCode(CommonsUtil.getValue2Tag(doc, "enumerarDocumentoOutRO", "errorCode"));
			obj.setMessage(CommonsUtil.getValue2Tag(doc, "enumerarDocumentoOutRO", "message"));
			obj.setResultCode(CommonsUtil.getValue2Tag(doc, "enumerarDocumentoOutRO", "resultCode"));
			obj.setModificado(CommonsUtil.getValue2Tag(doc, "enumerarDocumentoOutRO", "modificado"));
			conn.disconnect();
		} catch (Exception e) {
			obj.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			obj.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			obj.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage() + " || Cause: "
					+ e.getCause());
			log.error(e.getMessage(), e);
			return obj;
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"ENUMERAR_DOCUMENTO: nroExpediente/idDocumento-" + nroExp + "/" + idDocumento));

		return obj;
	}

	public EnumerarDocumentoOutRO enumeraDocumentoSiged(Long idDocumento, AuditoriaDTO auditoriaDTO) throws Exception {
		return this.sigedSoapService.enumerarDocumento(idDocumento, auditoriaDTO.getUsername(),
				Integer.parseInt(auditoriaDTO.getCoUsuarioSiged()), Integer.parseInt(auditoriaDTO.getIdRolSiged()));
	}

	@Override
	@Transactional(readOnly = true)
	public ResponseEntity<ResponseDTO> procesarReemplazoDocumentoSiged(DocumentoNuevo docNuevoSiged,
			String idDocumentoSiged, Long idProceso, AuditoriaDTO auditoriaDTO, ExpedienteDocOutRO elementosExpediente)
			throws Exception {

		this.obtenerDocumentoYArchivoParaReemplazo(docNuevoSiged, idDocumentoSiged, idProceso, auditoriaDTO,
				elementosExpediente);

		// Obtener el archivo del documento a reemplazar por el IdDocumento
		File fileSiged = new File(propertiesConfig.getCarpetaTmp() + idDocumentoSiged + ".pdf");

		// Obtener nombre original del archivo inicial a reemplazar
		MultipartFile multipartFile = new MockMultipartFile(docNuevoSiged.getDescripcion(),
				new FileInputStream(fileSiged));

		// Registrar documento Siged (WS)
		DocumentoOutRO documentoOutRO = this.agregarReemplazoDocumentoSiged_old(docNuevoSiged, multipartFile);

		// Si hay un error en el consumo del servicio SIGED, debe enviar el error
		if (!documentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException("error", documentoOutRO.getMessage());
		}

		ResponseDTO respuesta = new ResponseDTO(TipoResultado.SUCCESS, "El documento ha sido reemplazado"); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario

		return ResponseEntity.status(HttpStatus.CREATED).body(respuesta);
	}

	@Override
	@Transactional(readOnly = true)
	public ResponseEntity<ResponseDTO> procesarReemplazoDocumentoSiged(DocumentoNuevo docNuevoSiged,
			String idDocumentoSiged, Long idProceso, AuditoriaDTO auditoriaDTO, MultipartFile fileDocumento,
			ExpedienteDocOutRO elementosExpediente) throws Exception {

		this.obtenerDocumentoYArchivoParaReemplazo(docNuevoSiged, idDocumentoSiged, idProceso, auditoriaDTO,
				elementosExpediente);

		// Obtener nombre original del archivo inicial a reemplazar
		MultipartFile multipartFile = new MockMultipartFile(docNuevoSiged.getDescripcion(),
				fileDocumento.getInputStream());

		// Registrar documento Siged (WS)
		DocumentoOutRO documentoOutRO = this.agregarReemplazoDocumentoSiged_old(docNuevoSiged, multipartFile);

		// Si hay un error en el consumo del servicio SIGED, debe enviar el error
		if (!documentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, documentoOutRO.getMessage());
		}
		// Obtener documento Siged
		PgimDocumentoDTO pgimDocumentoDTO = this.documentoRepository
				.obtenerDocumentoPgimByIdDocumentoSiged(Long.parseLong(idDocumentoSiged));

		if (pgimDocumentoDTO == null) {
			String motivo = "Es posible que la integración PGIM-Siged haya fallado al momento de la creación del documento, por este motivo, se recomienda anular el documento en cuestión desde el Siged y volver a generarlo desde la PGIM";
			String mensajeError = String.format(
					"No se pudo encontrar en la PGIM el documento (código Siged %s) con el asunto %s y nombre de archivo %s. %s",
					idDocumentoSiged, docNuevoSiged.getAsunto(), docNuevoSiged.getDescripcion(), motivo);

			log.error(mensajeError + ". Método: DocumentoServiceImpl.procesarReemplazoDocumentoSiged()");

			throw new PgimException(TipoResultado.WARNING, mensajeError);
		}

		ResponseDTO respuesta = new ResponseDTO(TipoResultado.SUCCESS, "El documento ha sido reemplazado", //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
				pgimDocumentoDTO.getIdDocumento());
		pgimDocumentoDTO.setNuExpedienteSiged(docNuevoSiged.getNroExpediente());
		respuesta.setData(pgimDocumentoDTO);

		return ResponseEntity.status(HttpStatus.CREATED).body(respuesta);
	}

	void obtenerDocumentoYArchivoParaReemplazo(DocumentoNuevo docNuevoSiged, String idDocumentoSiged, Long idProceso,
			AuditoriaDTO auditoriaDTO, ExpedienteDocOutRO elementosExpediente) throws Exception {

		Long idArchivoIter = -1L;
		Long idArchivo = Long.MAX_VALUE;
		Archivo archivoInicial = null;
		Documento documentoSiged = null;

		for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {
			if (documento.getIdDocumento().equals(idDocumentoSiged)) {
				documentoSiged = documento;
				for (Archivo archivo : documento.getArchivos()) {
					idArchivoIter = Long.parseLong(archivo.getIdArchivo());
					if (idArchivoIter < idArchivo) {
						idArchivo = idArchivoIter;
						archivoInicial = archivo;
						this.validarExisteFirma(archivoInicial);
					}
				}
			}
		}
		if (idArchivo.compareTo(Long.MAX_VALUE) != 0) {
			// Completar la data del documento
			docNuevoSiged.setIdArchivo(archivoInicial.getIdArchivo());
			docNuevoSiged.setDescripcion("Nueva versión " + CommonsUtil.generadorNombreUnico());
			docNuevoSiged.setAsunto(documentoSiged.getAsunto());
			docNuevoSiged.setCodTipoDocumento(documentoSiged.getIdTipoDocumento());
			docNuevoSiged.setNrodocumento(documentoSiged.getNroDocumento());
			docNuevoSiged.setDescripcion(archivoInicial.getNombre());
		} else {
			throw new PgimException(TipoResultado.ERROR,
					"No se ha encontrado el archivo del documento Siged, no es posible reemplazar el documento");
		}
	}

	void validarExisteFirma(Archivo archivoSiged) throws Exception {
		// Validar si el documento tiene algún archivo firmado digitalmente
		// lo que es una restricción para la generación
		if (archivoSiged.getFirmaDigitalSiged() != null) {
			if (archivoSiged.getFirmaDigitalSiged().size() > 0) {
				if (archivoSiged.getFirmaDigitalSiged().size() == 1) {
					throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO);
				}
				if (archivoSiged.getFirmaDigitalSiged().size() > 1) {
					throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS);
				}
			}
		}
	}


	public ExpedienteOutRO reenviarExpedienteSigedSubflujo_old(ExpedienteReenvio expedienteReenvio, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteOutRO objResultado = new ExpedienteOutRO();

		// Se omite la validación del propietario del expediente

		// Ejecutar el procedimiento de reenvío del expediente
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_EXPEDIENTE_REENVIAR_SUBFLUJO;
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"EXPEDIENTE_REENVIAR_SUBFLUJO: " + expedienteReenvio.getNumeroExpediente()));

		try {
			URL url = new URL(serverUrl + servicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			String xmlStringReq = ExpedienteReenvio.getStringXmlFile(expedienteReenvio);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"EXPEDIENTE_REENVIAR: " + expedienteReenvio.getNumeroExpediente()));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "errorCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "message"));
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "resultCode"));
			objResultado.setCodigoExpediente(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "codigoExpediente"));

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"EXPEDIENTE_REENVIAR: " + expedienteReenvio.getNumeroExpediente()));

		return objResultado;
	}

	@Override
	public BaseOutRO reenviarSubflujoExpedienteSIGED_old(ReenviarSubFlujoInRO  reenviarSubFlujoInRO, AuditoriaDTO auditoriaDTO)
			throws Exception {
		BaseOutRO objResultado = new BaseOutRO();

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_EXPEDIENTE_REENVIAR_SUBFLUJO;
		String url = serverUrl + servicio;

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"EXPEDIENTE_REENVIAR_SUBFLUJO: " + reenviarSubFlujoInRO.getNumeroExpediente()));

        try {

        	objResultado = ReenviarSubflujo.getEnviar(url, reenviarSubFlujoInRO);

		} catch (Exception e) {
			objResultado.setResultCode(Integer.parseInt(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS));
			objResultado.setErrorCode(Integer.parseInt(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION));
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
			"EXPEDIENTE_REENVIAR_SUBFLUJO: " + reenviarSubFlujoInRO.getNumeroExpediente()));

        return objResultado;
    }

	public byte[] generarForLiqActas(String ruta, PgimLiquidacionAuxDTO pgimLiquidacionAuxDTO, Long idTipoExtensionGen)
			throws IOException, JSONException, XmlException, Exception {
		File plantilla = new File(ruta);

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdf.format(new Date());

		Locale locale = new Locale("en", "US");
		String pattern = "#,###.00";
		DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		decimalFormat.applyPattern(pattern);

		List<PgimItemLiquidacionDTO> lPgimItemLiquidacionDTO = this.liquidacionService
				.listarItemLiquidacionActasInformes(pgimLiquidacionAuxDTO.getIdLiquidacion());

		String nombreDivisionSupervision = pgimLiquidacionAuxDTO.getDeDivisionSupervisora();

		BigDecimal bdTotal = BigDecimal.ZERO;
		for (PgimItemLiquidacionDTO pgimItemLiquidacionDTO : lPgimItemLiquidacionDTO) {
			bdTotal = bdTotal.add(pgimItemLiquidacionDTO.getDescMoItemConsumo());
		}

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento,fechaDeGeneracion, "HORIZONTAL", -100, 13000); //PLANTILLA_FORMATO_LIQUIDACION_ACTA

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_cabecera")) {
					paragraph.removeRun(j);

					XWPFTable tableCabecera = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2800, 0, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Formato de liquidación - Actas", 8, true);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, 0, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, 0, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, 0, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2300, 0, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2500, 0, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Nº", 8, true);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 3000, 0, 6, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimLiquidacionAuxDTO.getNuLiquidacion(), 8, false);

					// Segunda Fila

					XWPFTableRow tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2500, 1, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Division de supervisión", 8, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, 1, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, nombreDivisionSupervision, 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 0, 1, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2000, 1, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Especialidad", 8, true);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2300, 1, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimLiquidacionAuxDTO.getNoEspecialidad(), 8,
							false);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2500, 1, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Nº de contrato", 8, true);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 3000, 1, 6, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimLiquidacionAuxDTO.getNuContrato(), 8, false);

					PoiWordUtil.mergeCellHorizontally(tableCabecera, 0, 0, 4);
					PoiWordUtil.mergeCellHorizontally(tableCabecera, 1, 1, 2);
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_detalle")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 300, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Empresa supervisora", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 300, 1, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nº",
							8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Nº expediente", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2500, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Agente fiscalizado", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1500, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Unidad fiscalizada", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Tipo", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Nº Profesionales", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Duración", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fiscalización de campo", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Costo acta (S/)", 8, true);

					// Tercera Fila

					XWPFTableRow tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 300, 2, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 2, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, 2, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 2, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 2, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 2, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 2, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 2, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Inicio (dd/mm/aaaa)", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 2, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Término (dd/mm/aaaa)", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 2, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					// Cuarta Fila

					XWPFTableRow tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 300, 3, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(A)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, 3, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(B)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(C)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(D)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(E)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(F)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(G)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(H)",
							8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 3, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "(I)",
							8, false);

					int cant = 3;
					int nroItem = 0;
					for (int k = 0; k < lPgimItemLiquidacionDTO.size(); k++) {
						cant++;
						nroItem++;

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 300, cant, 0, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, String.valueOf(nroItem), 8, true);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 1, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNuExpedienteSiged(),
								8, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNoRazonSocial(), 8,
								false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, cant, 3, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNoUnidadMinera(), 8,
								false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, cant, 4, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getDescNoValorParametro() + " / "
										+ lPgimItemLiquidacionDTO.get(k).getDescDeSubtipoSupervision() + " / "
										+ lPgimItemLiquidacionDTO.get(k).getDescDeMotivoSupervision(),
								8, false);

						List<PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTO = this.instanciaProcesService
								.obtenerParticipantesRolSupervisor(
										lPgimItemLiquidacionDTO.get(k).getDescIdInstanciaProceso());
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, String.valueOf(lPgimEqpInstanciaProDTO.size()), 8, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 6, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getCantidadDias().toString(), 8, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 7, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getDescFeInicioSupervisionRealDesc(), 8, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getDescFeFinSupervisionRealDesc(), 8, false);

						String sMoItemConsumo = decimalFormat
								.format(lPgimItemLiquidacionDTO.get(k).getDescMoItemConsumo());
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, sMoItemConsumo, 8, false);

					}

					// Fila final
					cant++;
					XWPFTableRow tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 300, cant, 0, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0,
							"Total", 8, true);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					String stotal = decimalFormat.format(bdTotal);
					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0,
							stotal, 8, true);

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 3, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 4, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 5, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 6, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 9, 1, 2);

					PoiWordUtil.mergeCellHorizontally(tableDetalle, cant, 0, 8);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 1, 7, 8);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 0, 9);

				}
			}
		}

		List<Long> lIdRolACapturar = new ArrayList<>();
		lIdRolACapturar.add(ConstRolLiquidacion.COORDINADOR_EMPRESA_SUPERVISORA);
		lIdRolACapturar.add(ConstRolLiquidacion.GERENTE_DIVISION);
		lIdRolACapturar.add(ConstRolLiquidacion.ESPECIALISTA_TECNICO);

		Map<Long, PgimEqpInstanciaProDTO> mapPgimEqpInstanciaProDTOFirmantes = this
				.obtenerPersonaEquipo(pgimLiquidacionAuxDTO.getIdInstanciaProceso(), lIdRolACapturar);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOCoordinador = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.COORDINADOR_EMPRESA_SUPERVISORA);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOGerente = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.GERENTE_DIVISION);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOEspecialista = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.ESPECIALISTA_TECNICO);

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// FILA 1
					// ======

					// Aquí va la firma del/la coordinador/a de la empresa supervisora
					XWPFTableRow tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "«image:osifirma»", 7, false);

					// Aquí va la firma del/de la especialista/técnica
					String etiquetaFirmaEspecialista = String.format("«%s»",
					pgimEqpInstanciaProDTOEspecialista.getDescNoUsuario().toLowerCase());

					tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes,
							tableFirmantesFila1Rubricas,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, etiquetaFirmaEspecialista, 7, false);

					// Aquí va la firma del/de la gerente/a de división
					String etiquetaFirmaGerente = String.format("«%s»",
							pgimEqpInstanciaProDTOGerente.getDescNoUsuario().toLowerCase());

					tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes,
							tableFirmantesFila1Rubricas,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, etiquetaFirmaGerente, 7, false);

					// FILA 2
					// ======

					// Aquí va el cargo del/la coordinador/a de la empresa supervisora
					String cargoCoordinadorEmpresaSupervisora = null;
					if (pgimEqpInstanciaProDTOCoordinador.getNoCargoPersonaEquipo() != null) {
						cargoCoordinadorEmpresaSupervisora = pgimEqpInstanciaProDTOCoordinador.getNoCargoPersonaEquipo();
					} else {
						cargoCoordinadorEmpresaSupervisora = pgimEqpInstanciaProDTOCoordinador.getDescNoRolProceso();
					}

					String cargoYNombreCoordinador = String.format("%s\n%s",
							CommonsUtil.capitalizar(pgimEqpInstanciaProDTOCoordinador.getDescNoCompletoPersona()),
							cargoCoordinadorEmpresaSupervisora);

					XWPFTableRow tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, cargoYNombreCoordinador, 7, false);

					// Aquí va el cargo del/de la especialista/técnica
					String cargoEspecialistaTecnico = null;
					if (pgimEqpInstanciaProDTOEspecialista.getNoCargoPersonaEquipo() != null) {
						cargoEspecialistaTecnico = pgimEqpInstanciaProDTOEspecialista.getNoCargoPersonaEquipo();
					} else {
						cargoEspecialistaTecnico = pgimEqpInstanciaProDTOEspecialista.getDescNoRolProceso();
					}

					String cargoYNombreEspecialistaTecnico = String.format("%s\n%s",
							CommonsUtil.capitalizar(pgimEqpInstanciaProDTOEspecialista.getDescNoCompletoPersona()),
							cargoEspecialistaTecnico);

					tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesFila2Cargos,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, cargoYNombreEspecialistaTecnico, 7,
							false);

					// Aquí va el cargo del/de la gerente/a de división
					String cargoGerenteDivision = null;
					if (pgimEqpInstanciaProDTOGerente.getNoCargoPersonaEquipo() != null) {
						cargoGerenteDivision = pgimEqpInstanciaProDTOGerente.getNoCargoPersonaEquipo();
					} else {
						cargoGerenteDivision = pgimEqpInstanciaProDTOGerente.getDescNoRolProceso();
					}

					String cargoYNombreGerenteDivision = String.format("%s\n%s",
							CommonsUtil.capitalizar(pgimEqpInstanciaProDTOGerente.getDescNoCompletoPersona()),
							cargoGerenteDivision);

					tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesFila2Cargos,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, cargoYNombreGerenteDivision, 7, false);

				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	public byte[] generarForLiquidacionInforme(String ruta, PgimLiquidacionAuxDTO pgimLiquidacionAuxDTO,
			Long idTipoExtensionGen) throws IOException, JSONException, XmlException, Exception {
		File plantilla = new File(ruta);

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdf.format(new Date());

		Locale locale = new Locale("en", "US");
		String pattern = "#,###.00";
		DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		decimalFormat.applyPattern(pattern);

		List<PgimItemLiquidacionDTO> lPgimItemLiquidacionDTO = this.liquidacionService
				.listarItemLiquidacionActasInformes(pgimLiquidacionAuxDTO.getIdLiquidacion());

		String nombreDivisionSupervision = pgimLiquidacionAuxDTO.getDeDivisionSupervisora();

		BigDecimal bdTotal = BigDecimal.ZERO;
		for (PgimItemLiquidacionDTO pgimItemLiquidacionDTO : lPgimItemLiquidacionDTO) {
			bdTotal = bdTotal.add(pgimItemLiquidacionDTO.getDescMoItemConsumo());
		}

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		//MergeField de reemplazo de personal
		JSONArray list = new JSONArray();

		String sConReemplazo = " ";
		if(pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona() != null && pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona().equals(ConstantesUtil.FL_IND_SI)){
			sConReemplazo ="X";
		}else{
			sConReemplazo = " ";
		}

		JSONObject reemplazoPersonal = new JSONObject();
		reemplazoPersonal.put("mergeField", "reemplazo");
		reemplazoPersonal.put("value", sConReemplazo);
		list.put(reemplazoPersonal);

		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, list);

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "HORIZONTAL", -100, 15000); //PLANTILLA_FORMATO_LIQUIDACION_INFORME

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		String tipoFiscalizacion = "";
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_cabecera")) {
					paragraph.removeRun(j);

					XWPFTable tableCabecera = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 15000);

					// Primera Fila

					XWPFTableRow tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2500, 0, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Formato liquidación - Informe de fiscalización", 7, true);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 3465, 0, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, 0, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 3000, 0, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1500, 0, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Nº", 7, true);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, 0, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimLiquidacionAuxDTO.getNuLiquidacion(), 7, false);

					// Segunda Fila

					XWPFTableRow tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2500, 1, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "División de supervisión", 7, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, 1, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, nombreDivisionSupervision, 7, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2000, 1, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0,
							"Tipo de fiscalización", 7, true);

					tipoFiscalizacion = pgimLiquidacionAuxDTO.getNoTipoSupervision() + " / "
							+ pgimLiquidacionAuxDTO.getDeSubtipoSupervision() + " / "
							+ pgimLiquidacionAuxDTO.getDeMotivoSupervision();

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 5465, 1, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0,
							tipoFiscalizacion,
							7, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1500, 1, 4, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Nº de contrato", 7, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, 1, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimLiquidacionAuxDTO.getNuContrato(), 7, false);

					// Tercera Fila

					XWPFTableRow tableSupervisionRowThree = PoiWordUtil.createTableCell(tableCabecera, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2500, 2, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Especialidad", 7, true);

					tableSupervisionRowThree = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, 2, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimLiquidacionAuxDTO.getNoEspecialidad(), 7,
							true);

					tableSupervisionRowThree = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 2000, 2, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, true);

					tableSupervisionRowThree = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 3000, 2, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, false);

					tableSupervisionRowThree = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, 2, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, true);

					tableSupervisionRowThree = PoiWordUtil.createTableCell(tableCabecera, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 2465, 2, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 7, false);

					PoiWordUtil.mergeCellHorizontally(tableCabecera, 0, 0, 3);
					PoiWordUtil.mergeCellHorizontally(tableCabecera, 2, 1, 2);

					PoiWordUtil.removeBorderCell(tableCabecera, 2, 2);
					PoiWordUtil.removeBorderCell(tableCabecera, 2, 3);
					PoiWordUtil.removeBorderCell(tableCabecera, 2, 4);

				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_detalle")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 15000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "9CC2E5", 100, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Empresa supervisora", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 500, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 2700, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 2500, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 600, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 600, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 700, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 700, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 1000, 0, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 1000, 0, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Especialista de la GSM", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 2600, 0, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 1000, 0, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);
					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "9CC2E5", 1000, 0, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, 1, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Nº", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Expediente", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2700, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Agente fiscalizado", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2500, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Unidad fiscalizada", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 600, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Nº de profesionales en campo", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 600, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fiscalización de campo", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 700, 1, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 700, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							false);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Costo según contrato (S/)", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Penalidades", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2600, 1, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					// Tercera Fila

					XWPFTableRow tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER, 
							200, "FFFFFF", 100, 2, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 500, 2, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2700, 2, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, 2, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "FFFFFF", 600, 2, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 600, 2, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Duración", 7, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 700, 2, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Inicio (dd/mm/aaaa)", 7, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 700, 2, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Término (dd/mm/aaaa)", 7, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 2, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 2, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Días de demora de entrega", 7, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2600, 2, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto de penalidad 'Por usar equipos de protección personal (EPP) del agente fiscalizado'; Penalidad por realizar fiscalización sin EPP; Monto de penalidad 'Sin contar con equipos'; Monto de penalidad 'Sin contar con instrumentos de medición'; Monto de penalidad 'Contar con equipos defectuosos'; Monto de penalidad 'Contar con instrumentos de medición defectuosos'; Monto de penalidad 'Equipos sin certificado de calibración vigente'; Monto de penalidad 'Instrumentos de medición sin certificado de calibración vigente'.", 7, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 2, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Por alterar los formatos de las actas proporcionales", 7, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 2, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Por frustrar la fiscalización ordenada por causa imputable a la EST", 7, true);

					// Cuarta Fila

					XWPFTableRow tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 100, 3, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"", 7, false);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 3, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(A)",	7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2700, 3, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(B)",	7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2500, 3, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(C)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 600, 3, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(D)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 600, 3, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(E)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 700, 3, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(F)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 700, 3, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(G)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 3, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(H)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 3, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"(I)",
							7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2600, 3, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"(J)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 3, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"(K)", 7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 3, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"(L)", 7, true);

					int cant = 3;
					int nroItem = 0;
					for (int k = 0; k < lPgimItemLiquidacionDTO.size(); k++) {
						cant++;
						nroItem++;

						List<PgimFichaRevisionDTO> lPgimFichaConformidad = this
								.obtenerListFichaConformidadPorInstanciaProc(
										lPgimItemLiquidacionDTO.get(k).getDescIdInstanciaProceso());
						// List<PgimFichaRevisionDTO> lPgimFichaObservacionConObsNoSubsanadas = this
						// 		.obtenerListFichaObservacionNoSubsanadasPorInstanciaProc(
						// 				lPgimItemLiquidacionDTO.get(k).getDescIdInstanciaProceso());

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, String.valueOf(nroItem), 7, true);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 1, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNuExpedienteSiged(),
								7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2700, cant, 2, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNoRazonSocial(), 7,
								false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2500, cant, 3, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNoUnidadMinera(), 7,
								false);

						List<PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTO = this.instanciaProcesService
								.obtenerParticipantesRolSupervisor(
										lPgimItemLiquidacionDTO.get(k).getDescIdInstanciaProceso());
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 600, cant, 4, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, String.valueOf(lPgimEqpInstanciaProDTO.size()), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 600, cant, 5, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getCantidadDias().toString(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 700, cant, 6, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getDescFeInicioSupervisionRealDesc(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 700, cant, 7, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimItemLiquidacionDTO.get(k).getDescFeFinSupervisionRealDesc(), 7, false);

						String sMoItemConsumo = decimalFormat
								.format(lPgimItemLiquidacionDTO.get(k).getDescMoItemConsumo());
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, sMoItemConsumo, 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0,
								lPgimFichaConformidad.get(0).getCaDiasDemoraEstablecidos().toString(), 7, false);

						String sOtrasPenalidades = "";
						if (lPgimFichaConformidad.get(0).getDescFlOtrasPenalidades().toString().equals(ConstantesUtil.FL_IND_SI))
							sOtrasPenalidades = "Sí";
						else
							sOtrasPenalidades = "";

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2600, cant, 10, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sOtrasPenalidades, 7, false);

						String sFlAlterarFormatos = "";
						if (lPgimFichaConformidad.get(0).getFlAlterarFormatos() != null && lPgimFichaConformidad.get(0).getFlAlterarFormatos().equals(ConstantesUtil.FL_IND_SI))
							sFlAlterarFormatos = "Sí";
						else
							sFlAlterarFormatos = "No";

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 11, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sFlAlterarFormatos, 7, false);

						String sFlFrustrarFiscalizacion = "";
						if (lPgimFichaConformidad.get(0).getFlFrustrarFiscalizacion() != null && lPgimFichaConformidad.get(0).getFlFrustrarFiscalizacion().equals(ConstantesUtil.FL_IND_SI))
							sFlFrustrarFiscalizacion = "Sí";
						else
							sFlFrustrarFiscalizacion = "No";

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 12, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sFlFrustrarFiscalizacion, 7, false);

					}

					// Fila final
					cant++;
					XWPFTableRow tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, cant, 0, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0,
							"Total", 7, true);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 500, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2700, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 600, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 600, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					String stotal = decimalFormat.format(bdTotal);
					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.RIGHT, LineSpacingRule.EXACT, 0, 0,
							stotal, 7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2600, cant, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 7, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 7, false);

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 1, 3);

					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 3, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 4, 1, 2);
					PoiWordUtil.mergeCellVertically(tableDetalle, 8, 1, 2);

					// Para los merge horizontal, realizarlos desde el ultimo hacia el primero,
					// ya que si no se hace en ese orden, no reconoce las celdas que se hicieron
					// merge como tales(celdas)
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 9, 12);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 0, 8);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 1, 9, 12);	
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 1, 5, 7);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, cant, 0, 7);

					PoiWordUtil.removeBorderCell(tableDetalle, cant, 2);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 3);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 4);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 5);


				}
			}
		}

		List<Long> lIdRolACapturar = new ArrayList<>();
		lIdRolACapturar.add(ConstRolLiquidacion.COORDINADOR_EMPRESA_SUPERVISORA);
		lIdRolACapturar.add(ConstRolLiquidacion.GERENTE_DIVISION);
		lIdRolACapturar.add(ConstRolLiquidacion.ESPECIALISTA_TECNICO);

		Map<Long, PgimEqpInstanciaProDTO> mapPgimEqpInstanciaProDTOFirmantes = this
				.obtenerPersonaEquipo(pgimLiquidacionAuxDTO.getIdInstanciaProceso(), lIdRolACapturar);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOCoordinador = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.COORDINADOR_EMPRESA_SUPERVISORA);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOGerente = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.GERENTE_DIVISION);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOEspecialista = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.ESPECIALISTA_TECNICO);

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 15000);

					// FILA 1
					// ======

					// Aquí va la firma del/la coordinador/a de la empresa supervisora
					XWPFTableRow tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "«image:osifirma»", 7, false);

					// Aquí va la firma del/de la especialista/técnica
					String etiquetaFirmaEspecialista = String.format("«%s»",
					pgimEqpInstanciaProDTOEspecialista.getDescNoUsuario().toLowerCase());

					tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes,
							tableFirmantesFila1Rubricas,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, etiquetaFirmaEspecialista, 7, false);

					// Aquí va la firma del/de la gerente/a de división
					String etiquetaFirmaGerente = String.format("«%s»",
							pgimEqpInstanciaProDTOGerente.getDescNoUsuario().toLowerCase());

					tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes,
							tableFirmantesFila1Rubricas,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, etiquetaFirmaGerente, 7, false);



					// FILA 2
					// ======

					// Aquí va el cargo del/la coordinador/a de la empresa supervisora
					String cargoYNombreCoordinador = String.format("%s\n%s",
							CommonsUtil.capitalizar(pgimEqpInstanciaProDTOCoordinador.getDescNoCompletoPersona()),
							pgimEqpInstanciaProDTOCoordinador.getDescNoRolProceso());

					XWPFTableRow tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, cargoYNombreCoordinador, 7, false);

					// Aquí va el cargo del/de la especialista/técnica
					tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesFila2Cargos,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimEqpInstanciaProDTOEspecialista.getDescNoRolProceso(), 7,false);

					// Aquí va el cargo del/de la gerente/a de división
					tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesFila2Cargos,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimEqpInstanciaProDTOGerente.getDescNoRolProceso(), 7, false);



				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	private Map<Long, PgimEqpInstanciaProDTO> obtenerPersonaEquipo(Long idInstanciaProceso,
			List<Long> lIdRolACapturar) throws Exception {

		List<PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTO = this.instanciaProcesService
				.obtenerParticipantesInstanciaPro(idInstanciaProceso);

		Map<Long, PgimEqpInstanciaProDTO> lPgimEqpInstanciaProDTOFirmantes = new HashMap<>();

		String mensajeExcepcion = "";

		for (Long idRolACapturar : lIdRolACapturar) {
			for (PgimEqpInstanciaProDTO pgimEqpInstanciaProDTO : lPgimEqpInstanciaProDTO) {

				if (!pgimEqpInstanciaProDTO.getIdRolProceso().equals(idRolACapturar)) {
					continue;
				}

				if (lPgimEqpInstanciaProDTOFirmantes.containsKey(idRolACapturar)) {
					mensajeExcepcion = String.format(
							"Se ha encontrado más de una persona en el equipo con el rol '%s'",
							pgimEqpInstanciaProDTO.getDescNoRolProceso());
					throw new PgimException(TipoResultado.WARNING, mensajeExcepcion);//STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
				}

				lPgimEqpInstanciaProDTOFirmantes.put(idRolACapturar, pgimEqpInstanciaProDTO);
			}
		}

		for (Long idRol : lIdRolACapturar) {

			if (lPgimEqpInstanciaProDTOFirmantes.containsKey(idRol)) {
				continue;
			}

			PgimRolProceso pgimRolProceso = this.rolProcesoRepository.findById(idRol).orElse(null);

			mensajeExcepcion = String.format(
					"No se ha encontrado el rol '%s' el cual  es requerido para generar el documento ",
					pgimRolProceso.getNoRolProceso());

			throw new PgimException(TipoResultado.WARNING, mensajeExcepcion); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		return lPgimEqpInstanciaProDTOFirmantes;
	}

	public byte[] generarForLiquidacionPenalidades(String ruta, PgimLiquidacionAuxDTO pgimLiquidacionAuxDTO,
			Long idTipoExtensionGen) throws IOException, JSONException, XmlException, Exception {
		File plantilla = new File(ruta);

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdf.format(new Date());

		Locale locale = new Locale("en", "US");
		String pattern = "#,###.00";
		DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		decimalFormat.applyPattern(pattern);

		List<PgimItemLiquidacionDTO> lPgimItemLiquidacionDTO = this.liquidacionService
				.listarItemLiquidacionActasInformes(pgimLiquidacionAuxDTO.getIdLiquidacion());

		BigDecimal bdTotal = BigDecimal.ZERO;
		for (PgimItemLiquidacionDTO pgimItemLiquidacionDTO : lPgimItemLiquidacionDTO) {
			if (pgimItemLiquidacionDTO.getDescSubTotalPenalidades() != null) {
				bdTotal = bdTotal.add(pgimItemLiquidacionDTO.getDescSubTotalPenalidades());
			} else {
				bdTotal = bdTotal.add(new BigDecimal(0.00));
			}
		}

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "HORIZONTAL", -100, 13000); //PLANTILLA_FORMATO_LIQUIDACION_PENALIDAD

		List<XWPFParagraph> paragraphs = documento.getParagraphs();

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_detalle")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Formato de comunicación de penalidades", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 3000, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2500, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 3000, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1500, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1500, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, 1, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Especialidad", 8, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 3000, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							pgimLiquidacionAuxDTO.getNoEspecialidad(), 8, false);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1000, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Nº liquidación", 8, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							pgimLiquidacionAuxDTO.getNuLiquidacion(), 8, false);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 1500, 1, 6, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Nº de contrato", 8, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							pgimLiquidacionAuxDTO.getNuContrato(), 8, false);

					// Tercera Fila

					XWPFTableRow tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 100, 2, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Nº", 8, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 3000, 2, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Unidad fiscalizada", 8, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2500, 2, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Expediente", 8, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1000, 2, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Penalidades", 8, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 3000, 2, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1000, 2, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1500, 2, 6, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1500, 2, 7, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Subtotal de penalidades S/.", 8, true);

					// Cuarta Fila

					XWPFTableRow tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, 3, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 3000, 3, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							false);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2500, 3, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);


					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1000, 3, 3, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Mora por incumplimiento de plazo S/.", 8, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 3000, 3, 4, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Monto de penalidad 'Por usar equipos de protección personal (EPP) del agente fiscalizado'; Penalidad por realizar fiscalización sin EPP; Monto de penalidad 'Sin contar con equipos'; Monto de penalidad 'Sin contar con instrumentos de medición'; Monto de penalidad 'Contar con equipos defectuosos'; Monto de penalidad 'Contar con instrumentos de medición defectuosos'; Monto de penalidad 'Equipos sin certificado de calibración vigente'; Monto de penalidad 'Instrumentos de medición sin certificado de calibración vigente'.",
							7, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1000, 3, 5, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Por alterar los formatos de las actas proporcionados S/.", 8, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1500, 3, 6, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "Por frustrar la fiscalización ordenada por causa imputable a la EST S/.", 8, true);

					tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour,
							XWPFVertAlign.CENTER, 200, "D9D9D9", 1500, 3, 7, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, "", 8, true);

					int cant = 3;
					int nroItem = 0;
					for (int k = 0; k < lPgimItemLiquidacionDTO.size(); k++) {
						cant++;
						nroItem++;

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, String.valueOf(nroItem), 8, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 3000, cant, 1, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNoUnidadMinera(), 8,
								false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, lPgimItemLiquidacionDTO.get(k).getDescNuExpedienteSiged(),
								8, false);

						String sMoPenalidadPlazo = "";
						if (lPgimItemLiquidacionDTO.get(k).getMoPenalidadPlazo() != null && lPgimItemLiquidacionDTO.get(k).getMoPenalidadPlazo().compareTo(BigDecimal.ZERO)!= 0) {
							sMoPenalidadPlazo = decimalFormat
									.format(lPgimItemLiquidacionDTO.get(k).getMoPenalidadPlazo());
						} else {
							sMoPenalidadPlazo = "0.00";
						}
					
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sMoPenalidadPlazo, 8, false);

						String sMoPenalidadOtras = "";
						if (lPgimItemLiquidacionDTO.get(k).getDescOtrasPenalidades() != null && lPgimItemLiquidacionDTO.get(k).getDescOtrasPenalidades().compareTo(BigDecimal.ZERO) != 0) {
							sMoPenalidadOtras = decimalFormat
									.format(lPgimItemLiquidacionDTO.get(k).getDescOtrasPenalidades());
						} else {
							sMoPenalidadOtras = "0.00";
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 3000, cant, 4, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sMoPenalidadOtras, 8, false);

						String sMoPenalidadAlterarFormatos = "";
						if (lPgimItemLiquidacionDTO.get(k).getMoPenalidadAlterarFormatos() != null && lPgimItemLiquidacionDTO.get(k).getMoPenalidadAlterarFormatos().compareTo(BigDecimal.ZERO) != 0) {
							sMoPenalidadAlterarFormatos = decimalFormat
									.format(lPgimItemLiquidacionDTO.get(k).getMoPenalidadAlterarFormatos());
						} else {
							sMoPenalidadAlterarFormatos = "0.00";
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sMoPenalidadAlterarFormatos, 8, false);

						String sMoPenalidadFrustrarFiscalizacion = "";
						if (lPgimItemLiquidacionDTO.get(k).getMoPenalidadFrustrarFiscalizacion() != null && lPgimItemLiquidacionDTO.get(k).getMoPenalidadFrustrarFiscalizacion().compareTo(BigDecimal.ZERO) != 0) {
							sMoPenalidadFrustrarFiscalizacion = decimalFormat
									.format(lPgimItemLiquidacionDTO.get(k).getMoPenalidadFrustrarFiscalizacion());
						} else {
							sMoPenalidadFrustrarFiscalizacion = "0.00";
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, cant, 6, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sMoPenalidadFrustrarFiscalizacion, 8, false);
								
						String sSubtotal = "";
						if (lPgimItemLiquidacionDTO.get(k).getDescSubTotalPenalidades() != null && lPgimItemLiquidacionDTO.get(k).getDescSubTotalPenalidades().compareTo(BigDecimal.ZERO) != 0) {
							sSubtotal = decimalFormat.format(lPgimItemLiquidacionDTO.get(k).getDescSubTotalPenalidades());
						} else {
							sSubtotal = "0.00";
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, cant, 7, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sSubtotal, 8, false);
				
					}

					// Fila final (suma de subtotales)
					cant++;
					XWPFTableRow tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					String stotal = decimalFormat.format(bdTotal);
					tDetalleRowFin = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFin, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							stotal, 8, false);

					PoiWordUtil.removeBorderCell(tableDetalle, cant, 0);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 1);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 2);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 3);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 4);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 5);
					PoiWordUtil.removeBorderCell(tableDetalle, cant, 6);

					//Fila espacio 
					cant++;
					XWPFTableRow tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							20, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 3000, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 3000, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1500, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineadoRow = PoiWordUtil.createTableCell(tableDetalle, tInterlineadoRow, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1500, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);
							
							
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 0);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 1);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 2);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 3);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 4);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 5);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 6);
					PoiWordUtil.removeCellBorderLR(tableDetalle, cant, 7);
									
					//Fila Vinculada al reemplazo de personal
					cant++;
					XWPFTableRow tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);
					
					String sMoPenalidadRemplazoPersona = "";
					String sLabelRemplazoPersona = "";
					if (pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona() != null && pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona().equals(ConstantesUtil.FL_IND_SI) ) {
						sMoPenalidadRemplazoPersona = decimalFormat
								.format(pgimLiquidacionAuxDTO.getDescMoPenalidadReemplazoPersona());
						sLabelRemplazoPersona = "Vinculada al reemplazo de personal S/.";
					}

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							sLabelRemplazoPersona, 8, false);

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowPersonal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowPersonal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							sMoPenalidadRemplazoPersona, 8, false);

					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 0);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 1);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 2);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 3);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 4);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 5);										
					
					if (pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona() != null && pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona().equals(ConstantesUtil.FL_IND_SI) ) {
						PoiWordUtil.removeCellBorderTB(tableDetalle, cant, 6);
						PoiWordUtil.mergeCellHorizontally(tableDetalle, cant, 5, 6);
					}else{
						PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 6);
						PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 7);					
					}
					
					
					//Fila espacio 
					cant++;
					XWPFTableRow tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							20, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"",8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 3000, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"",8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
							"",8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 3000, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1500, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tInterlineado2Row = PoiWordUtil.createTableCell(tableDetalle, tInterlineado2Row, XWPFVertAlign.CENTER,
							20, "FFFFFF", 1500, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 0);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 1);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 2);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 3);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 4);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 5);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 6);
					PoiWordUtil.removeCellBorderLR(tableDetalle, cant, 7);
					
					//Fila suma total de penalidades
					cant++;
					XWPFTableRow tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, cant, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							8, false);

					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 3000, cant, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Total de penalidades S/.", 8, false);

					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, cant, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"", 8, false);

					
					BigDecimal bdPenalidadTotal = BigDecimal.ZERO;
					BigDecimal bdStotal = bdTotal;
					if (pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona() != null && pgimLiquidacionAuxDTO.getDescFlPenalidadReemplazoPersona().equals(ConstantesUtil.FL_IND_SI) ) {
						BigDecimal bdMPenalidadPersonal = pgimLiquidacionAuxDTO.getDescMoPenalidadReemplazoPersona();
						bdPenalidadTotal = bdStotal.add(bdMPenalidadPersonal);
					}else{
						bdPenalidadTotal = bdStotal;	
						PoiWordUtil.mergeCellVertically(tableDetalle, 7, cant-3, cant-1);				
					}
					String sMoPenalidadTotal = decimalFormat.format(bdPenalidadTotal);
					tDetalleRowTotal = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTotal, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, cant, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							sMoPenalidadTotal, 8, false);

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 2, 3);
					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 2, 3);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 2, 3);
					
					PoiWordUtil.mergeCellVertically(tableDetalle, 7, 2, 3);

					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 0, 7);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 1, 4, 5);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 1, 0, 1);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 2, 3, 6);
	
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 0);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 1);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 2);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 3);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 4);
					PoiWordUtil.removeAllCellBorders(tableDetalle, cant, 5);
					PoiWordUtil.removeCellBorderTB(tableDetalle, cant, 6);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, cant, 5, 6);		
					
				}
			}
		}

		List<Long> lIdRolACapturar = new ArrayList<>();
		lIdRolACapturar.add(ConstRolLiquidacion.COORDINADOR_EMPRESA_SUPERVISORA);
		lIdRolACapturar.add(ConstRolLiquidacion.GERENTE_DIVISION);
		lIdRolACapturar.add(ConstRolLiquidacion.ESPECIALISTA_TECNICO);

		Map<Long, PgimEqpInstanciaProDTO> mapPgimEqpInstanciaProDTOFirmantes = this
				.obtenerPersonaEquipo(pgimLiquidacionAuxDTO.getIdInstanciaProceso(), lIdRolACapturar);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOCoordinador = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.COORDINADOR_EMPRESA_SUPERVISORA);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOGerente = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.GERENTE_DIVISION);

		PgimEqpInstanciaProDTO pgimEqpInstanciaProDTOEspecialista = mapPgimEqpInstanciaProDTOFirmantes
				.get(ConstRolLiquidacion.ESPECIALISTA_TECNICO);

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// FILA 1
					// ======

					// Aquí va la firma del/la coordinador/a de la empresa supervisora
					XWPFTableRow tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "«image:osifirma»", 7, false);

					// Aquí va la firma del/de la especialista/técnica
					String etiquetaFirmaEspecialista = String.format("«%s»",
					pgimEqpInstanciaProDTOEspecialista.getDescNoUsuario().toLowerCase());

					tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes,
							tableFirmantesFila1Rubricas,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, etiquetaFirmaEspecialista, 7, false);

					// Aquí va la firma del/de la gerente/a de división
					String etiquetaFirmaGerente = String.format("«%s»",
							pgimEqpInstanciaProDTOGerente.getDescNoUsuario().toLowerCase());

					tableFirmantesFila1Rubricas = PoiWordUtil.createTableCell(tableFirmantes,
							tableFirmantesFila1Rubricas,
							XWPFVertAlign.TOP, 1500, "FFFFFF", 4655, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, etiquetaFirmaGerente, 7, false);

					// FILA 2
					// ======

					// Aquí va el cargo del/la coordinador/a de la empresa supervisora
					String cargoYNombreCoordinador = String.format("%s\n%s",
							CommonsUtil.capitalizar(pgimEqpInstanciaProDTOCoordinador.getDescNoCompletoPersona()),
							pgimEqpInstanciaProDTOCoordinador.getDescNoRolProceso());

					XWPFTableRow tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 0, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, cargoYNombreCoordinador, 7, false);

					// Aquí va el cargo del/de la especialista/técnica
					tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesFila2Cargos,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 1, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimEqpInstanciaProDTOEspecialista.getDescNoRolProceso(), 7,
							false);

					// Aquí va el cargo del/de la gerente/a de división
					tableFirmantesFila2Cargos = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesFila2Cargos,
							XWPFVertAlign.CENTER, 200, "FFFFFF", 4655, 1, 2, 0, ParagraphAlignment.CENTER,
							LineSpacingRule.EXACT, 0, 0, pgimEqpInstanciaProDTOGerente.getDescNoRolProceso(), 7, false);


				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	/**
	 * Permite obtener la lista de Fichas de revisión (ficha de conformidad) por Id
	 * de instancia de proceso
	 */
	public List<PgimFichaRevisionDTO> obtenerListFichaConformidadPorInstanciaProc(Long idInstanciaProceso) {
		return this.fichaRevisionRepository.obtenerListFichaConformidadPorInstanciaProc(idInstanciaProceso,
				EValorParametro.OBFIC_RVSION.toString());
	}

	/**
	 * Permite obtener la lista de Fichas de revisión (ficha de observación con
	 * observaciones NO subsanadas) por Id de instancia de proceso
	 */
	public List<PgimFichaRevisionDTO> obtenerListFichaObservacionNoSubsanadasPorInstanciaProc(Long idInstanciaProceso) {
		return this.fichaRevisionRepository.obtenerListFichaObservacionNoSubsanadasPorInstanciaProc(idInstanciaProceso,
				EValorParametro.FIREV_FCHA_OBSRVCIONES.toString());
	}

	@Override
	public byte[] generarMatrizSupervisionPlantilla(String ruta, FiltroMatrizSupervisionDTO filtroMatrizSupervisionDTO,
			Long idTipoExtensionGen) throws Exception {

		final List<PgimCriterioSprvsionDTO> lPgimCriterioSprvsionDTO = this.hechoConstatadoService
				.obtenerMatrizSupervision(filtroMatrizSupervisionDTO.getIdSupervision());

		PgimSupervisionDTO pgimSupervisionDTO = supervisionService
				.obtenerSupervisionPorId(filtroMatrizSupervisionDTO.getIdSupervision());

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		// Obtenemos los grupos del arreglo
		List<Long> lGrupo = new LinkedList<Long>();
		for (PgimCriterioSprvsionDTO pgimCriterioSprvsionDTO : lPgimCriterioSprvsionDTO) {
			try {
				lGrupo.add(pgimCriterioSprvsionDTO.getNuOrdenGrpoCrtrio());
			} catch (Exception e) {
				log.error(e.getMessage(), e);
			}
		}

		// Quitamos los grupos repetidos
		LinkedHashSet<Long> lGrupoUnico = new LinkedHashSet<>(lGrupo);
		// Creamos lista para ordenar los grupos
		List<Long> lGrupoOrdenado = new LinkedList<Long>();
		// Se llena la lista
		lGrupoOrdenado.addAll(lGrupoUnico);
		// Se ordena la lista de los grupos
		Collections.sort(lGrupoOrdenado);

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		JSONArray list = new JSONArray();

		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		list.put(fecha_generacion_documento);

		JSONObject especialidad = new JSONObject();
		especialidad.put("mergeField", "ESPECIALIDAD");
		especialidad.put("value", pgimSupervisionDTO.getDescNoEspecialidad().toUpperCase());
		list.put(especialidad);

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		JSONObject osiexpediente = new JSONObject();
		osiexpediente.put("mergeField", "osiexpediente");
		osiexpediente.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged());
		list.put(osiexpediente);

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_detalle")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nº",
							8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 4500, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"CRITERIO", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"BASE LEGAL (D.S. Nº 024-2016-EM)", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"HECHO VERIFICADO", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"HALLAZGO/PRUEBA", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"CUMPLE", 8, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "D9D9D9", 100, 1, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 4500, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 2000, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "SÍ",
							8, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 1, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "NO",
							8, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "D9D9D9", 500, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "NA",
							8, true);

					int cant = 1;
					for (Long grupo : lGrupoOrdenado) {
						int nroItem = 0;

						for (int k = 0; k < lPgimCriterioSprvsionDTO.size(); k++) {
							// if(grupo ==
							// Float.parseFloat(lPgimCriterioSprvsionDTO.get(k).getCoMatrizGrpoCrtrio())) {
							if (grupo.intValue() == lPgimCriterioSprvsionDTO.get(k).getNuOrdenGrpoCrtrio().intValue()) {
								nroItem++;

								// Valida si es cabecera de grupo
								if (nroItem == 1) {
									cant++;
									XWPFTableRow tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, null,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 100, cant, 0, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getCoMatrizGrpoCrtrio(), 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 4500, cant, 1, 0,
											ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getNoMatrizGrpoCrtrio(), 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 2000, cant, 2, 0,
											ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 2000, cant, 3, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 2000, cant, 4, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 500, cant, 5, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 500, cant, 6, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

									tDetalleRowHeader = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowHeader,
											XWPFVertAlign.CENTER, 200, "F2F2F2", 500, cant, 7, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

									PoiWordUtil.mergeCellHorizontally(tableDetalle, cant, 1, 7);

									cant++;
									XWPFTableRow tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, null,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 100, cant, 0, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getCoMatrizCriterio(), 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 4500, cant, 1, 0,
											ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getDeMatrizCriterio(), 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 2, 0,
											ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getDeBaseLegal(), 8, false);

									String deHechoConstatado = "", deComplementoObservacion = "";

									if (lPgimCriterioSprvsionDTO.get(k).getDescDeHechoConstatado() != null) {
										deHechoConstatado = EscritorHtml.replaceLineBreakToPHtml(lPgimCriterioSprvsionDTO.get(k).getDescDeHechoConstatado());
									}

									if (lPgimCriterioSprvsionDTO.get(k).getDescDeComplementoObservacion() != null) {
										deComplementoObservacion = EscritorHtml.replaceLineBreakToPHtml(lPgimCriterioSprvsionDTO.get(k).getDescDeComplementoObservacion());
									}

									String hechoConstatado = deHechoConstatado + " " + deComplementoObservacion;

									tDetalleRowBody = PoiWordUtil.createTableCellHtml(tableDetalle, tDetalleRowBody,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 3,
									ConstantesUtil.ALINEAR_CENTER,hechoConstatado, 8, documento, "chunk0"+k+cant);

									tDetalleRowBody = PoiWordUtil.createTableCellHtml(tableDetalle, tDetalleRowBody,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 4,
									ConstantesUtil.ALINEAR_CENTER,EscritorHtml.replaceLineBreakToPHtml(lPgimCriterioSprvsionDTO.get(k).getDescDeSustento()), 8, documento, "chunk0"+k+cant+1);

									String descSi = "", descNo = "", descNa = "";
									Long idTipoCumplimiento = 0L;

									if (lPgimCriterioSprvsionDTO.get(k).getDescIdtipoCumplimiento() != null) {
										idTipoCumplimiento = lPgimCriterioSprvsionDTO.get(k)
												.getDescIdtipoCumplimiento();
									}

									if (idTipoCumplimiento.intValue() == this.valorParametroRepository
											.obtenerIdValorParametro(EValorParametro.CUMPL_NO_APLCA.toString())
											.intValue()) {
										descNa = "X";
									} else if (idTipoCumplimiento.intValue() == this.valorParametroRepository
											.obtenerIdValorParametro(EValorParametro.CUMPL_SI.toString())
											.intValue()) {
										descSi = "X";
									} else if (idTipoCumplimiento.intValue() == this.valorParametroRepository
											.obtenerIdValorParametro(EValorParametro.CUMPL_NO.toString())
											.intValue()) {
										descNo = "X";
									}

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 5, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, descSi, 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 6, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, descNo, 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 7, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, descNa, 8, false);
								} else {
									cant++;
									XWPFTableRow tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, null,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 100, cant, 0, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getCoMatrizCriterio(), 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 4500, cant, 1, 0,
											ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getDeMatrizCriterio(), 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 2, 0,
											ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
											lPgimCriterioSprvsionDTO.get(k).getDeBaseLegal(), 8, false);

									String deHechoConstatado = "", deComplementoObservacion = "";

									if (lPgimCriterioSprvsionDTO.get(k).getDescDeHechoConstatado() != null) {
										deHechoConstatado = EscritorHtml.replaceLineBreakToPHtml(lPgimCriterioSprvsionDTO.get(k).getDescDeHechoConstatado());
									}

									if (lPgimCriterioSprvsionDTO.get(k).getDescDeComplementoObservacion() != null) {
										deComplementoObservacion = EscritorHtml.replaceLineBreakToPHtml(lPgimCriterioSprvsionDTO.get(k).getDescDeComplementoObservacion());
									}

									String hechoConstatado = deHechoConstatado + deComplementoObservacion;

									tDetalleRowBody = PoiWordUtil.createTableCellHtml(tableDetalle, tDetalleRowBody,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 3,
									ConstantesUtil.ALINEAR_CENTER,hechoConstatado, 8, documento, "chunk0"+k+cant);

									tDetalleRowBody = PoiWordUtil.createTableCellHtml(tableDetalle, tDetalleRowBody,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 4,
									ConstantesUtil.ALINEAR_CENTER,EscritorHtml.replaceLineBreakToPHtml(lPgimCriterioSprvsionDTO.get(k).getDescDeSustento()), 8, documento, "chunk0"+k+cant+1);

									String descSi = "", descNo = "", descNa = "";
									Long idTipoCumplimiento = 0L;

									if (lPgimCriterioSprvsionDTO.get(k).getDescIdtipoCumplimiento() != null) {
										idTipoCumplimiento = lPgimCriterioSprvsionDTO.get(k)
												.getDescIdtipoCumplimiento();
									}

									if (idTipoCumplimiento.intValue() == this.valorParametroRepository
											.obtenerIdValorParametro(EValorParametro.CUMPL_NO_APLCA.toString())
											.intValue()) {
										descNa = "X";
									} else if (idTipoCumplimiento.intValue() == this.valorParametroRepository
											.obtenerIdValorParametro(EValorParametro.CUMPL_SI.toString())
											.intValue()) {
										descSi = "X";
									} else if (idTipoCumplimiento.intValue() == this.valorParametroRepository
											.obtenerIdValorParametro(EValorParametro.CUMPL_NO.toString())
											.intValue()) {
										descNo = "X";
									}

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 5, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, descSi, 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 6, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, descNo, 8, false);

									tDetalleRowBody = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowBody,
											XWPFVertAlign.CENTER, 200, "FFFFFF", 500, cant, 7, 0,
											ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, descNa, 8, false);
								}
							}
						}
					}

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 3, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 4, 0, 1);

					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 5, 7);

					List<Long> lSubGrupo = new LinkedList<Long>();
					for (PgimCriterioSprvsionDTO pgimCriterioSprvsionDTO : lPgimCriterioSprvsionDTO) {
						lSubGrupo.add(pgimCriterioSprvsionDTO.getNuOrdenCriterio());
					}

					// Quitamos los grupos repetidos
					LinkedHashSet<Long> lSubGrupoUnico = new LinkedHashSet<>(lSubGrupo);
					List<Long> lSubGrupoOrdenado = new LinkedList<Long>();
					lSubGrupoOrdenado.addAll(lSubGrupoUnico);

					// Invertimos el orden
					Collections.sort(lGrupoOrdenado, Collections.reverseOrder());

					// Realizamos la fusión de las celdas de la tabla
					int desde = 0;
					int hasta = 0;
					// Lista total = lista del arreglo + lista de los grupos + cabecera
					int listaTotal = lPgimCriterioSprvsionDTO.size() + lGrupoOrdenado.size() + 1;
					for (Long grupo : lGrupoOrdenado) {
						if (desde > 0 && hasta > 0) {
							desde--;
							hasta--;
						}

						for (int k = lSubGrupoOrdenado.size() - 1; k >= 0; k--) {
							int rows = 0;
							for (int l = 0; l < lPgimCriterioSprvsionDTO.size(); l++) {
								if (grupo.intValue() == lPgimCriterioSprvsionDTO.get(l).getNuOrdenGrpoCrtrio()
										.intValue()
										&& lSubGrupoOrdenado.get(k).intValue() == lPgimCriterioSprvsionDTO.get(l)
												.getNuOrdenCriterio().intValue()) {
									rows++;
								}
							}

							if (rows > 0) {
								if (desde == 0) {
									hasta = listaTotal;
									desde = listaTotal - rows;
								} else {
									hasta = listaTotal - (listaTotal - desde);
									desde = desde - rows;
								}

								PoiWordUtil.mergeCellVertically(tableDetalle, 0, (desde + 1), hasta);
								PoiWordUtil.mergeCellVertically(tableDetalle, 1, (desde + 1), hasta);
								PoiWordUtil.mergeCellVertically(tableDetalle, 2, (desde + 1), hasta);
							}
						}
					}
				}
			}
		}

		List<PgimSupervisionDTO> listaSupervisores = this.obtenerListadoFirmantes(pgimSupervisionDTO.getIdInstanciaProceso());

		//Tabla firmantes 
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					XWPFTableRow tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1200, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Documento de identidad", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1200, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Cargo", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1900, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre y apellidos", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */3500, 0, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Firma", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1200, 0, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Entidad", 8, true);

					tableFirmantesRowOne.setRepeatHeader(true);

					int cant = 0;
					if (// (listaAgenteSupervisado != null && listaAgenteSupervisado.size() > 0) ||
					(listaSupervisores != null && listaSupervisores.size() > 0)) {
						List<PgimSupervisionDTO> listaFirmantes = new LinkedList<PgimSupervisionDTO>();
						listaFirmantes = listaSupervisores;

						for (int k = 0; k < listaFirmantes.size(); k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1200, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescCoDocumentoIdentidad(), 8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1200, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescDeCargo(), 8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1900, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescNoPersona() + " "
											+ listaFirmantes.get(k).getDescApPaterno() + " "
											+ listaFirmantes.get(k).getDescApMaterno(),
									8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.TOP, 1250, "FFFFFF", /* TableWidthType.PCT, */3500, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "«image:osifirma»", 8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1300, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescEntidad(), 8, false);
						}
					} else {
						for (int k = 0; k < 5; k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3200, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1977, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
						}
					}
				}
			}
		}


		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////
		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 0;
		}else{
			alignBottom = -100;
		}

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "HORIZONTAL", alignBottom, 13000); // PLANTILLA_FORMATO_CUADRO_VERIFICACION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}


	public List<PgimSupervisionDTO> obtenerListadoFirmantes(Long idInstanciaProceso){
		String prefijo_nombre = "";

		List<PgimSupervisionDTO> listaSupervisores = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaSupervisoresOsi = eqpInstanciaProService.obtenerPersonalXRolOsi(idInstanciaProceso, ConstantesUtil.PROCESO_ROL_SUPERVISOR);

		for (PgimEqpInstanciaProDTO supeOsi : listaSupervisoresOsi) {

			if (supeOsi != null) {
				if (supeOsi.getDescNoPersona() != null) {
					if (supeOsi.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeOsi.getNoPrefijoPersonaEquipo() + " " + supeOsi.getDescNoPersona();
					} else {
						prefijo_nombre = supeOsi.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeOsi.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeOsi.getDescApPaterno());
			obj.setDescApMaterno(supeOsi.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeOsi.getNoCargoPersonaEquipo()); 
			obj.setDescEntidad("Osinergmin");
			listaSupervisores.add(obj);
		}

		List<PgimEqpInstanciaProDTO> listaSupervisoresContrato = eqpInstanciaProService.obtenerPersonalXRolContrato(idInstanciaProceso, ConstantesUtil.PROCESO_ROL_SUPERVISOR);

		for (PgimEqpInstanciaProDTO supeContr : listaSupervisoresContrato) {

			if (supeContr != null) {
				if (supeContr.getDescNoPersona() != null) {
					if (supeContr.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContr.getNoPrefijoPersonaEquipo() + " " + supeContr.getDescNoPersona();
					} else {
						prefijo_nombre = supeContr.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeContr.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContr.getDescApPaterno());
			obj.setDescApMaterno(supeContr.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeContr.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContr.getNoCargoPersonaEquipo()); 
			obj.setDescEntidad("Supervisora");
			listaSupervisores.add(obj);
		}

		//Obtener firmantes con el cargo de abogado
		List<PgimEqpInstanciaProDTO> listaSupervisoresOsiAbogado = eqpInstanciaProService.obtenerPersonalXRolOsi(idInstanciaProceso, ConstantesUtil.PROCESO_ROL_ABOGADO);

		for (PgimEqpInstanciaProDTO supeOsiAbogado : listaSupervisoresOsiAbogado) {

			if (supeOsiAbogado != null) {
				if (supeOsiAbogado.getDescNoPersona() != null) {
					if (supeOsiAbogado.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeOsiAbogado.getNoPrefijoPersonaEquipo() + " " + supeOsiAbogado.getDescNoPersona().toUpperCase();
					} else {
						prefijo_nombre = supeOsiAbogado.getDescNoPersona().toUpperCase();
					}
				} else {
					prefijo_nombre = supeOsiAbogado.getDescNoPersona().toUpperCase();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeOsiAbogado.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(supeOsiAbogado.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(supeOsiAbogado.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeOsiAbogado.getNoCargoPersonaEquipo());
			obj.setDescEntidad("Osinergmin");
			listaSupervisores.add(obj);
		}

		List<PgimEqpInstanciaProDTO> listaSupervisoresContratoAbogado = eqpInstanciaProService.obtenerPersonalXRolContrato(idInstanciaProceso, ConstantesUtil.PROCESO_ROL_ABOGADO);

		for (PgimEqpInstanciaProDTO supeContrAbogado : listaSupervisoresContratoAbogado) {

			if (supeContrAbogado != null) {
				if (supeContrAbogado.getDescNoPersona() != null) {
					if (supeContrAbogado.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContrAbogado.getNoPrefijoPersonaEquipo() + " " + supeContrAbogado.getDescNoPersona().toUpperCase();
					} else {
						prefijo_nombre = supeContrAbogado.getDescNoPersona().toUpperCase();
					}
				} else {
					prefijo_nombre = supeContrAbogado.getDescNoPersona().toUpperCase();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContrAbogado.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(supeContrAbogado.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(supeContrAbogado.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContrAbogado.getNoCargoPersonaEquipo());
			obj.setDescEntidad("Supervisora");
			listaSupervisores.add(obj);
		}

		return listaSupervisores;
	}

	@Override
	public byte[] generarDocRequerimientoPlantilla(String ruta, PgimSupervisionDTO pgimSupervisionDTO,
			Long idTipoExtensionGen) throws Exception {
		SimpleDateFormat hm = new SimpleDateFormat("HH:mm");
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");

		String prefijo_nombre = "";

		PgimSupervisionDTO valoresDocumentosRequeridos = supervisionService
				.obtenerValoresActaSupervision(pgimSupervisionDTO.getIdSupervision());

		PgimSolicitudDocDTO pgimSolicitudDocDTO = documentoRequeridoService
				.obtenerSolicitudDocxIdSupervision(pgimSupervisionDTO.getIdSupervision());

		List<PgimItemSolicitudDocDTO> lPgimItemSolicitudDocDTO = documentoRequeridoService
				.listarItemSolicitudDocxIdSolicitudDoc(pgimSolicitudDocDTO.getIdSolicitudDoc());

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		List<PgimUbigeoDTO> listaUbigeos = ubigeoService
				.obtenerUbigeoPorIdSupervision(pgimSupervisionDTO.getIdSupervision());
		Set<String> setDistrito = new LinkedHashSet<>();
		Set<String> setProvincia = new LinkedHashSet<>();
		Set<String> setDepartamento = new LinkedHashSet<>();
		for (PgimUbigeoDTO ubigeo : listaUbigeos) {
			setDistrito.add(ubigeo.getDescDistrito());
			setProvincia.add(ubigeo.getDescProvincia());
			setDepartamento.add(ubigeo.getDescDepartamento());
		}

		String departamentos = CommonsUtil.setListToString(setDepartamento);
		String provincias = CommonsUtil.setListToString(setProvincia);
		String distritos = CommonsUtil.setListToString(setDistrito);

		List<PgimInvolucradoSupervDTO> listaTrabajadores = involucradoSupervService
				.obtenerRepresentantesTrabajadores(pgimSupervisionDTO.getIdSupervision(), 357L);

		List<PgimInvolucradoSupervDTO> listaAgenteSupervisado = involucradoSupervService
				.obtenerRepresentantesAgenteSupervisado(pgimSupervisionDTO.getIdSupervision(), 357L);

		List<PgimSupervisionDTO> listaSupervisores = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaSupervisoresOsi = eqpInstanciaProService
				.obtenerPersonalXRolOsi(pgimSupervisionDTO.getIdInstanciaProceso(), 4L);
		for (PgimEqpInstanciaProDTO supeOsi : listaSupervisoresOsi) {

			if (supeOsi != null) {
				if (supeOsi.getDescNoPersona() != null) {
					if (supeOsi.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeOsi.getNoPrefijoPersonaEquipo() + " " + supeOsi.getDescNoPersona();
					} else {
						prefijo_nombre = supeOsi.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeOsi.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre); // STORY: PGIM-6164: Gen. de solicitud de documentos con fecha generación, cargo y prefijo de firmantes
			obj.setDescApPaterno(supeOsi.getDescApPaterno());
			obj.setDescApMaterno(supeOsi.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeOsi.getNoCargoPersonaEquipo()); // STORY: PGIM-6164: Gen. de solicitud de documentos con fecha generación, cargo y prefijo de firmantes
			listaSupervisores.add(obj);
		}

		List<PgimEqpInstanciaProDTO> listaSupervisoresContrato = eqpInstanciaProService
				.obtenerPersonalXRolContrato(pgimSupervisionDTO.getIdInstanciaProceso(), 4L);
		for (PgimEqpInstanciaProDTO supeContr : listaSupervisoresContrato) {

			if (supeContr != null) {
				if (supeContr.getDescNoPersona() != null) {
					if (supeContr.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContr.getNoPrefijoPersonaEquipo() + " " + supeContr.getDescNoPersona();
					} else {
						prefijo_nombre = supeContr.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeContr.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre); // STORY: PGIM-6164: Gen. de solicitud de documentos con fecha generación, cargo y prefijo de firmantes
			obj.setDescApPaterno(supeContr.getDescApPaterno());
			obj.setDescApMaterno(supeContr.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeContr.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContr.getNoCargoPersonaEquipo()); // STORY: PGIM-6164: Gen. de solicitud de documentos con fecha generación, cargo y prefijo de firmantes
			listaSupervisores.add(obj);
		}

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		JSONArray list = new JSONArray();

		// STORY: PGIM-6164: Gen. de solicitud de documentos con fecha generación, cargo y prefijo de firmantes
		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		list.put(fecha_generacion_documento);

		JSONObject especialidad = new JSONObject();
		especialidad.put("mergeField", "OSIEXPEDIENTE");
		especialidad.put("value", valoresDocumentosRequeridos.getDescNuExpedienteSiged());
		list.put(especialidad);

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());	

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_supervision")) {
					paragraph.removeRun(j);

					XWPFTable tableSupervision = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);
					//Primera fila
					XWPFTableRow tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 0, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Agente fiscalizado", 8, true);
					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4329, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							valoresDocumentosRequeridos.getDescAgenteSupervisadoNoRazonSocial(), 8, false);
					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Fecha de requerimiento", 8, true);

					String feSolicitudDocumentacion = "";
					if (pgimSolicitudDocDTO.getFeSolicitudDocumentacion() != null) {
						feSolicitudDocumentacion = sdf.format(pgimSolicitudDocDTO.getFeSolicitudDocumentacion());
					}
					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, 0, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, feSolicitudDocumentacion, 8, false);

					//Segunda fila
					XWPFTableRow tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 1, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Unidad fiscalizada", 8, true);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4329, 1, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+valoresDocumentosRequeridos.getDescNoUnidadMinera(),
							8, false);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, 1, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Hora", 8, true);

					String hoSolicitudDocumentacion = "";
					if (pgimSolicitudDocDTO.getFeSolicitudDocumentacion() != null) {
						hoSolicitudDocumentacion = hm.format(pgimSolicitudDocDTO.getFeSolicitudDocumentacion());
					}
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, 1, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, hoSolicitudDocumentacion, 8, false);

					//Tercera fila
					XWPFTableRow tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 2, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Tipo", 8, true);
					tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTree,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 2, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, pgimUnidadMineraDTO.getDescIdTipoUnidadMinera(), 8, false);
					tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTree,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 2, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
					tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTree,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 2, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
							
					PoiWordUtil.mergeCellVertically(tableSupervision, 2, 1, 2);
					PoiWordUtil.mergeCellVertically(tableSupervision, 3, 1, 2);

					//Cuarta fila
					XWPFTableRow tableSupervisionRowFour = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 3, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Distrito", 8, true);
					tableSupervisionRowFour = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFour,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 3, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, distritos, 8, false);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 3, 1, 3);

					//Quinta fila
					XWPFTableRow tableSupervisionRowFive = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 4, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Provincia", 8, true);
					tableSupervisionRowFive = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFive,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 4, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, provincias, 8, false);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 4, 1, 3);

					//Sexta fila
					XWPFTableRow tableSupervisionRowSix = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 5, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Región", 8, true);
					tableSupervisionRowSix = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSix,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 5, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, departamentos, 8, false);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 5, 1, 3);

					//Septima fila
					XWPFTableRow tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 6, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Representante(s) del Agente fiscalizado ", 8, true);
					tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSeven,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */5270, 6, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre (s) y apellido(s)", 8,
							true);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 6, 1, 2);
					tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSeven,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */1317, 6, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "DNI", 8, true);

					int cant = 6;
					if (listaAgenteSupervisado != null && listaAgenteSupervisado.size() > 0) {
						for (int k = 0; k < listaAgenteSupervisado.size(); k++) {
							cant++;
							XWPFTableRow tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */5270, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAgenteSupervisado.get(k).getDescIdTipoPrefijoInvolucrado() + " " +
									listaAgenteSupervisado.get(k).getDescNoPersona() + " "
											+ listaAgenteSupervisado.get(k).getDescApPaterno() + " "
											+ listaAgenteSupervisado.get(k).getDescApMaterno(),
									8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cant, 1, 2);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, cant, 2, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									listaAgenteSupervisado.get(k).getDescCoDocumentoIdentidad(), 8, false);
						}
					} else {
						for (int k = 0; k < 3; k++) {
							cant++;
							XWPFTableRow tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */5270, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cant, 1, 2);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}

					PoiWordUtil.mergeCellVertically(tableSupervision, 0, 6, cant);

					int cantTwo = cant + 1;
					XWPFTableRow tableSupervisionRowEight = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cantTwo, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Fiscalizador(es)", 8, true);
					tableSupervisionRowEight = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowEight,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */5270, cantTwo, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre (s) y apellido(s)", 8,
							true);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, cantTwo, 1, 2);
					tableSupervisionRowEight = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowEight,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */1317, cantTwo, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "DNI", 8, true);

					int cantThree = cantTwo;
					if (listaSupervisores != null && listaSupervisores.size() > 0) {
						for (int k = 0; k < listaSupervisores.size(); k++) {
							cantThree++;
							XWPFTableRow tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cantThree, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */5270, cantThree, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									listaSupervisores.get(k).getDescNoPersona() + " "
											+ listaSupervisores.get(k).getDescApPaterno() + " "
											+ listaSupervisores.get(k).getDescApMaterno(),
									8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cantThree, 1, 2);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */1317, cantThree, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, listaSupervisores.get(k).getDescCoDocumentoIdentidad(),
									8, false);
						}
					} else {
						for (int k = 0; k < 3; k++) {
							cantThree++;
							XWPFTableRow tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cantThree, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */5270, cantThree, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cantThree, 1, 2);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */1317, cantThree, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}

					PoiWordUtil.mergeCellVertically(tableSupervision, 0, cantTwo, cantThree);
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_documentacion")) {
					paragraph.removeRun(j);

					XWPFTable tableDocumentacion = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					XWPFTableRow tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */941, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "N°", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */7058, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "DOCUMENTACIÓN", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Fecha de entrega", 8, true);

					int cant = 0;
					if (lPgimItemSolicitudDocDTO != null && lPgimItemSolicitudDocDTO.size() > 0) {
						for (PgimItemSolicitudDocDTO pgimItemSolicitudDocDTO : lPgimItemSolicitudDocDTO) {
							cant++;
							XWPFTableRow tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, String.valueOf(cant), 8,
									false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */7058, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimItemSolicitudDocDTO.getDeSolicitudObservacion(), 8,
									false);

							String feSolicitudDocumentacion = "";
							if (pgimItemSolicitudDocDTO.getFeSolicitudDocumentacion() != null) {
								feSolicitudDocumentacion = sdf
										.format(pgimItemSolicitudDocDTO.getFeSolicitudDocumentacion());
							}
							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */1411, cant, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, feSolicitudDocumentacion, 9, false);
						}
					} else {
						for (int k = 0; k < 3; k++) {
							cant++;
							XWPFTableRow tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */7058, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */1411, cant, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}
				}
			}
		}

		// STORY: PGIM-6796: Gen. de solicitud de documentos con propiedad observación // Se retiro esta observación por orden de CARLOS CALERO
		// for (int i = 0; i < paragraphs.size(); i++) {
		// 	XWPFParagraph paragraph = paragraphs.get(i);
		// 	List<XWPFRun> runs = paragraph.getRuns();
		// 	for (int j = 0; j < runs.size(); j++) {
		// 		XWPFRun run = runs.get(j);
		// 		String text = run.getText(run.getTextPosition());
		// 		if (text != null && text.contains("tabla_observaciones")) {
		// 			paragraph.removeRun(j);

		// 			XWPFTable tableObservaciones = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,
		// 					/* TableRowAlign.CENTER, TableWidthType.PCT, */ 100);

		// 			PoiWordUtil.createTableCell(tableObservaciones, null, XWPFVertAlign.CENTER, 200, "FFFFFF",
		// 					/* TableWidthType.PCT, */9410, 0, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0,
		// 					0, "OBSERVACIONES ADICIONALES", 8, true);

		// 			PoiWordUtil.createTableCell(tableObservaciones, null, XWPFVertAlign.CENTER, 200, "FFFFFF",
		// 					/* TableWidthType.PCT, */9410, 1, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0,
		// 					0, pgimSolicitudDocDTO.getDeSolicitudObservacion(), 8, false);

		// 		}
		// 	}
		// }

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,9000);

					XWPFTableRow tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Documento de identidad¹", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Cargo²", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */3200, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre y apellidos", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1977, 0, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Firma", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Entidad", 8, true);

					tableFirmantesRowOne.setRepeatHeader(true);

					int cant = 0;
					if ((listaAgenteSupervisado != null && listaAgenteSupervisado.size() > 0)
							|| (listaSupervisores != null && listaSupervisores.size() > 0)) {
						List<PgimSupervisionDTO> listaFirmantes = new LinkedList<PgimSupervisionDTO>();

						for (PgimSupervisionDTO supervisores : listaSupervisores) {
							supervisores.setDescEntidad("Supervisora");
							listaFirmantes.add(supervisores);
						}

						for (PgimInvolucradoSupervDTO agente : listaAgenteSupervisado) {
							PgimSupervisionDTO obj = new PgimSupervisionDTO();
							obj.setDescNoPersona(agente.getDescIdTipoPrefijoInvolucrado() + " " + agente.getDescNoPersona());
							obj.setDescApPaterno(agente.getDescApPaterno());
							obj.setDescApMaterno(agente.getDescApMaterno());
							obj.setDescCoDocumentoIdentidad(agente.getDescCoDocumentoIdentidad());
							obj.setDescEntidad("Titular minero");
							obj.setDescDeCargo(agente.getDeCargo());
							listaFirmantes.add(obj);
						}

						for (PgimInvolucradoSupervDTO tra : listaTrabajadores) {
							PgimSupervisionDTO obj = new PgimSupervisionDTO();
							obj.setDescNoPersona(tra.getDescIdTipoPrefijoInvolucrado() + " " + tra.getDescNoPersona());
							obj.setDescApPaterno(tra.getDescApPaterno());
							obj.setDescApMaterno(tra.getDescApMaterno());
							obj.setDescCoDocumentoIdentidad(tra.getDescCoDocumentoIdentidad());
							obj.setDescEntidad("Comité de Seguridad y Salud Ocupacional");
							obj.setDescDeCargo(tra.getDeCargo());
							listaFirmantes.add(obj);
						}

						for (int k = 0; k < listaFirmantes.size(); k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescCoDocumentoIdentidad(), 8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescDeCargo(), 8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3200, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescNoPersona() + " "
											+ listaFirmantes.get(k).getDescApPaterno() + " "
											+ listaFirmantes.get(k).getDescApMaterno(),
									8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1977, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescEntidad(), 8, false);
						}
					} else {
						for (int k = 0; k < 5; k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3200, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1977, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
						}
					}
				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 0;
		}else{
			alignBottom = -100;
		}

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", alignBottom, 8000); // PLANTILLA_REQUERIMIENTO_DOCUMENTACION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	//Caso : Generar RECEPCIÓN DE DOCUMENTACIÓN
	@Override
	public byte[] generarDocRecibidosPlantilla(String ruta, PgimSupervisionDTO pgimSupervisionDTO,
			Long idTipoExtensionGen) throws Exception {

		SimpleDateFormat hm = new SimpleDateFormat("HH:mm");
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		String prefijo_nombre = "";

		PgimSupervisionDTO valoresDocumentosRecibidos = supervisionService
				.obtenerValoresActaSupervision(pgimSupervisionDTO.getIdSupervision());

		PgimSolicitudDocDTO pgimSolicitudDocDTO = documentoRequeridoService
				.obtenerSolicitudDocxIdSupervision(pgimSupervisionDTO.getIdSupervision());

		List<PgimItemSolicitudDocDTO> lPgimItemSolicitudDocDTO = documentoRequeridoService
				.listarItemSolicitudDocxIdSolicitudDoc(pgimSolicitudDocDTO.getIdSolicitudDoc());

		List<PgimUbigeoDTO> listaUbigeos = ubigeoService
				.obtenerUbigeoPorIdSupervision(pgimSupervisionDTO.getIdSupervision());
		Set<String> setDistrito = new LinkedHashSet<>();
		Set<String> setProvincia = new LinkedHashSet<>();
		Set<String> setDepartamento = new LinkedHashSet<>();
		for (PgimUbigeoDTO ubigeo : listaUbigeos) {
			setDistrito.add(ubigeo.getDescDistrito());
			setProvincia.add(ubigeo.getDescProvincia());
			setDepartamento.add(ubigeo.getDescDepartamento());
		}

		String departamentos = CommonsUtil.setListToString(setDepartamento);
		String provincias = CommonsUtil.setListToString(setProvincia);
		String distritos = CommonsUtil.setListToString(setDistrito);

		List<PgimInvolucradoSupervDTO> listaTrabajadores = involucradoSupervService
				.obtenerRepresentantesTrabajadores(pgimSupervisionDTO.getIdSupervision(), 358L);

		List<PgimInvolucradoSupervDTO> listaAgenteSupervisado = involucradoSupervService
				.obtenerRepresentantesAgenteSupervisado(pgimSupervisionDTO.getIdSupervision(), 358L);

		List<PgimSupervisionDTO> listaSupervisores = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaSupervisoresOsi = eqpInstanciaProService
				.obtenerPersonalXRolOsi(pgimSupervisionDTO.getIdInstanciaProceso(), 4L);
		for (PgimEqpInstanciaProDTO supeOsi : listaSupervisoresOsi) {

			// STORY: PGIM-6165: Gen. de recepción de documentos con fecha generación, cargo y prefijo de firmantes
			if (supeOsi != null) {
				if (supeOsi.getDescNoPersona() != null) {
					if (supeOsi.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeOsi.getNoPrefijoPersonaEquipo() + " " + supeOsi.getDescNoPersona();
					} else {
						prefijo_nombre = supeOsi.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeOsi.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeOsi.getDescApPaterno());
			obj.setDescApMaterno(supeOsi.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeOsi.getNoCargoPersonaEquipo());
			listaSupervisores.add(obj);
		}

		List<PgimEqpInstanciaProDTO> listaSupervisoresContrato = eqpInstanciaProService
				.obtenerPersonalXRolContrato(pgimSupervisionDTO.getIdInstanciaProceso(), 4L);
		for (PgimEqpInstanciaProDTO supeContr : listaSupervisoresContrato) {

			// STORY: PGIM-6165: Gen. de recepción de documentos con fecha generación, cargo y prefijo de firmantes
			if (supeContr != null) {
				if (supeContr.getDescNoPersona() != null) {
					if (supeContr.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContr.getNoPrefijoPersonaEquipo() + " " + supeContr.getDescNoPersona();
					} else {
						prefijo_nombre = supeContr.getDescNoPersona();
					}
				} else {
					prefijo_nombre = supeContr.getDescNoPersona();
				}
			}

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContr.getDescApPaterno());
			obj.setDescApMaterno(supeContr.getDescApMaterno());
			obj.setDescCoDocumentoIdentidad(supeContr.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContr.getNoCargoPersonaEquipo());
			listaSupervisores.add(obj);
		}

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		JSONArray list = new JSONArray();

		// STORY: PGIM-6165: Gen. de recepción de documentos con fecha generación, cargo y prefijo de firmantes
		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		list.put(fecha_generacion_documento);

		JSONObject especialidad = new JSONObject();
		especialidad.put("mergeField", "OSIEXPEDIENTE");
		especialidad.put("value", valoresDocumentosRecibidos.getDescNuExpedienteSiged());
		list.put(especialidad);

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());	

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_supervision")) {
					paragraph.removeRun(j);

					XWPFTable tableSupervision = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					//Primera fila
					XWPFTableRow tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 0, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Agente fiscalizado", 8, true);
					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4329, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							valoresDocumentosRecibidos.getDescAgenteSupervisadoNoRazonSocial(), 8, false);
					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Fecha", 8, true);

					String feRecepcionDocumentacion = "";
					if (pgimSolicitudDocDTO.getFeRecepcionDocumentacion() != null) {
						feRecepcionDocumentacion = sdf.format(pgimSolicitudDocDTO.getFeRecepcionDocumentacion());
					}
					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, 0, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, feRecepcionDocumentacion, 8, false);

					//Segunda fila
					XWPFTableRow tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 1, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Unidad fiscalizada", 8, true);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4329, 1, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+valoresDocumentosRecibidos.getDescNoUnidadMinera(),
							8, false);
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, 1, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Hora", 8, true);

					String hoRecepcionDocumentacion = "";
					if (pgimSolicitudDocDTO.getFeRecepcionDocumentacion() != null) {
						hoRecepcionDocumentacion = hm.format(pgimSolicitudDocDTO.getFeRecepcionDocumentacion());
					}
					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, 1, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, hoRecepcionDocumentacion, 8, false);

					//Tercera fila
					XWPFTableRow tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 2, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Tipo", 8, true);
					tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4329, 2, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							pgimUnidadMineraDTO.getDescIdTipoUnidadMinera(), 8, false);
					tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, 2, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);
					tableSupervisionRowTree = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTree,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */941, 2, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);

					PoiWordUtil.mergeCellVertically(tableSupervision, 2, 1, 2);
					PoiWordUtil.mergeCellVertically(tableSupervision, 3, 1, 2);

					//Cuarta fila
					XWPFTableRow tableSupervisionRowFour = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 3, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Distrito", 8, true);
					tableSupervisionRowFour = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFour,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 3, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, distritos, 8, false);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 3, 1, 3);

					//Quinta fila
					XWPFTableRow tableSupervisionRowFive = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 4, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Provincia", 8, true);
					tableSupervisionRowFive = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFive,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 4, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, provincias, 8, false);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 4, 1, 3);

					//Sexta fila
					XWPFTableRow tableSupervisionRowSix = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 5, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Región", 8, true);
					tableSupervisionRowSix = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSix,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */6587, 5, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, departamentos, 8, false);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 5, 1, 3);

					//Septima fila
					XWPFTableRow tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, 6, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Representante(s) del Agente fiscalizado ", 8, true);
					tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSeven,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */5270, 6, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre (s) y apellido(s)", 8,
							true);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, 6, 1, 2);
					tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSeven,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */1317, 6, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "DNI", 8, true);

					int cant = 6;
					if (listaAgenteSupervisado != null && listaAgenteSupervisado.size() > 0) {
						for (int k = 0; k < listaAgenteSupervisado.size(); k++) {
							cant++;
							XWPFTableRow tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */5270, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAgenteSupervisado.get(k).getDescIdTipoPrefijoInvolucrado() + " " +
									listaAgenteSupervisado.get(k).getDescNoPersona() + " "
											+ listaAgenteSupervisado.get(k).getDescApPaterno() + " "
											+ listaAgenteSupervisado.get(k).getDescApMaterno(),
									8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cant, 1, 2);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, cant, 2, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									listaAgenteSupervisado.get(k).getDescCoDocumentoIdentidad(), 8, false);
						}
					} else {
						for (int k = 0; k < 3; k++) {
							cant++;
							XWPFTableRow tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */5270, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cant, 1, 2);
							tableSupervisionRowAS = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowAS,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */1317, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}

					PoiWordUtil.mergeCellVertically(tableSupervision, 0, 6, cant);

					int cantTwo = cant + 1;
					XWPFTableRow tableSupervisionRowEight = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cantTwo, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Fiscalizador(es)", 8, true);
					tableSupervisionRowEight = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowEight,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */5270, cantTwo, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre (s) y apellido(s)", 8,
							true);
					PoiWordUtil.mergeCellHorizontally(tableSupervision, cantTwo, 1, 2);
					tableSupervisionRowEight = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowEight,
							XWPFVertAlign.BOTTOM, 200, "FFFFFF", /* TableWidthType.PCT, */1317, cantTwo, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "DNI", 8, true);

					int cantThree = cantTwo;
					if (listaSupervisores != null && listaSupervisores.size() > 0) {
						for (int k = 0; k < listaSupervisores.size(); k++) {
							cantThree++;
							XWPFTableRow tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cantThree, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */5270, cantThree, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									listaSupervisores.get(k).getDescNoPersona() + " "
											+ listaSupervisores.get(k).getDescApPaterno() + " "
											+ listaSupervisores.get(k).getDescApMaterno(),
									8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cantThree, 1, 2);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */1317, cantThree, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, listaSupervisores.get(k).getDescCoDocumentoIdentidad(),
									8, false);
						}
					} else {
						for (int k = 0; k < 3; k++) {
							cantThree++;
							XWPFTableRow tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */2823, cantThree, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, true);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */5270, cantThree, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							PoiWordUtil.mergeCellHorizontally(tableSupervision, cantThree, 1, 2);
							tableSupervisionRowSUPE = PoiWordUtil.createTableCell(tableSupervision,
									tableSupervisionRowSUPE, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */1317, cantThree, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}

					PoiWordUtil.mergeCellVertically(tableSupervision, 0, cantTwo, cantThree);
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_documentacion")) {
					paragraph.removeRun(j);

					XWPFTable tableDocumentacion = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					XWPFTableRow tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */470, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "N°", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */4705, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Documentación de acta de requerimiento", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */470, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Entregado", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */470, 0, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */941, 0, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Fecha de recepción", 8, true);

					tableDocumentacionRowOne = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */2354, 0, 5, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Detalle", 8, true);

					XWPFTableRow tableDocumentacionRowTwo = PoiWordUtil.createTableCell(tableDocumentacion, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */470, 1, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tableDocumentacionRowTwo = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */4705, 1, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tableDocumentacionRowTwo = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */470, 1, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Sí", 8, true);

					tableDocumentacionRowTwo = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */470, 1, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "No", 8, true);

					tableDocumentacionRowTwo = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */941, 1, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

					tableDocumentacionRowTwo = PoiWordUtil.createTableCell(tableDocumentacion, tableDocumentacionRowTwo,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */2354, 1, 5, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 8, true);

					int cant = 1;
					int row = 0;
					if (lPgimItemSolicitudDocDTO != null && lPgimItemSolicitudDocDTO.size() > 0) {
						for (PgimItemSolicitudDocDTO pgimItemSolicitudDocDTO : lPgimItemSolicitudDocDTO) {
							cant++;
							row++;
							XWPFTableRow tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */470, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, String.valueOf(row), 8,
									false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */4705, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimItemSolicitudDocDTO.getDeSolicitudObservacion(), 8,
									false);

							String si = "", no = "";
							if (pgimItemSolicitudDocDTO.getEsRecibido().equals("0")) {
								no = "X";
							} else if (pgimItemSolicitudDocDTO.getEsRecibido().equals("1")) {
								si = "X";
							}
							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */470, cant, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, si, 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */470, cant, 3, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, no, 8, false);

							String feRecepcionDocumentacion = "";
							if (pgimItemSolicitudDocDTO.getFeRecepcionDocumentacion() != null) {
								feRecepcionDocumentacion = sdf
										.format(pgimItemSolicitudDocDTO.getFeRecepcionDocumentacion());
							}
							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */941, cant, 4, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, feRecepcionDocumentacion, 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.CENTER, 200, "FFFFFF",
									/* TableWidthType.PCT, */2354, cant, 5, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimItemSolicitudDocDTO.getDeRecepcionObservacion(), 8,
									false);
						}
					} else {
						for (int k = 0; k < 3; k++) {
							cant++;
							XWPFTableRow tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */470, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */4705, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */470, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */470, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */941, cant, 4, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDocumentacionRow = PoiWordUtil.createTableCell(tableDocumentacion,
									tableDocumentacionRow, XWPFVertAlign.BOTTOM, 200, "FFFFFF",
									/* TableWidthType.PCT, */2354, cant, 5, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}

					PoiWordUtil.mergeCellVertically(tableDocumentacion, 0, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDocumentacion, 1, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDocumentacion, 4, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDocumentacion, 5, 0, 1);

					PoiWordUtil.mergeCellHorizontally(tableDocumentacion, 0, 2, 3);
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_observaciones")) {
					paragraph.removeRun(j);

					XWPFTable tableObservaciones = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					PoiWordUtil.createTableCell(tableObservaciones, null, XWPFVertAlign.CENTER, 200, "FFFFFF",
							/* TableWidthType.PCT, */9410, 0, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0,
							0, "OBSERVACIONES ADICIONALES", 8, true);

					PoiWordUtil.createTableCell(tableObservaciones, null, XWPFVertAlign.CENTER, 200, "FFFFFF",
							/* TableWidthType.PCT, */9410, 1, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0,
							0, pgimSolicitudDocDTO.getDeRecepcionObservacion(), 8, false);

				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,9000);

					XWPFTableRow tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Documento de identidad¹", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Cargo²", 9, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */3200, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre y apellidos", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1977, 0, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Firma", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1411, 0, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Entidad", 8, true);

					tableFirmantesRowOne.setRepeatHeader(true);

					int cant = 0;
					if ((listaAgenteSupervisado != null && listaAgenteSupervisado.size() > 0)
							|| (listaSupervisores != null && listaSupervisores.size() > 0)) {
						List<PgimSupervisionDTO> listaFirmantes = new LinkedList<PgimSupervisionDTO>();

						for (PgimSupervisionDTO supervisores : listaSupervisores) {
							supervisores.setDescEntidad("Supervisora");
							listaFirmantes.add(supervisores);
						}

						for (PgimInvolucradoSupervDTO agente : listaAgenteSupervisado) {
							PgimSupervisionDTO obj = new PgimSupervisionDTO();
							obj.setDescNoPersona(agente.getDescIdTipoPrefijoInvolucrado() + " " + agente.getDescNoPersona());
							obj.setDescApPaterno(agente.getDescApPaterno());
							obj.setDescApMaterno(agente.getDescApMaterno());
							obj.setDescCoDocumentoIdentidad(agente.getDescCoDocumentoIdentidad());
							obj.setDescEntidad("Titular minero");
							obj.setDescDeCargo(agente.getDeCargo());
							listaFirmantes.add(obj);
						}

						for (PgimInvolucradoSupervDTO tra : listaTrabajadores) {
							PgimSupervisionDTO obj = new PgimSupervisionDTO();
							obj.setDescNoPersona(tra.getDescIdTipoPrefijoInvolucrado() + " " + tra.getDescNoPersona());
							obj.setDescApPaterno(tra.getDescApPaterno());
							obj.setDescApMaterno(tra.getDescApMaterno());
							obj.setDescCoDocumentoIdentidad(tra.getDescCoDocumentoIdentidad());
							obj.setDescEntidad("Comité de Seguridad y Salud Ocupacional");
							obj.setDescDeCargo(tra.getDeCargo());
							listaFirmantes.add(obj);
						}

						for (int k = 0; k < listaFirmantes.size(); k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescCoDocumentoIdentidad(), 8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescDeCargo(), 8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3200, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescNoPersona() + " "
											+ listaFirmantes.get(k).getDescApPaterno() + " "
											+ listaFirmantes.get(k).getDescApMaterno(),
									8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1977, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, false);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescEntidad(), 8, false);
						}
					} else {
						for (int k = 0; k < 5; k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3200, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1977, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
						}
					}
				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 0;
		}else{
			alignBottom = -100;
		}

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", alignBottom, 8000); // PLANTILLA_RECEPCION_DOCUMENTACION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////
		

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public ResultadoRevertirFirmaDigital2 revertirFirmaDocumentoSiged(DatosRevertirFirmaDigitalInRO2 inRo,
			String nroExpedienteSiged, String idDocumentoSiged, Long idProceso, AuditoriaDTO auditoriaDTO)
			throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(nroExpedienteSiged);
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Revertir firma",
				auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		// Obtener archivo principal del documento
		Long idArchivoIter = -1L;
		Long idArchivo = Long.MAX_VALUE;
		Archivo archivoInicial = null;
		for (Documento documento : expedienteOutRO.getDocumentos().getListaDocumento()) {
			if (documento.getIdDocumento().equals(idDocumentoSiged)) {
				for (Archivo archivo : documento.getArchivos()) {
					idArchivoIter = Long.parseLong(archivo.getIdArchivo());
					if (idArchivoIter < idArchivo) {
						idArchivo = idArchivoIter;
						archivoInicial = archivo;
					}
				}
			}
		}
		// Validar
		if (idArchivo.compareTo(Long.MAX_VALUE) != 0) {
			// Completar la data del documento
			inRo.setArchivo(archivoInicial.getIdArchivo());
		} else {
			throw new PgimException(TipoResultado.ERROR, "No se ha encontrado el archivo inicial del documento Siged"); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}
		inRo.setIdUsuario(auditoriaDTO.getCoUsuarioSiged());
		ResultadoRevertirFirmaDigital2 objResultado = new ResultadoRevertirFirmaDigital2();

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"REVERTIR_FIRMA: nroExpediente/idDocumento-" + nroExpedienteSiged + "/" + idDocumentoSiged));

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_REVERTIR_FIRMA;

		try {
			URL url = new URL(serverUrl + servicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			String xmlStringReq = DatosRevertirFirmaDigitalInRO2.getStringXmlFile(inRo);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"REVERTIR_FIRMA: nroExpediente/idDocumento-" + nroExpedienteSiged + "/"
								+ idDocumentoSiged));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "resultadoRevertirFirmaDigital", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "resultadoRevertirFirmaDigital", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "resultadoRevertirFirmaDigital", "errorCode"));

			String claseXMLPadre = "pe.gob.osinergmin.pgim.siged.ArchivoRevertir";
			String claseXMLHijo = "";
			String nodoHijo = "";
			String methodsOff = "";
			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				NodeList nodeList = doc.getElementsByTagName("archivosRevertir");
				List<ArchivoRevertir> list = new LinkedList<ArchivoRevertir>();
				for (int i = 0; i < nodeList.getLength(); i++) {
					List<Object> listaHija = new LinkedList<Object>();
					if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) nodeList.item(i);
						list.add((ArchivoRevertir) CommonsUtil.getXML2Object(nodeList.item(i), claseXMLPadre,
								claseXMLHijo, nodoHijo, methodsOff, element, listaHija));
					}
				}
				objResultado.setArchivosRevertir(list);
			} else {
				// Message: "El formato obtenido no contiene Documentos";
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged,
						"REVERTIR_FIRMA ", objResultado.getErrorCode(), objResultado.getMessage());
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
				objResultado.setMessage(mensajeErrorSiged);
			}
			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"REVERTIR_FIRMA: nroExpediente/idDocumento-" + nroExpedienteSiged + "/" + idDocumentoSiged));

		return objResultado;
	}

	@Override
	public ResultadoRevertirFirmaDigital2 revertirFirmaArchivoSiged_old(DatosRevertirFirmaDigitalInRO2 inRo,
			String nroExpedienteSiged, String idArchivoSiged, Long idProceso, AuditoriaDTO auditoriaDTO)
			throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(nroExpedienteSiged);
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Revertir firma",
				auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException("error", expedienteOutRO.getMessage());
		}

		inRo.setIdUsuario(auditoriaDTO.getCoUsuarioSiged());
		ResultadoRevertirFirmaDigital2 objResultado = new ResultadoRevertirFirmaDigital2();

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"REVERTIR_FIRMA: nroExpediente/idArchivoSiged-" + nroExpedienteSiged + "/"
						+ idArchivoSiged));

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_REVERTIR_FIRMA;

		try {
			URL url = new URL(serverUrl + servicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			String xmlStringReq = DatosRevertirFirmaDigitalInRO2.getStringXmlFile(inRo);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"REVERTIR_FIRMA: nroExpediente/idArchivoSiged-" + nroExpedienteSiged + "/" + idArchivoSiged));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "resultadoRevertirFirmaDigital", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "resultadoRevertirFirmaDigital", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "resultadoRevertirFirmaDigital", "errorCode"));

			String claseXMLPadre = "pe.gob.osinergmin.pgim.siged.ArchivoRevertir";
			String claseXMLHijo = "";
			String nodoHijo = "";
			String methodsOff = "";
			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				NodeList nodeList = doc.getElementsByTagName("archivosRevertir");
				List<ArchivoRevertir> list = new LinkedList<ArchivoRevertir>();
				for (int i = 0; i < nodeList.getLength(); i++) {
					List<Object> listaHija = new LinkedList<Object>();
					if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) nodeList.item(i);
						list.add((ArchivoRevertir) CommonsUtil.getXML2Object(nodeList.item(i), claseXMLPadre,
								claseXMLHijo, nodoHijo, methodsOff, element, listaHija));
					}
				}
				objResultado.setArchivosRevertir(list);
			} else {
				// Message: "El formato obtenido no contiene Documentos";
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged,
						"REVERTIR_FIRMA ", objResultado.getErrorCode(), objResultado.getMessage());
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
				objResultado.setMessage(mensajeErrorSiged);
			}
			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"REVERTIR_FIRMA: nroExpediente/idArchivoSiged-" + nroExpedienteSiged + "/"
						+ idArchivoSiged));

		return objResultado;
	}

	@Override
	@Transactional(readOnly = false)
	public RevertirFirmaResponse revertirFirmaArchivoSiged(Long idDocumentoPGIM, String nroExpedienteSiged, Long idArchivoSiged,
			String motivoReversion, Long idProceso, AuditoriaDTO auditoriaDTO) throws Exception {

		// Validación del propietario del expediente
		ExpedienteDocOutRO expedienteOutRO = new ExpedienteDocOutRO();
		ExpedienteSiged expedienteSiged = new ExpedienteSiged();
		expedienteSiged.setNumeroExpediente(nroExpedienteSiged);
		expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
		expedienteOutRO = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged, idProceso, "Revertir firma de archivo",
				auditoriaDTO);
		if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"REVERTIR_FIRMA_ARCHIVO: nroExpediente/idArchivoSiged-" + nroExpedienteSiged + "/"
						+ idArchivoSiged));

		RevertirFirmaResponse revertirFirmaResponse = this.sigedSoapService.revertirFirma(idArchivoSiged, motivoReversion, auditoriaDTO);

		if(revertirFirmaResponse.getArchivosRevertir().getArchivoRevertir().getResultCode().toString().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)){

			PgimDocumento pgimDocumento = this.documentoRepository.findById(idDocumentoPGIM).orElse(null);
			this.registrarFlFirmadoDoc(pgimDocumento, ConstantesUtil.FL_IND_NO, auditoriaDTO);
		}

		return revertirFirmaResponse;

	}

	// @Override
	public DevolverExpedienteOutRO devolverExpedienteSiged_old(DevolverExpedienteInRO devolverExpedienteInRO,
			AuditoriaDTO auditoriaDTO) throws Exception {

		DevolverExpedienteOutRO objResultado = new DevolverExpedienteOutRO();

		// Ejecutar el procedimiento devolver expediente
		String serverUrl = propertiesConfig.getUrlSiged();
		String servicio = ConstantesUtil.PARAM_SIGED_DEVOLVER_EXPEDIENTE;
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI, "EXPEDIENTE_DEVOLVER"));

		try {
			URL url = new URL(serverUrl + servicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			String xmlStringReq = DevolverExpedienteInRO.getStringXmlFile(devolverExpedienteInRO);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR, "EXPEDIENTE_DEVOLVER"));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();

			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "devolverExpedienteOutRO", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "devolverExpedienteOutRO", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "devolverExpedienteOutRO", "errorCode"));

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN, "EXPEDIENTE_DEVOLVER"));

		return objResultado;
	}

	@Override
	public DevolverExpedienteOutRO devolverExpedienteSiged(DevolverExpedienteInRO devolverExpedienteInRO,
			AuditoriaDTO auditoriaDTO) throws Exception {

		return this.sigedSoapService.devolverExpediente(devolverExpedienteInRO.getAsunto(),
				devolverExpedienteInRO.getMotivo(), devolverExpedienteInRO.getNroExpediente(),
				Integer.parseInt(auditoriaDTO.getCoUsuarioSiged()), Integer.parseInt(auditoriaDTO.getIdRolSiged()));

	}

	@Override
	public ExpedienteOutRO aprobarExpedienteSiged(ExpedienteAprobadoIn expedienteAprobadoIn, AuditoriaDTO auditoriaDTO)
			throws Exception {

		/*
		 * String asunto, String contenido, Long destinatario , String numeroExpediente,
		 * int aprobacion, int idUsuario, int idRol
		 */
		return this.sigedSoapService.aprobarExpediente(expedienteAprobadoIn.getAsunto(),
				expedienteAprobadoIn.getContenido(), Long.parseLong(expedienteAprobadoIn.getDestinatario()),
				expedienteAprobadoIn.getNumeroExpediente(), Integer.parseInt(expedienteAprobadoIn.getAprobacion()),
				Integer.parseInt(auditoriaDTO.getCoUsuarioSiged()), Integer.parseInt(auditoriaDTO.getIdRolSiged()));
	}

	@Transactional(readOnly = false)
	@Override
	public ExpedienteOutRO archivarExpedienteSiged_old(Expediente expediente, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteOutRO objResultado = new ExpedienteOutRO();

		// Ejecutar el procedimiento de archivado del expediente
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_ARCHIVAR_EXPEDIENTE;
		String msjInfraExcepcion = "No se pudo archivar el expediente Siged N° " + expediente.getNroExpediente();
		
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"ARCHIVAR_EXPEDIENTE: " + expediente.getNroExpediente()));

		try {
			URL url = new URL(serverUrl + servicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			String xmlStringReq = Expediente.getStringXmlFile(expediente);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				
				DetalleExcepcionDTO detalleExcepcionDTO = new DetalleExcepcionDTO();
				detalleExcepcionDTO.setMensajeInfraResumen(msjInfraExcepcion);						
				objResultado.setDetalleExcepcionDTO(detalleExcepcionDTO);
				
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"ARCHIVAR_EXPEDIENTE: " + expediente.getNroExpediente()));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "errorCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "message"));
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "resultCode"));
			objResultado.setCodigoExpediente(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "codigoExpediente"));
			
			if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				
				DetalleExcepcionDTO detalleExcepcionDTO = new DetalleExcepcionDTO();
				detalleExcepcionDTO.setMensajeInfraResumen(msjInfraExcepcion);
				
				if(objResultado.getErrorCode() != null && objResultado.getErrorCode().equals(ConstantesUtil.SIGED_COD_ERR_EXP_ARCHIVADO)) {
				
					final List<String> lstAcciones = new ArrayList<String>();
					lstAcciones.add("Reabrir el expediente desde el Siged web");
					lstAcciones.add("Volver a ejecutar la acción");
					detalleExcepcionDTO.setListAcciones(lstAcciones);					
				}
				
				objResultado.setDetalleExcepcionDTO(detalleExcepcionDTO);	
			}

			conn.disconnect();

		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage() + " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
			return objResultado;
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"ARCHIVAR_EXPEDIENTE: " + expediente.getNroExpediente()));

		return objResultado;
	}

	@Transactional(readOnly = false)
	public ExpedienteOutRO reabrirExpedienteSiged_old(String nroExpediente, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteOutRO objResultado = new ExpedienteOutRO();

		// Ejecutar el procedimiento de reabrir el expediente archivado
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_REABRIR_EXPEDIENTE;
		String urlServicio = servicio.replace("{nroexp}", nroExpediente);
		String msjInfraExcepcion = "No se pudo reabrir el expediente Siged N° " + nroExpediente;
		
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"REABRIR_EXPEDIENTE: " + nroExpediente));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,	"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				
				DetalleExcepcionDTO detalleExcepcionDTO = new DetalleExcepcionDTO();
				detalleExcepcionDTO.setMensajeInfraResumen(msjInfraExcepcion);						
				objResultado.setDetalleExcepcionDTO(detalleExcepcionDTO);
				
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"REABRIR_EXPEDIENTE: " + nroExpediente));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "errorCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "message"));
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "resultCode"));
			objResultado.setCodigoExpediente(CommonsUtil.getValue2Tag(doc, "expedienteOutRO", "codigoExpediente"));
			
			if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				
				DetalleExcepcionDTO detalleExcepcionDTO = new DetalleExcepcionDTO();
				detalleExcepcionDTO.setMensajeInfraResumen(msjInfraExcepcion);				
				objResultado.setDetalleExcepcionDTO(detalleExcepcionDTO);	
			}

			conn.disconnect();

		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage() + " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
			return objResultado;
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"REABRIR_EXPEDIENTE: " + nroExpediente));

		return objResultado;
	}
	
	@Override
	public DocumentoConsultaOutRO listarArchivosConVersiones_old(String idDocumento, AuditoriaDTO auditoriaDTO)
			throws Exception {

		DocumentoConsultaOutRO objResultado = new DocumentoConsultaOutRO();

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String servicio = ConstantesUtil.PARAM_SIGED_ARCHIVOS_CON_VERSIONES;
		String urlServicio = servicio.replace("{iddocumento}", idDocumento.toString());
		
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				ConstantesUtil.PARAM_SIGED_NOM_METODO_ARCHIVOS_CON_VERSIONES + ", id documento: " + idDocumento));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,	"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setMessage(conn.getResponseMessage());
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));				
				
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						ConstantesUtil.PARAM_SIGED_NOM_METODO_ARCHIVOS_CON_VERSIONES + ", id documento: " + idDocumento));
				
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_SERVICIO_NO_DISPONIBLE, objResultado.getErrorCode(), objResultado.getMessage()));
				
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "documentoConsultaOutRO", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "documentoConsultaOutRO", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "documentoConsultaOutRO", "errorCode"));
			objResultado.setErrorMessage(CommonsUtil.getValue2Tag(doc, "documentoConsultaOutRO", "errorMessage"));

			objResultado.setNroExpediente(CommonsUtil.getValue2Tag(doc, "documentoConsultaOutRO", "nroExpediente"));
			
			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {	

				List<Archivo> listaArchivos = new LinkedList<Archivo>();
				// Obtenemos la lista de las etiquetas "archivo"
				NodeList nodeListArchivos = doc.getElementsByTagName("archivo");
				for (int i = 0; i < nodeListArchivos.getLength(); i++) {
					Node node = nodeListArchivos.item(i);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
	
						Archivo obj = new Archivo();	
						Element element = (Element) nodeListArchivos.item(i);
	
						obj.setEstadoDigitalizacion(CommonsUtil.getTagValue("estadoDigitalizacion", element));
						obj.setFechaCreacion(CommonsUtil.getTagValue("fechaCreacion", element));
						obj.setFlagBloqueo(CommonsUtil.getTagValue("flagBloqueo", element));
						obj.setIdArchivo(CommonsUtil.getTagValue("idArchivo", element));
						obj.setNombre(CommonsUtil.getTagValue("nombre", element));
						obj.setRutaAlfresco(CommonsUtil.getTagValue("rutaAlfresco", element));
	
						// Obtenemos la lista de las etiquetas "versiones"
						NodeList nodeListVersiones = element.getElementsByTagName("versiones");
						for (int j = 0; j < nodeListVersiones.getLength(); j++) {
							Node nodeVersiones = (Node) nodeListVersiones.item(j);
							if (nodeVersiones.getNodeType() == Node.ELEMENT_NODE) {
								Element elementVersiones = (Element) nodeListVersiones.item(j);
								
								List<VersionArchivo> listaVersion = new LinkedList<VersionArchivo>();
	
								// Obtenemos la lista de las etiquetas "version"
								NodeList nodeListVersion = elementVersiones.getElementsByTagName("version");
								for (int k = 0; k < nodeListVersion.getLength(); k++) {
									Node nodeVersion = (Node) nodeListVersion.item(k);
									if (nodeVersion.getNodeType() == Node.ELEMENT_NODE) {
										Element elementVersion = (Element) nodeListVersion.item(k);
										
										VersionArchivo versionArchivo = new VersionArchivo();
										
										versionArchivo.setLabel(CommonsUtil.getTagValue("label", elementVersion));
										versionArchivo.setAutor(CommonsUtil.getTagValue("autor", elementVersion));
										versionArchivo.setFechaCreacion(CommonsUtil.getTagValue("fechaCreacion", elementVersion));
										versionArchivo.setEnlaceDescarga(CommonsUtil.getTagValue("enlaceDescarga", elementVersion));
										versionArchivo.setIdArchivo(obj.getIdArchivo());
										
										listaVersion.add(versionArchivo);										
									}
								}
								
								obj.setVersiones(listaVersion);
							}
						}
	
						listaArchivos.add(obj);
					}
				}
	
				objResultado.setListaArchivo(listaArchivos);
				
			} else {
				String mensajeSiged = (objResultado.getErrorMessage() != null && !objResultado.getErrorMessage().trim().equals("")) ? 
						objResultado.getErrorMessage() : objResultado.getMessage();
				
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged,
						ConstantesUtil.PARAM_SIGED_NOM_METODO_ARCHIVOS_CON_VERSIONES, objResultado.getErrorCode(), mensajeSiged);
				
				log.error(mensajeErrorSiged);
				objResultado.setMessage(mensajeErrorSiged);
			}

			conn.disconnect();

		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage() + " || Cause: " + e.getCause());
			log.error(e.getMessage(), e);
			e.printStackTrace();
			return objResultado;
			
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				ConstantesUtil.PARAM_SIGED_NOM_METODO_ARCHIVOS_CON_VERSIONES + ", id documento: " + idDocumento));

		return objResultado;
	}
	
	@Override
	public DescargaArchivo descargarVersionArchivo_old(String idArchivo, String labelVersion) throws IOException {

		DescargaArchivo descargaArchivo = new DescargaArchivo();
		ByteArrayOutputStream aFile = null;

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI, 
				ConstantesUtil.PARAM_SIGED_NOM_METODO_DESCARGAR_VERSION_ARCHIVO + ": idArchivo-" + idArchivo + ", v-" + labelVersion));

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String descargarVersionArchivo = ConstantesUtil.PARAM_SIGED_DESCARGAR_VERSION_ARCHIVO;
		String urlDescargarVersionArchivo = descargarVersionArchivo.replace("{IdArchivo}", idArchivo).replace("{LabelVersion}", labelVersion);
		URL url = new URL(serverUrl + urlDescargarVersionArchivo);
		HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
		int responseCode = httpConn.getResponseCode();

		// always check HTTP response code first
		if (responseCode == HttpURLConnection.HTTP_OK) {
			String fileName = "";
			String disposition = httpConn.getHeaderField("Content-Disposition");
			String contentType = httpConn.getContentType();
			int contentLength = httpConn.getContentLength();

			if (disposition != null) {
				// extracts file name from header field
				int index = disposition.indexOf("filename=");
				if (index > 0) {
					fileName = disposition.substring(index + 10, disposition.length() - 1);
				}
			} else {
				fileName = idArchivo;
			}

			System.out.println("Content-Type = " + contentType);
			System.out.println("Content-Disposition = " + disposition);
			System.out.println("Content-Length = " + contentLength);
			System.out.println("fileName = " + fileName);

			// opens input stream from the HTTP connection
			InputStream inputStream = httpConn.getInputStream();
			int bytesRead = -1;
			byte[] buffer = new byte[4096];
			aFile = new ByteArrayOutputStream(buffer.length);
			while ((bytesRead = inputStream.read(buffer)) != -1) {
				aFile.write(buffer, 0, bytesRead);
			}

			inputStream.close();
			
			descargaArchivo.setFile(aFile);
			descargaArchivo.setResultCode(ConstantesUtil.PARAM_RESULTADO_SUCCESS);
			descargaArchivo.setIdArchivo(idArchivo);
			descargaArchivo.setNombre(fileName);

		} else {
			descargaArchivo.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			descargaArchivo.setErrorCode(String.valueOf(httpConn.getResponseCode()));
			descargaArchivo.setMessage(httpConn.getResponseMessage());			
			
			log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
					ConstantesUtil.PARAM_SIGED_NOM_METODO_DESCARGAR_VERSION_ARCHIVO + ": idArchivo-" + idArchivo + ", v-" + labelVersion));
			
			log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_SERVICIO_NO_DISPONIBLE, descargaArchivo.getErrorCode(), descargaArchivo.getMessage()));
			
			return descargaArchivo;
		}
		
		httpConn.disconnect();
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN, 
				ConstantesUtil.PARAM_SIGED_NOM_METODO_DESCARGAR_VERSION_ARCHIVO + ": idArchivo-" + idArchivo + ", v-" + labelVersion));

		return descargaArchivo;
	}
	
	@Override
	public PgimSubcategoriaDocDTO obtenerSubcategoriaDocPorId(Long idSubcatDocumento) {
		return this.subcategoriaDocRepository.obtenerSubcategoriaDocPorId(idSubcatDocumento);
	}

	@Override
	public byte[] generarDocumentoRanking(Long idRankingRiesgo, String coAnonimizacion) throws Exception {

		List<PgimRankingUmAuxDTO> lPgimRankingUmAuxDTO = rankingUmService.listarRankingUmByIdRanking(idRankingRiesgo);
		String[] columns = null;

		if (coAnonimizacion.equals("1")) {
			String[] col = { "Anonimización", "Puntaje técnico", "Puntaje de gestión", "Puntaje general",
					"Datos completos" };
			columns = col;
		} else {
			String[] col = { "Unidad fiscalizada", "Puntaje técnico", "Puntaje de gestión", "Puntaje general",
					"Datos completos" };
			columns = col;
		}

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Ranking");

		Font headerFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());

		CellStyle headerCellStyle = workbook.createCellStyle();
		headerCellStyle.setFont(headerFont);
		headerCellStyle.setBorderBottom(BorderStyle.THIN);
		headerCellStyle.setBorderTop(BorderStyle.THIN);
		headerCellStyle.setBorderRight(BorderStyle.THIN);
		headerCellStyle.setBorderLeft(BorderStyle.THIN);

		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		CellStyle bodyCellStyle = workbook.createCellStyle();
		bodyCellStyle.setFont(bodyFont);

		bodyCellStyle.setBorderBottom(BorderStyle.THIN);
		bodyCellStyle.setBorderTop(BorderStyle.THIN);
		bodyCellStyle.setBorderRight(BorderStyle.THIN);
		bodyCellStyle.setBorderLeft(BorderStyle.THIN);

		// Create a Row
		Row headerRow = sheet.createRow(0);

		PoiExcelUtil.createCellsInRow(headerRow, columns, headerCellStyle);

		// Create Other rows and cells with contacts data
		int rowNum = 1;
		for (PgimRankingUmAuxDTO pgimRankingUmAuxDTO : lPgimRankingUmAuxDTO) {
			Row row = sheet.createRow(rowNum++);

			Cell cellOne = row.createCell(0);
			if (coAnonimizacion.equals("1")) {
				cellOne.setCellValue(pgimRankingUmAuxDTO.getCoAnonimizacion());
			} else {
				cellOne.setCellValue(
						pgimRankingUmAuxDTO.getCoUnidadMinera() + " - " + pgimRankingUmAuxDTO.getNoUnidadMinera());
			}

			cellOne.setCellStyle(bodyCellStyle);

			if (pgimRankingUmAuxDTO.getPuntajeTecnico() != null) {
				Cell cellTwo = row.createCell(1);
				cellTwo.setCellValue(pgimRankingUmAuxDTO.getPuntajeTecnico().doubleValue());
				cellTwo.setCellStyle(bodyCellStyle);
			} else {
				Cell cellTwo = row.createCell(1);
				cellTwo.setCellValue("");
				cellTwo.setCellStyle(bodyCellStyle);
			}

			if (pgimRankingUmAuxDTO.getPuntajeGestion() != null) {
				Cell cellThree = row.createCell(2);
				cellThree.setCellValue(pgimRankingUmAuxDTO.getPuntajeGestion().doubleValue());
				cellThree.setCellStyle(bodyCellStyle);
			} else {
				Cell cellThree = row.createCell(2);
				cellThree.setCellValue("");
				cellThree.setCellStyle(bodyCellStyle);
			}

			if (pgimRankingUmAuxDTO.getPuntajeGeneral() != null) {
				Cell cellFour = row.createCell(3);
				cellFour.setCellValue(pgimRankingUmAuxDTO.getPuntajeGeneral().doubleValue());
				cellFour.setCellStyle(bodyCellStyle);
			} else {
				Cell cellFour = row.createCell(3);
				cellFour.setCellValue("");
				cellFour.setCellStyle(bodyCellStyle);
			}
			Cell cellFive = row.createCell(4);
			cellFive.setCellValue(pgimRankingUmAuxDTO.getDescDatosCompletos());
			cellFive.setCellStyle(bodyCellStyle);
		}

		// Resize all columns to fit the content size
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		return archivo;
	}

	/**
	 * Permite generar el formato de riesgos de la supervisión
	 *
	 * @param ruta
	 * @param pgimRankingUmGrupoDTO
	 * @return
	 * @throws Exception
	 */
	@Override
	public byte[] generarFormatoRiesgos(String ruta, PgimRankingUmGrupoDTO pgimRankingUmGrupoDTO,
			Long idTipoExtensionGen) throws Exception {

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		PgimRankingSupervisionDTO pgimRankingSupervisionDTO = this.rankingRiesgoService
				.obtenerRankingSupervisionPorId(pgimRankingUmGrupoDTO.getIdRankingSupervision());

		List<PgimRankingUmGrupoDTO> lPgimRankingUmGrupoDTO = this.rankingUmGrupoRepository
				.listarRankingUmGrupoPorSupervisionYGrupo(pgimRankingSupervisionDTO.getIdSupervision(),
						pgimRankingUmGrupoDTO.getDescIdGrupoRiesgo());

		PgimSupervisionDTO pgimSupervisionDTO = this.supervisionService
				.obtenerSupervisionPorId(pgimRankingSupervisionDTO.getIdSupervision());
		
		PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTO = this.agenteSupervisadoService
				.obtenerAgenteSupervisadoPorInstancProceso(pgimSupervisionDTO.getIdInstanciaProceso());

		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());
		
		ArrayList<Integer> lFilasForMerge = new ArrayList<Integer>();

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		JSONArray list = new JSONArray();

		JSONObject fecha_generacion_documento = new JSONObject();
		fecha_generacion_documento.put("mergeField", "fecha_generacion_documento");
		fecha_generacion_documento.put("value", fechaDeGeneracion);
		list.put(fecha_generacion_documento);

		JSONObject especialidad = new JSONObject();
		especialidad.put("mergeField", "especialidad");
		especialidad.put("value", pgimRankingSupervisionDTO.getDescNoEspecialidad().toUpperCase());
		list.put(especialidad);

		// razon_social_agente_supervisado
		JSONObject razon_social_agente_supervisado = new JSONObject();
		razon_social_agente_supervisado.put("mergeField", "razon_social_agente_supervisado");
		razon_social_agente_supervisado.put("value", pgimAgenteSupervisadoDTO.getDescNoRazonSocial().toUpperCase());
		list.put(razon_social_agente_supervisado);

		JSONObject unidad_minera = new JSONObject();
		unidad_minera.put("mergeField", "unidad_minera");
		unidad_minera.put("value", pgimUnidadMineraDTO.getCoUnidadMinera()+ " - " +pgimRankingSupervisionDTO.getDescNoUnidadMinera());
		list.put(unidad_minera);

		JSONObject tipo_unidad_minera = new JSONObject();
		tipo_unidad_minera.put("mergeField", "tipo_unidad_minera");
		tipo_unidad_minera.put("value", pgimUnidadMineraDTO.getDescIdTipoUnidadMinera());
		list.put(tipo_unidad_minera);

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		JSONObject nro_expediente = new JSONObject();
		nro_expediente.put("mergeField", "nro_expediente");
		nro_expediente.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged().toUpperCase());
		list.put(nro_expediente);

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_riesgos")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);
					int cant = 0;
					String flMaximo = "";

					for (PgimRankingUmGrupoDTO rankingUmGrupo : lPgimRankingUmGrupoDTO) {

						if (rankingUmGrupo.getFlMaximo().equals("1")) {
							flMaximo = "(Puntaje máximo)";
						} else {
							flMaximo = "";
						}

						List<PgimRankingUmFactorDTO> lPgimRankingUmFactorDTO = this.rankingRiesgoService
								.listarRankingUMFactorPorRankingUmGrupo(rankingUmGrupo.getIdRankingUmGrupo());

						String valor = String.format("%s: %s %s", rankingUmGrupo.getDescDeGrupo().toUpperCase(),
								rankingUmGrupo.getDescNoGrupoRiesgo(), flMaximo);

						XWPFTableRow tDetalleRowOneAux = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 300, "D9D9D9", 100, cant, 0, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, valor, 8, true);

						tDetalleRowOneAux = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOneAux,
								XWPFVertAlign.CENTER,
								300, "FFFFFF", 7000, cant, 1, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
								"", 8, true);

						lFilasForMerge.add(cant);

						cant++;

						for (PgimRankingUmFactorDTO rankingFactor : lPgimRankingUmFactorDTO) {

							XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null,
									XWPFVertAlign.CENTER, 300, "D9D9D9", 100, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, "Factor:", 8, true);

							tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne,
									XWPFVertAlign.CENTER,
									300, "FFFFFF", 7000, cant, 1, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0,
									0,
									rankingFactor.getDescNoFactor(), 8, true);
							cant++;

							XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null,
									XWPFVertAlign.CENTER, 300, "D9D9D9", 100, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, "Valor:", 8, true);

							tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo,
									XWPFVertAlign.CENTER,
									300, "FFFFFF", 7000, cant, 1, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0,
									0,
									rankingFactor.getDescDeEspecificacion(), 8, false);

							cant++;

							XWPFTableRow tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, null,
									XWPFVertAlign.CENTER, 300, "D9D9D9", 100, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, "Comentario:", 8, true);

							tDetalleRowThree = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowThree,
									XWPFVertAlign.CENTER, 300, "FFFFFF", 7000, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, rankingFactor.getCmCalificacion(), 8, false);

							cant++;

							XWPFTableRow tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, null,
									XWPFVertAlign.CENTER, 100, "FFFFFF", 100, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.AUTO, 0, 0, "", 8, true);

							tDetalleRowFour = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowFour,
									XWPFVertAlign.CENTER, 100, "FFFFFF", 7000, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.AUTO, 0, 0, "", 8, true);

							lFilasForMerge.add(cant);
							cant++;

						}

					}

					for (Integer fila : lFilasForMerge) {

						PoiWordUtil.mergeCellHorizontally(tableDetalle, fila, 0, 1);

					}

				}
			}
		}

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", 0, 8000); // PLANTILLA_FORMATO_RIESGOS.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
			// archivo = PoiWordUtil.doc2pdf(archivo,
			// this.valorParametroRepository.obtenerIdValorParametro(EValorParametro.EXDOC_PDF.toString()));

		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	/**
	 * Permite la generación del formato de riesgos de la supervisión, incluye su
	 * carga en el Siged - Supervisión
	 *
	 * @param pgimRankingUmGrupoDTO
	 * @param pgimInstanciaProcesDTO
	 * @param auditoriaDTO
	 * @return
	 * @throws Exception
	 */
	@Override
	@Transactional(readOnly = false)
	public ResponseEntity<ResponseDTO> procesarGeneracionFormatoRiesgos(PgimRankingUmGrupoDTO pgimRankingUmGrupoDTO,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) throws Exception {

		ResponseEntity<ResponseDTO> respuesta = null;

		PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO;
		String tipoFormato = "";
		if (pgimRankingUmGrupoDTO.getDescIdGrupoRiesgo().equals(ConstantesUtil.PARAM_GRUPO_RIESGO_TECNICO)) {
			pgimSubcategoriaDocDTO = this
					.obtenerSubcategoriaDocPorId(ConstantesUtil.PARAM_SC_FICHA_RIESGOS_PARAM_TECNICOS);
			tipoFormato = "FRT";
		} else if (pgimRankingUmGrupoDTO.getDescIdGrupoRiesgo().equals(ConstantesUtil.PARAM_GRUPO_RIESGO_GESTION)) {
			pgimSubcategoriaDocDTO = this
					.obtenerSubcategoriaDocPorId(ConstantesUtil.PARAM_SC_FICHA_RIESGOS_PARAM_GESTION);
			tipoFormato = "FRG";
		} else {
			// throw new PgimException(TipoResultado.ERROR, "Error: Grupo de riesgo no implementado. IdGrupoRiesgo: "
			throw new PgimException(TipoResultado.ERROR, "Grupo de riesgo no implementado. IdGrupoRiesgo: " //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
					+ pgimRankingUmGrupoDTO.getDescIdGrupoRiesgo());
		}

		// Datos de Supervisión y unidad minera
		PgimSupervisionDTO pgimSupervisionDTO = supervisionRepository
				.obtenerSupervisionByidInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());

		// Generar pgimDocumentoDTO
		PgimDocumentoDTO pgimDocumentoDTO = new PgimDocumentoDTO();
		pgimDocumentoDTO.setCoTipoDocumentoSiged(ConstantesUtil.PARAM_TIPO_DOC_OTROS);
		pgimDocumentoDTO.setFlNumeradoPorSiged(pgimSubcategoriaDocDTO.getFlNumeradoPorSiged());
		pgimDocumentoDTO.setIdFaseProceso(pgimRankingUmGrupoDTO.getDescIdFaseProceso());
		pgimDocumentoDTO.setIdSubcatDocumento(pgimSubcategoriaDocDTO.getIdSubcatDocumento());
		pgimDocumentoDTO.setIdTipoOrigenDocumento(pgimSubcategoriaDocDTO.getIdTipoOrigenDocumento());
		pgimDocumentoDTO.setNumeroDocumento(tipoFormato + "-" + pgimSupervisionDTO.getCoSupervision());
		pgimDocumentoDTO.setDeAsuntoDocumento(pgimSubcategoriaDocDTO.getNoSubcatDocumento() + " - Fiscalización: "
				+ pgimSupervisionDTO.getCoSupervision());
		pgimDocumentoDTO.setFeOrigenDocumento(Calendar.getInstance().getTime());
		pgimDocumentoDTO.setDescIdInstanciaPasoActual(pgimRankingUmGrupoDTO.getDescIdInstanciaPaso());

		// Obtener cotablaInstancia
		PgimInstanciaProces pgimInstanciaProces = instanciaProcesService
				.obtenerInstanciaProcesoPorId(pgimInstanciaProcesDTO.getIdInstanciaProceso());
		pgimInstanciaProcesDTO.setCoTablaInstancia(pgimInstanciaProces.getCoTablaInstancia());
		String nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();

		ExpedienteDocOutRO elementosExpediente = null;

		// Validación del propietario del expediente
		if (nuExpedienteSiged != null) {
			ExpedienteSiged expedienteSiged = new ExpedienteSiged();
			expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
			expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());
			elementosExpediente = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
					pgimInstanciaProcesDTO.getIdProceso(), "Generar Formato de Riesgos", auditoriaDTO);
			if (!elementosExpediente.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException(TipoResultado.ERROR, elementosExpediente.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
			}
		}

		DocumentoNuevo documentoNuevo = null;
		String idDocumentoSiged = "";
		List<String> lstidDocumento = new ArrayList<String>();

		String extension = "." + pgimSubcategoriaDocDTO.getDescNoTipoExtensionGen().toLowerCase();

		byte[] byteDoc = this.generarFormatoRiesgos(
				propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_FORMATO_RIESGOS, pgimRankingUmGrupoDTO,
				pgimSubcategoriaDocDTO.getIdTipoExtensionGen());
		String strName = CommonsUtil.generadorNombreUnico();
		String strNameVal = "";
		String strPath = propertiesConfig.getCarpetaTmp() + strName + extension;
		Path docPath = Paths.get(strPath);
		Files.write(docPath, byteDoc);
		File fileSiged = new File(strPath);

		strName = tipoFormato + "-" + pgimSupervisionDTO.getCoSupervision() + extension;
		strNameVal = tipoFormato + "-" + pgimSupervisionDTO.getCoSupervision();

		MultipartFile fileDocumento = new MockMultipartFile(strName, new FileInputStream(fileSiged));

		// Validar que no haya sido generado o cargado previamente el documento (por el
		// nombre del archivo)
		boolean reemplazar = false;
		if (elementosExpediente != null) {
			for (Documento documento : elementosExpediente.getDocumentos().getListaDocumento()) {
				for (Archivo archivo : documento.getArchivos()) {
					if (archivo.getNombre().contains(strNameVal) && documento.getIdTipoDocumento()
							.equals(pgimSubcategoriaDocDTO.getCoTipoDocumentoSiged().toString())) {

						// Validar si el documento tiene algún archivo firmado digitalmente
						// lo que es una restricción para la generación
						if (archivo.getFirmaDigitalSiged() != null) {
							if (archivo.getFirmaDigitalSiged().size() > 0) {
								if (archivo.getFirmaDigitalSiged().size() == 1) {
									throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVO_FIRMADO); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
								}
								if (archivo.getFirmaDigitalSiged().size() > 1) {
									throw new PgimException(TipoResultado.WARNING, ConstantesUtil.MSG_ARCHIVOS_FIRMADOS); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
								}
							}
						}

						// Ejecutar reemplazo
						reemplazar = true;
					}

					if (reemplazar) {
						break;
					}
				}

				if (reemplazar) {
					documentoNuevo = new DocumentoNuevo(pgimInstanciaProces.getNuExpedienteSiged(), "0", "", "", "",
							auditoriaDTO.getCoUsuarioSiged());
					idDocumentoSiged = documento.getIdDocumento();
					lstidDocumento.add(idDocumentoSiged);
					break;
				}
			}
		}

		if (reemplazar) {
			// Si lo encuentra el documento se procede al reemplazo del documento
			respuesta = this.procesarReemplazoDocumentoSiged(documentoNuevo, idDocumentoSiged,
					pgimInstanciaProcesDTO.getIdProceso(), auditoriaDTO, fileDocumento, elementosExpediente);
		} else {
			// Si no se encuentra se procese a adjuntar por ser documento nuevo
			respuesta = procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
					auditoriaDTO);
		}

		// Borramos archivos temporales
		List<File> lstArchivosTmp = new ArrayList<>();
		lstArchivosTmp.add(fileSiged);
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Generar formato de riesgos");

		return respuesta;
	}

	@Override
	public ClienteConsultaOutRO buscarCliente(ClienteConsulta clienteConsulta)// , AuditoriaDTO auditoriaDTO)
			throws Exception {

		ClienteConsultaOutRO objResultado = new ClienteConsultaOutRO();

		// Ejecutar el procedimiento de búsqueda de cliente
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String urlServicio = ConstantesUtil.PARAM_SIGED_CLIENTE_CONSULTA;
		// String urlServicio = servicio.replace("{aprobacion}",
		// expedienteReenvio.getAprobacion());
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"CLIENTE_CONSULTA: " + clienteConsulta.getNroIdentificacion()));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			/* obtener xml file */
			// String xmlStringReq = ExpedienteReenvio.getStringXmlFile(expedienteReenvio);
			String xmlStringReq = ClienteConsulta.getStringXmlFile(clienteConsulta);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush();

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"CLIENTE_CONSULTA: " + clienteConsulta.getNroIdentificacion()));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "errorCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "message"));
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "resultCode"));

			objResultado.setCorreo(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "correo"));
			objResultado.setNombreCiudadano(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "nombreCiudadano"));
			objResultado.setApellidoPaternoCiudadano(
					CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "apellidoPaternoCiudadano"));
			objResultado.setApellidoMaternoCiudadano(
					CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "apellidoMaternoCiudadano"));
			objResultado.setCelular(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "celular"));
			objResultado.setTelefonoOtro(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "telefonoOtro"));
			objResultado.setEstado(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "estado"));
			objResultado.setFechaCreacion(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "fechaCreacion"));
			objResultado.setIdCliente(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "idCliente"));
			objResultado.setNombre(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "nombre"));
			objResultado
					.setNroIdentificacion(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "nroIdentificacion"));
			objResultado
					.setTipoIdentificacion(CommonsUtil.getValue2Tag(doc, "clienteConsultaOutRO", "tipoIdentificacion"));

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"CLIENTE_CONSULTA: " + clienteConsulta.getNroIdentificacion()));

		return objResultado;
	}

	@Override
	@Transactional(readOnly = false)
	public ResponseEntity<ResponseDTO> notificarDocumentoPersonaJuridica(PgimDocumentoDTO pgimDocumentoDTO,
			AuditoriaDTO auditoriaDTO) throws Exception {

		// Preparando los datos necesarios para la notificación:
		PgimDocumento pgimDocumento = this.documentoRepository.findById(pgimDocumentoDTO.getIdDocumento()).orElse(null);

		PgimInstanciaProces pgimInstanciaProces = this.instanciaProcesRepository
				.findById(pgimDocumento.getPgimInstanciaProces().getIdInstanciaProceso()).orElse(null);

//		pgimDocumento.setDescAsuntoNotificacion(pgimDocumentoDTO.getDescAsuntoNotificacion());

		PgimInstanPasoAuxDTO pgimInstanPasoAuxDTOActual = this.flujoTrabajoService
				.obtenerInstanciaPasoAuxPorId(pgimDocumentoDTO.getDescIdInstanciaPasoActual());

		Long idProceso = pgimInstanciaProces.getPgimProceso().getIdProceso();
		PgimPersona pgimPersonaDestinataria = null;

		if (idProceso.equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)) {

			if (pgimDocumentoDTO.getDescIdPersonaDestinataria() == null) {
				PgimPas pgimPas = this.pasRepository.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);

				PgimSupervision pgimSupervision = this.supervisionRepository
						.findById(pgimPas.getPgimSupervision().getIdSupervision()).orElse(null);

				PgimUnidadMinera pgimUnidadMinera = this.unidadMineraRepository
						.findById(pgimSupervision.getPgimUnidadMinera().getIdUnidadMinera()).orElse(null);

				PgimAgenteSupervisado pgimAgenteSupervisado = this.agenteSupervisadoRepository
						.findById(pgimUnidadMinera.getPgimAgenteSupervisado().getIdAgenteSupervisado()).orElse(null);

				pgimPersonaDestinataria = this.personaRepository
						.findById(pgimAgenteSupervisado.getPgimPersona().getIdPersona())
						.orElse(null);
			} else {
				pgimPersonaDestinataria = this.personaRepository
						.findById(pgimDocumentoDTO.getDescIdPersonaDestinataria())
						.orElse(null);
			}

		} else if (idProceso.equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {

			if (pgimDocumentoDTO.getDescIdPersonaDestinataria() == null) {
				PgimSupervision pgimSupervision = this.supervisionRepository
						.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);

				PgimUnidadMinera pgimUnidadMinera = this.unidadMineraRepository
						.findById(pgimSupervision.getPgimUnidadMinera().getIdUnidadMinera()).orElse(null);

				PgimAgenteSupervisado pgimAgenteSupervisado = this.agenteSupervisadoRepository
						.findById(pgimUnidadMinera.getPgimAgenteSupervisado().getIdAgenteSupervisado()).orElse(null);

				pgimPersonaDestinataria = this.personaRepository
						.findById(pgimAgenteSupervisado.getPgimPersona().getIdPersona())
						.orElse(null);
			} else {
				pgimPersonaDestinataria = this.personaRepository
						.findById(pgimDocumentoDTO.getDescIdPersonaDestinataria())
						.orElse(null);
			}

		} else {
			throw new PgimException(TipoResultado.WARNING,
					"Aún no se ha implementado notificaciones para el id de proceso: " + idProceso); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		Long idSubcatDocumento = pgimDocumentoDTO.getIdSubcatDocumento();

		PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = this.subcategoriaDocRepository
				.obtenerSubcategoriaDocPorId(idSubcatDocumento);

		// Buscamos el idSigedDelCliente
		ClienteConsulta clienteConsulta = new ClienteConsulta();
		clienteConsulta.setCodigoTipoIdentificacion("1");
		clienteConsulta.setNroIdentificacion(pgimPersonaDestinataria.getCoDocumentoIdentidad());

		ClienteConsultaOutRO clienteConsultaOutRO = this.buscarCliente(clienteConsulta);

		if (!clienteConsultaOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, "No se ha podido encontrar la identificación Siged de la persona con RUC: " //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
					+ pgimPersonaDestinataria.getCoDocumentoIdentidad());
		}

		if (!clienteConsultaOutRO.getEstado().equals(ConstantesUtil.PARAM_ESTADO_ACTIVO_CLIENTE_SIGED)) {
			throw new PgimException(TipoResultado.WARNING, "La persona con RUC " + pgimPersonaDestinataria.getCoDocumentoIdentidad() //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
					+ "no se encuentra activa");
		}
		pgimPersonaDestinataria.setDescIdClienteSiged(clienteConsultaOutRO.getIdCliente());

		// Llamar al servicio Siged para obtener el tipo y número dem documento.
		// ====================================================================
		List<PgimDocumentoDTO> lPgimDocumentoAdjuntos = new ArrayList<PgimDocumentoDTO>();
		
		if(pgimDocumentoDTO.getDescLstDocumentoAdjunto() != null && pgimDocumentoDTO.getDescLstDocumentoAdjunto().size() > 0) {
			lPgimDocumentoAdjuntos = pgimDocumentoDTO.getDescLstDocumentoAdjunto();
		}else {
		lPgimDocumentoAdjuntos.add(pgimDocumentoDTO); // Documento principal

//		PgimDocumento pgimDocumentoAdjunto = null;
        for (Long idDocumentoAdjunto : pgimDocumentoDTO.getDescLIdDocumentoAdjunto()) {
//            pgimDocumentoAdjunto = this.documentoRepository.findById(idDocumentoAdjunto)
//                    .orElse(null);
            
            PgimDocumentoDTO pgimDocumentoDTOAdjunto = this.obtenerDocumentoPgimById(idDocumentoAdjunto);

            lPgimDocumentoAdjuntos.add(pgimDocumentoDTOAdjunto);
        }
		}

		Documentos documentosSiged = new Documentos();
		documentosSiged = this.obtenerExpedienteDocumentoSiged(pgimInstanciaProces.getNuExpedienteSiged(), "0",
				auditoriaDTO);

		String asuntoParNotificar = "";

		for (PgimDocumentoDTO pgimDocumentoEncontrar : lPgimDocumentoAdjuntos) {

			for (Documento documentoSiged : documentosSiged.getListaDocumento()) {

				if (pgimDocumentoEncontrar.getCoDocumentoSiged().toString()
						.equals(documentoSiged.getIdDocumento())) {

					asuntoParNotificar = String.format("%s: %s", documentoSiged.getNombreTipoDocumento(),
							documentoSiged.getNroDocumento());

					pgimDocumentoEncontrar.setNumeroDocumento(asuntoParNotificar);

					break;
				}
			}
		}

		Map<String, Object> respuestaNotificacion = this.notificacionService.notificarElectronicamente(
				pgimInstanciaProces,lPgimDocumentoAdjuntos,
				pgimPersonaDestinataria, auditoriaDTO);

		ResponseEntity<ResponseDTO> resultado = this.adjuntarConstanciaNotificacion(pgimInstanciaProces,
				pgimInstanPasoAuxDTOActual, pgimSubcategoriaDocDTO, respuestaNotificacion, auditoriaDTO);

		if (!(resultado.getStatusCode() == HttpStatus.CREATED)) {
			throw new PgimException(TipoResultado.ERROR, //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
					"No se ha podido adjuntar la constancia de notificación para el destinatario con RUC "
							+ pgimPersonaDestinataria.getCoDocumentoIdentidad());
		}

		ResponseDTO respuestaDocConstanciaNotif = resultado.getBody();
		PgimDocumentoDTO pgimDocConstanciaDTO = (PgimDocumentoDTO) respuestaDocConstanciaNotif.getData();
		Long idDocConstanciaDTO = pgimDocConstanciaDTO.getIdDocumento();
		PgimDocumento pgimDocConstancia = this.documentoRepository.findById(idDocConstanciaDTO).orElse(null);

		BaseNotificacionOutRO baseNotificacionOutRO = (BaseNotificacionOutRO) respuestaNotificacion
				.get("baseNotificacionOutRO");

		// - Registramos la trazabilidad de la notificación realizada
		this.registrarExitoNotifiacion(baseNotificacionOutRO, pgimDocumento, pgimDocConstancia, 
				pgimDocumentoDTO.getDescIdDestinatarioDoc(), pgimPersonaDestinataria, pgimInstanciaProces, auditoriaDTO);

		return resultado;
	}

	/**
	 * Permite adjuntar la constancia de notificación electrónica.
	 *
	 * @param pgimInstanciaProces
	 * @param pgimInstanPasoAuxDTOActual
	 * @return
	 * @throws Exception
	 */
	private ResponseEntity<ResponseDTO> adjuntarConstanciaNotificacion(PgimInstanciaProces pgimInstanciaProces,
			PgimInstanPasoAuxDTO pgimInstanPasoAuxDTOActual, PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO,
			Map<String, Object> respuestaNotificacion, AuditoriaDTO auditoriaDTO) throws Exception {

		// Obtener la subcategoría apropiada de la notificación:
		PgimRelacionscNotifDTO PgimRelacionscNotifDTO = this.relacionNotificacionRepository
				.obtenerRelacionNotificacion(pgimSubcategoriaDocDTO.getIdSubcatDocumento(), ConstantesUtil.PARAM_TIPO_NOTIF_ELECTRONICA);

		if (PgimRelacionscNotifDTO == null) {
			throw new PgimException(TipoResultado.WARNING,
					"No se ha encontrado la configuración de la subcategoría de documento para la constancia de notificación electrónica de este documento"); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
		}

		PgimSubcategoriaDoc pgimSubcategoriaDoc = this.subcategoriaDocRepository
				.findById(PgimRelacionscNotifDTO.getIdSubcatDocConstancia()).orElse(null);

		BaseNotificacionOutRO baseNotificacionOutRO = (BaseNotificacionOutRO) respuestaNotificacion
				.get("baseNotificacionOutRO");
		byte[] archivoNotificacion = (byte[]) respuestaNotificacion.get("byteConstanciaNotificacion");

		String tipoFormato = "NE"; // Notificación electrónica.

		PgimDocumentoDTO pgimDocumentoDTO = new PgimDocumentoDTO();

		pgimDocumentoDTO.setCoTipoDocumentoSiged(pgimSubcategoriaDoc.getCoTipoDocumentoSiged());
		pgimDocumentoDTO.setFlNumeradoPorSiged(pgimSubcategoriaDoc.getFlNumeradoPorSiged());
		pgimDocumentoDTO.setIdFaseProceso(pgimInstanPasoAuxDTOActual.getIdFaseProcesoDestino());
		pgimDocumentoDTO.setIdSubcatDocumento(pgimSubcategoriaDoc.getIdSubcatDocumento());
		pgimDocumentoDTO.setIdTipoOrigenDocumento(pgimSubcategoriaDoc.getTipoOrigenDocumento().getIdValorParametro());
		pgimDocumentoDTO.setNumeroDocumento(tipoFormato + "." + baseNotificacionOutRO.getCodigoNotificacion());
		pgimDocumentoDTO.setDeAsuntoDocumento(pgimSubcategoriaDoc.getNoSubcatDocumento());
		pgimDocumentoDTO.setFeOrigenDocumento(baseNotificacionOutRO.getFechaNotificacion()); // Calendar.getInstance().getTime()
		pgimDocumentoDTO.setDescIdInstanciaPasoActual(pgimInstanPasoAuxDTOActual.getIdInstanciaPaso());

		String nuExpedienteSiged = pgimInstanciaProces.getNuExpedienteSiged();

		ExpedienteDocOutRO elementosExpediente = null;

		// Validación del propietario del expediente
		if (nuExpedienteSiged != null) {

			ExpedienteSiged expedienteSiged = new ExpedienteSiged();
			expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
			expedienteSiged.setNumeroExpediente(pgimInstanciaProces.getNuExpedienteSiged());

			elementosExpediente = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
					pgimInstanciaProces.getPgimProceso().getIdProceso(), "Adjuntar constancia de notificación",
					auditoriaDTO);

			if (!elementosExpediente.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				throw new PgimException(TipoResultado.ERROR, elementosExpediente.getMessage()); //STORY: PGIM-6667: Mejora de la gestión de mensajes para el usuario
			}
		}

		String nombreUnicoArchivo = CommonsUtil.generadorNombreUnico();

		String strPath = this.propertiesConfig.getCarpetaTmp() + nombreUnicoArchivo + ".pdf";
		Path docPath = Paths.get(strPath);
		Files.write(docPath, archivoNotificacion);
		File fileSiged = new File(strPath);

		nombreUnicoArchivo = tipoFormato + "-" + baseNotificacionOutRO.getCodigoNotificacion() + ".pdf";

		MultipartFile fileDocumento = new MockMultipartFile(nombreUnicoArchivo, new FileInputStream(fileSiged));

		PgimInstanciaProcesDTO pgimInstanciaProcesDTO = new PgimInstanciaProcesDTO();
		pgimInstanciaProcesDTO.setIdInstanciaProceso(pgimInstanciaProces.getIdInstanciaProceso());
		pgimInstanciaProcesDTO.setIdProceso(pgimInstanciaProces.getPgimProceso().getIdProceso());
		pgimInstanciaProcesDTO.setCoTablaInstancia(pgimInstanciaProces.getCoTablaInstancia());

		ResponseEntity<ResponseDTO> respuesta = null;
		respuesta = this.procesarAdjuntadoDocumento(pgimDocumentoDTO, pgimInstanciaProcesDTO, fileDocumento,
				auditoriaDTO);

		// Borramos archivos temporales
		List<File> lstArchivosTmp = new ArrayList<>();
		lstArchivosTmp.add(fileSiged);
		CommonsUtil.borrarArchivos(lstArchivosTmp, "Adjuntar constancia de notificación");

		return respuesta;
	}

	/**
	 * Permite registrar el éxito de la notificación.
	 *
	 * @param baseNotificacionOutRO
	 * @param pgimDocNotificado
	 * @param pgimDocConstancia
	 * @param auditoriaDTO
	 */
	private void registrarExitoNotifiacion(BaseNotificacionOutRO baseNotificacionOutRO, PgimDocumento pgimDocNotificado, PgimDocumento pgimDocConstancia, 
			Long idDestinatarioDoc, PgimPersona pgimPersonaDestinataria, PgimInstanciaProces pgimInstanciaProces, AuditoriaDTO auditoriaDTO) {

		// - Colocamos la marca de documento notificado.
		pgimDocNotificado.setFlNotificado("1");
		pgimDocNotificado.setEsRegistro(ConstantesUtil.IND_ACTIVO);
		pgimDocNotificado.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDocNotificado.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDocNotificado.setIpActualizacion(auditoriaDTO.getTerminal());

		this.documentoRepository.save(pgimDocNotificado);

		PgimDocumentoNotifica pgimDocumentoNotifica = new PgimDocumentoNotifica();

		pgimDocumentoNotifica.setDocumentoConstancia(new PgimDocumento());
		pgimDocumentoNotifica.getDocumentoConstancia().setIdDocumento(pgimDocConstancia.getIdDocumento());

		pgimDocumentoNotifica.setDocumentoNotificado(new PgimDocumento());
		pgimDocumentoNotifica.getDocumentoNotificado().setIdDocumento(pgimDocNotificado.getIdDocumento());

		pgimDocumentoNotifica.setCoNotificacion(baseNotificacionOutRO.getCodigoNotificacion());
		pgimDocumentoNotifica.setFeNotificacion(baseNotificacionOutRO.getFechaNotificacion());
		pgimDocumentoNotifica.setDeAsuntoNotificacion(baseNotificacionOutRO.getAsuntoNotificacion());

		pgimDocumentoNotifica.setEsRegistro(ConstantesUtil.IND_ACTIVO);
		pgimDocumentoNotifica.setFeCreacion(auditoriaDTO.getFecha());
		pgimDocumentoNotifica.setUsCreacion(auditoriaDTO.getUsername());
		pgimDocumentoNotifica.setIpCreacion(auditoriaDTO.getTerminal());

		this.documentoNotificaRepository.save(pgimDocumentoNotifica);
		
		// Actualizamos en la tabla de destinatario el documento constancia, si es que ha sido definido previamente
		if(idDestinatarioDoc != null) {
			
			PgimDestinatarioDoc pgimDestinatarioDoc = this.destinatarioDocRepository.findById(idDestinatarioDoc).orElse(null);
			pgimDestinatarioDoc.setDocumentoConstancia(pgimDocConstancia);
			
			pgimDestinatarioDoc.setFeActualizacion(auditoriaDTO.getFecha());
			pgimDestinatarioDoc.setUsActualizacion(auditoriaDTO.getUsername());
			pgimDestinatarioDoc.setIpActualizacion(auditoriaDTO.getTerminal());
			
			this.destinatarioDocRepository.save(pgimDestinatarioDoc);		
			
		}else {
			// caso contrario, registramos como nuevo destinatario si se trata de una fiscalización/PAS con motivo Accidente mortal
			Long idProceso = pgimInstanciaProces.getPgimProceso().getIdProceso();
			PgimSupervision pgimSupervision = null;
			
			if(idProceso.equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {
				pgimSupervision = this.supervisionRepository.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);
				
			}else if(idProceso.equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)) {
				PgimPas pgimPas = this.pasRepository.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);
				pgimSupervision = pgimPas.getPgimSupervision();
			
			}else {
				return;
			}
			
			// Verificamos si se trata de una fiscalización/PAS con motivo Accidente mortal
			if(!pgimSupervision.getPgimMotivoSupervision().getIdMotivoSupervision().equals(ConstantesUtil.MOTIVO_ACCIDENTE_MORTAL)) {
				return;
			}
			
			PgimDestinatarioDoc pgimDestinatarioDoc = new PgimDestinatarioDoc();
			pgimDestinatarioDoc.setPgimDocumento(pgimDocNotificado);
			pgimDestinatarioDoc.setDocumentoConstancia(pgimDocConstancia);
			pgimDestinatarioDoc.setPgimPersona(pgimPersonaDestinataria);
			
			pgimDestinatarioDoc.setEsRegistro(ConstantesUtil.IND_ACTIVO); 
			pgimDestinatarioDoc.setFeCreacion(auditoriaDTO.getFecha());
			pgimDestinatarioDoc.setUsCreacion(auditoriaDTO.getUsername());
			pgimDestinatarioDoc.setIpCreacion(auditoriaDTO.getTerminal());
			
			this.destinatarioDocRepository.save(pgimDestinatarioDoc);	
		}
	}

	@Override
	public ExpedienteListarPorUsuarioOut listarExpedientePorUsuario(String estado, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteListarPorUsuarioOut objResultado = new ExpedienteListarPorUsuarioOut();

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String expedienteListarPorUsuario = ConstantesUtil.PARAM_SIGED_EXPEDIENTE_LISTAR_POR_USUARIO;
		String urlServicio = expedienteListarPorUsuario.replace("{iduser}", auditoriaDTO.getCoUsuarioSiged())
				.replace("{estado}", estado);
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				"EXPEDIENTE_LISTAR_POR_USUARIO: iduser/estado-" + auditoriaDTO.getCoUsuarioSiged() + "/" + estado));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
					"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS.toString());
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						"EXPEDIENTE_LISTAR_POR_USUARIO: " + auditoriaDTO.getCoUsuarioSiged()));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "expedienteConsulta", "resultCode"));

			List<ExpedienteListarPorUsuarioOut> lExpedienteListarPorUsuario = new LinkedList<ExpedienteListarPorUsuarioOut>();
			// Obtenemos la lista de las etiquetas "expediente"
			NodeList nodeListExpedientes = doc.getElementsByTagName("expediente");
			for (int i = 0; i < nodeListExpedientes.getLength(); i++) {
				Node node = nodeListExpedientes.item(i);
				if (node.getNodeType() == Node.ELEMENT_NODE) {

					ExpedienteListarPorUsuarioOut obj = new ExpedienteListarPorUsuarioOut();

					Element element = (Element) nodeListExpedientes.item(i);

					obj.setAsunto(CommonsUtil.getTagValue("asunto", element));
					obj.setEstado(CommonsUtil.getTagValue("estado", element));
					obj.setFechaCreacion(CommonsUtil.getTagValue("fechaCreacion", element));
					obj.setIdProceso(CommonsUtil.getTagValue("idProceso", element));
					obj.setIdPropietario(CommonsUtil.getTagValue("idPropietario", element));
					obj.setMsFechaCreacion(CommonsUtil.getTagValue("msFechaCreacion", element));
					obj.setNroExpediente(CommonsUtil.getTagValue("nroExpediente", element));

					// Obtenemos la lista de las etiquetas "clientes"
					NodeList nodeListClientes = element.getElementsByTagName("clientes");
					for (int j = 0; j < nodeListClientes.getLength(); j++) {
						Node nodeClientes = (Node) nodeListClientes.item(j);
						if (nodeClientes.getNodeType() == Node.ELEMENT_NODE) {
							Element elementClientes = (Element) nodeListClientes.item(j);

							// Obtenemos la lista de las etiquetas "cliente"
							NodeList nodeListCliente = elementClientes.getElementsByTagName("cliente");
							for (int k = 0; k < nodeListCliente.getLength(); k++) {
								Node nodeCliente = (Node) nodeListCliente.item(k);
								if (nodeCliente.getNodeType() == Node.ELEMENT_NODE) {
									Element elementCliente = (Element) nodeListCliente.item(k);

									obj.setCodigoCliente(CommonsUtil.getTagValue("codigoCliente", elementCliente));
								}
							}
						}
					}

					lExpedienteListarPorUsuario.add(obj);
				}
			}

			objResultado.setlExpedienteListarPorUsuario(lExpedienteListarPorUsuario);

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				"EXPEDIENTE_LISTAR_POR_USUARIO: " + auditoriaDTO.getCoUsuarioSiged()));

		return objResultado;
	}
	
	@Override
	public ExpedienteListarPorUsuarioOut listarExpedientePorUsuarioV2_old(String estado, String idProceso, AuditoriaDTO auditoriaDTO)
			throws Exception {

		ExpedienteListarPorUsuarioOut objResultado = new ExpedienteListarPorUsuarioOut();

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String expedienteListarPorUsuario = ConstantesUtil.PARAM_SIGED_EXPEDIENTE_LISTAR_POR_USUARIO_V2;
		String urlServicio = expedienteListarPorUsuario.replace("{iduser}", auditoriaDTO.getCoUsuarioSiged())
				.replace("{estado}", estado).replace("{idproceso}", idProceso);
		
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI, ConstantesUtil.PARAM_SIGED_NOM_METODO_EXP_LISTAR_POR_USUARIO_V2 + 
				": iduser/estado/idProceso-" + auditoriaDTO.getCoUsuarioSiged() + "/" + estado + "/" + idProceso));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
					"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS.toString());
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR, ConstantesUtil.PARAM_SIGED_NOM_METODO_EXP_LISTAR_POR_USUARIO_V2 +
						": iduser/estado/idProceso-" + auditoriaDTO.getCoUsuarioSiged() + "/" + estado + "/" + idProceso));
				
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_SERVICIO_NO_DISPONIBLE, objResultado.getErrorCode(), objResultado.getMessage()));
				
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "expedienteConsulta", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "expedienteConsulta", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "expedienteConsulta", "errorCode"));
			objResultado.setErrorMessage(CommonsUtil.getValue2Tag(doc, "expedienteConsulta", "errorMessage"));
			
			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {	

				List<ExpedienteListarPorUsuarioOut> lExpedienteListarPorUsuario = new LinkedList<ExpedienteListarPorUsuarioOut>();
				
				// Obtenemos la lista de las etiquetas "expediente"
				NodeList nodeListExpedientes = doc.getElementsByTagName("expediente");
				for (int i = 0; i < nodeListExpedientes.getLength(); i++) {
					Node node = nodeListExpedientes.item(i);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
	
						ExpedienteListarPorUsuarioOut obj = new ExpedienteListarPorUsuarioOut();
	
						Element element = (Element) nodeListExpedientes.item(i);
	
						obj.setAsunto(CommonsUtil.getTagValue("asunto", element));
						obj.setEstado(CommonsUtil.getTagValue("estado", element));
						obj.setFechaCreacion(CommonsUtil.getTagValue("fechaCreacion", element));
						obj.setIdProceso(CommonsUtil.getTagValue("idProceso", element));
						obj.setIdPropietario(CommonsUtil.getTagValue("idPropietario", element));
						obj.setRUCcliente(CommonsUtil.getTagValue("RUCcliente", element));
						obj.setCliente(CommonsUtil.getTagValue("cliente", element));
						obj.setMsFechaCreacion(CommonsUtil.getTagValue("msFechaCreacion", element));
						obj.setNroExpediente(CommonsUtil.getTagValue("nroExpediente", element));
						obj.setNoProceso(ConstantesUtil.PARAM_NOM_PROCESO_SIGED_905);
	
						// Obtenemos la lista de las etiquetas "clientes"
						NodeList nodeListClientes = element.getElementsByTagName("clientes");
						for (int j = 0; j < nodeListClientes.getLength(); j++) {
							Node nodeClientes = (Node) nodeListClientes.item(j);
							if (nodeClientes.getNodeType() == Node.ELEMENT_NODE) {
								Element elementClientes = (Element) nodeListClientes.item(j);
	
								// Obtenemos la lista de las etiquetas "cliente"
								NodeList nodeListCliente = elementClientes.getElementsByTagName("cliente");
								for (int k = 0; k < nodeListCliente.getLength(); k++) {
									Node nodeCliente = (Node) nodeListCliente.item(k);
									if (nodeCliente.getNodeType() == Node.ELEMENT_NODE) {
										Element elementCliente = (Element) nodeListCliente.item(k);
	
										obj.setCodigoCliente(CommonsUtil.getTagValue("codigoCliente", elementCliente));
									}
								}
							}
						}
	
						lExpedienteListarPorUsuario.add(obj);
					}
				}
	
				objResultado.setlExpedienteListarPorUsuario(lExpedienteListarPorUsuario);
			
			} else {
				String mensajeSiged = (objResultado.getErrorMessage() != null && !objResultado.getErrorMessage().trim().equals("")) ? 
						objResultado.getErrorMessage() : objResultado.getMessage();
				
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged,
						ConstantesUtil.PARAM_SIGED_NOM_METODO_EXP_LISTAR_POR_USUARIO_V2, objResultado.getErrorCode(), mensajeSiged);
				
				log.error(mensajeErrorSiged);
				objResultado.setMessage(mensajeErrorSiged);
			}

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage() + " || Cause: " + e.getCause());
			log.error(e.getMessage(), e);
			e.printStackTrace();
			return objResultado;			
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN, ConstantesUtil.PARAM_SIGED_NOM_METODO_EXP_LISTAR_POR_USUARIO_V2 +
				": iduser/estado/idProceso-" + auditoriaDTO.getCoUsuarioSiged() + "/" + estado + "/" + idProceso));

		return objResultado;
	}

	@Override
	public Map<String, Object> obtenerListaExpedientePorUsuario(ExpedienteListarPorUsuarioOut filtro,
			Pageable paginador, AuditoriaDTO auditoriaDTO) throws Exception {

		Map<String, Object> resultado = new HashMap<>();
		List<ExpedienteListarPorUsuarioOut> lExpedienteListarPorUsuarioOut = new LinkedList<ExpedienteListarPorUsuarioOut>();
		int cantidadRegistrosTotal = 0;

		ExpedienteListarPorUsuarioOut expedienteListarPorUsuarioOut = this.listarExpedientePorUsuarioV2_old(filtro.getEstado(), //actualización, uso de V2 del servicio
				filtro.getIdProceso(), auditoriaDTO);
		
		if(!expedienteListarPorUsuarioOut.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, expedienteListarPorUsuarioOut.getMessage());
		}
		
		List<ExpedienteListarPorUsuarioOut> lista = expedienteListarPorUsuarioOut.getlExpedienteListarPorUsuario();
		// Validar que el ID_PROCESO sea en ingresado
		List<ExpedienteListarPorUsuarioOut> listaTemp = new LinkedList<ExpedienteListarPorUsuarioOut>();
		for (ExpedienteListarPorUsuarioOut obj : lista) {
//			if (obj.getIdProceso().equals(filtro.getIdProceso())) { // comentar solo para uso del metodo listarPorUsuario V2
				if (filtro.getNroExpediente() != null && !filtro.getNroExpediente().equals("")) {
					if (filtro.getNroExpediente().equals(obj.getNroExpediente())) {
//						obj.setNoProceso(ConstantesUtil.PARAM_NOM_PROCESO_SIGED_905); // comentar solo para uso del metodo listarPorUsuario V2
						listaTemp.add(obj);
						break;
					}
				} else {
//					obj.setNoProceso(ConstantesUtil.PARAM_NOM_PROCESO_SIGED_905); // comentar solo para uso del metodo listarPorUsuario V2
					listaTemp.add(obj);
				}
//			}
		}

		List<PgimInstanciaProces> lPgimInstanciaProces = instanciaProcesRepository.findAll();
		List<ExpedienteListarPorUsuarioOut> listaTempTwo = new LinkedList<ExpedienteListarPorUsuarioOut>();
		for (ExpedienteListarPorUsuarioOut obj : listaTemp) {
			int existeCantidad = 0;
			for (PgimInstanciaProces pgimInstanciaProces : lPgimInstanciaProces) {
				if (pgimInstanciaProces.getNuExpedienteSiged() != null
						&& pgimInstanciaProces.getNuExpedienteSiged().equals(obj.getNroExpediente())) {
					existeCantidad++;
				}
			}

			if (existeCantidad == 0) {
				cantidadRegistrosTotal++;
				listaTempTwo.add(obj);
			}
		}

		// Se realiza el ordenamiento
		if (paginador != null && paginador.getSort() != null) {
			String campo = "", orden = "";
			for (Sort.Order order : paginador.getSort()) {
				campo = order.getProperty();
				orden = order.getDirection().toString();
				break;
			}

			if (campo.equals("fechaCreacion")) {
				if (orden.equalsIgnoreCase("ASC")) {
					// Ordenamiento ascendente
					Collections.sort(listaTempTwo, new Comparator<ExpedienteListarPorUsuarioOut>() {
						@Override
						public int compare(ExpedienteListarPorUsuarioOut o1, ExpedienteListarPorUsuarioOut o2) {
							return o1.getFechaCreacion().compareTo(o2.getFechaCreacion());
						}
					});
				} else if (orden.equalsIgnoreCase("DESC")) {
					// Ordenamiento descendente
					Collections.sort(listaTempTwo, new Comparator<ExpedienteListarPorUsuarioOut>() {

						@Override
						public int compare(ExpedienteListarPorUsuarioOut o1, ExpedienteListarPorUsuarioOut o2) {
							return o2.getFechaCreacion().compareTo(o1.getFechaCreacion());
						}
					});
				}
			}
		}

		// Ordenamiento por pagina y cantidad
		int rowStart = 0, rowEnd = 0;
		int pageNumber = paginador.getPageNumber();
		int pageSize = paginador.getPageSize();

		rowStart = pageNumber * pageSize;
		rowEnd = rowStart + pageSize;

		if (cantidadRegistrosTotal < rowEnd) {
			int registrosPendientes = cantidadRegistrosTotal - rowStart;
			rowEnd = rowStart + registrosPendientes;
		}

		for (int i = rowStart; i < rowEnd; i++) {
			lExpedienteListarPorUsuarioOut.add(listaTempTwo.get(i));
		}

		resultado.put("lExpedienteListarPorUsuarioOut", lExpedienteListarPorUsuarioOut);
		resultado.put("cantidadRegistrosTotal", cantidadRegistrosTotal);

		return resultado;
	}

	@Override
	public Map<String, Object> obtenerDocumentoSigedPorExpediente(String nroExp, String files,
			AuditoriaDTO auditoriaDTO) throws Exception {

		Map<String, Object> paramSalida = new HashMap<String, Object>();

		List<PgimDocumentoDTO> lPgimDocumentoDTOResultado = new ArrayList<PgimDocumentoDTO>();
		Long contadorDocumentos = 0L;

		auditoriaDTO.setModuloPgimActual(ConstantesUtil.PARAM_MODULO_GENERICO);
		Documentos documentos = sigedSoapService.listarDocumentos(nroExp, files, auditoriaDTO, false);

		if (documentos.getListaDocumento() != null || documentos.getListaDocumento().size() > 0) {

			for (Documento docSiged : documentos.getListaDocumento()) {

				PgimDocumentoDTO pgimDocumentoDTOResultado = new PgimDocumentoDTO();

				contadorDocumentos += 1;
				pgimDocumentoDTOResultado.setNumeroDocumento(docSiged.getNroDocumento());
				pgimDocumentoDTOResultado.setNombreTipoDocumento(docSiged.getNombreTipoDocumento());
				pgimDocumentoDTOResultado.setAsuntoSiged(docSiged.getAsunto());
				pgimDocumentoDTOResultado.setFechaDocumentoSiged(docSiged.getFechaDocumento());
				pgimDocumentoDTOResultado.setFechaCreacionSiged(docSiged.getFechaCreacion());
				pgimDocumentoDTOResultado.setFechaLimiteAtencionSiged(docSiged.getFechaLimiteAtencion());
				pgimDocumentoDTOResultado.setFechaNumeracionSiged(docSiged.getFechaNumeracion());
				pgimDocumentoDTOResultado.setNuExpedienteSiged(nroExp);

				pgimDocumentoDTOResultado.setDescPrincipal(docSiged.getPrincipal());
				pgimDocumentoDTOResultado.setDescAutor(docSiged.getAutor());

				Long contador = 0L;
				for (Archivo archivoSiged : docSiged.getArchivos()) {
					if (contador > 0) {
						/*
						 * PgimDocumentoDTO pgimDocumentoDTOTemp = pgimDocumentoDTOResultado;
						 * pgimDocumentoDTOResultado = new PgimDocumentoDTO();
						 * BeanUtils.copyProperties(pgimDocumentoDTOTemp, pgimDocumentoDTOResultado);
						 */
						pgimDocumentoDTOResultado.setTipoRegistro("A");
					} else {
						pgimDocumentoDTOResultado.setTipoRegistro("D");
					}

					pgimDocumentoDTOResultado.setNombreArchivo(archivoSiged.getNombre());
					pgimDocumentoDTOResultado.setRutaAlfresco(archivoSiged.getRutaAlfresco());

					pgimDocumentoDTOResultado.setIdArchivo(Long.parseLong(archivoSiged.getIdArchivo()));

					lPgimDocumentoDTOResultado.add(pgimDocumentoDTOResultado);
					contador += 1;
				}
			}
		}

		paramSalida.put("lPgimDocumentoDTOResultado", lPgimDocumentoDTOResultado);
		paramSalida.put("cantidadDocumentos", contadorDocumentos);

		return paramSalida;
	}

	@Override
	public List<TrazabilidadDocumentoDTO> listarTrazabilidadPorExpediente(String nroExp, AuditoriaDTO auditoriaDTO)
			throws Exception {

		Documentos documentos = documentoService.obtenerExpedienteDocumentoSiged(nroExp, "0", auditoriaDTO);
		Documento documentoSeleccionado = null;

		List<TrazabilidadDocumentoDTO> lTrazDocs = new ArrayList<>();

		if (documentos != null && documentos.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)
				&& documentos.getListaDocumento().size() > 0) {
			
			for (Documento documento : documentos.getListaDocumento()) {				
				if(documento.getNroExpediente().equals(nroExp) ) {
					documentoSeleccionado = documento;
					break;
				}
			}
			
			if(documentoSeleccionado != null) {

				ListarTrazabilidadDocumentosResponse trazabilidad = documentoService
						.listarTrazabilidad(documentoSeleccionado.getIdDocumento(), auditoriaDTO);
				
	
				if (trazabilidad != null
						&& trazabilidad.getResultCode().equals(new BigInteger(ConstantesUtil.PARAM_RESULTADO_SUCCESS))
						&& trazabilidad.getTrazabilidadDocumentoOutRO().size() > 0) {
	
					UnidadesOutRo unidadesSiged = this.listarAreasSiged();
	
					for (TrazabilidadDocumentoOutRO trazabilidadDocs : trazabilidad.getTrazabilidadDocumentoOutRO()) {
						TrazabilidadDocumentoDTO trazabilidadDocumentoDTO = new TrazabilidadDocumentoDTO();
						trazabilidadDocumentoDTO.setFechaCreacion(trazabilidadDocs.getFechaCreacion());
						trazabilidadDocumentoDTO.setNombreRemitente(trazabilidadDocs.getNombreRemitente());
						trazabilidadDocumentoDTO.setNombreDestinatario(trazabilidadDocs.getNombreDestinatario());
						trazabilidadDocumentoDTO.setNombreAccion(trazabilidadDocs.getNombreAccion());
						trazabilidadDocumentoDTO.setIdUnidadRemitente(trazabilidadDocs.getIdUnidadRemitente().toString()); // de
						trazabilidadDocumentoDTO
								.setIdUnidadDestinatario(trazabilidadDocs.getIdUnidadDestinatario().toString()); // para
	
						if (unidadesSiged != null
								&& unidadesSiged.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)
								&& unidadesSiged.getlUnidadesOutRo().size() > 0) {
							for (UnidadesOutRo unidad : unidadesSiged.getlUnidadesOutRo()) {
	
								if (trazabilidadDocs.getIdUnidadRemitente().toString().equals(unidad.getIdUnidad())) {
									trazabilidadDocumentoDTO.setNombreUnidadRemitente(unidad.getNombreUnidad());
								}
								if (trazabilidadDocs.getIdUnidadDestinatario().toString().equals(unidad.getIdUnidad())) {
									trazabilidadDocumentoDTO.setNombreUnidadDestinatario(unidad.getNombreUnidad());
								}
	
							}
						}
	
						lTrazDocs.add(trazabilidadDocumentoDTO);
					}
				}
			}

		}

		return lTrazDocs;

	}

	@Override
	public UnidadesOutRo listarAreasSiged() throws Exception {

		UnidadesOutRo objResultado = new UnidadesOutRo();

		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String urlServicio = ConstantesUtil.PARAM_SIGED_LISTADO_AREAS;
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI, "LISTADO_AREAS_SIGED"));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
					"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS.toString());
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR, "LISTADO_AREAS_SIGED"));
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "unidades", "resultCode"));

			List<UnidadesOutRo> lUnidades = new LinkedList<UnidadesOutRo>();

			// Obtenemos la lista de las etiquetas "unidades"
			NodeList nodeListUnidades = doc.getElementsByTagName("unidad");
			for (int i = 0; i < nodeListUnidades.getLength(); i++) {
				Node node = nodeListUnidades.item(i);
				if (node.getNodeType() == Node.ELEMENT_NODE) {

					UnidadesOutRo obj = new UnidadesOutRo();

					Element element = (Element) nodeListUnidades.item(i);

					obj.setCantidadProcesos(CommonsUtil.getTagValue("cantidadProcesos", element));
					obj.setIdUnidad(CommonsUtil.getTagValue("idUnidad", element));
					obj.setNombreUnidad(CommonsUtil.getTagValue("nombreUnidad", element));

					lUnidades.add(obj);
				}
			}

			objResultado.setlUnidadesOutRo(lUnidades);

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN, "LISTADO_AREAS_SIGED"));

		return objResultado;
	}

	@Override
	public Map<String, Object> listarDocumentosSiged(ConsultaListadoDocumento consultaListadoDocumento)
			throws Exception {
		
		Documentos documentos = this.obtenerDocumentosSiged_old(consultaListadoDocumento);
		
		// Si hay un error en el consumo del servicio SIGED, debe enviar el error
		if (!documentos.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
			throw new PgimException(TipoResultado.ERROR, documentos.getMessage());
		}
		
		Map<String, Object> paramSalida = new HashMap<String, Object>();
		List<PgimDocumentoDTO> lPgimDocumentoDTOResultado = new LinkedList<PgimDocumentoDTO>();
		Long contadorDocumentos = 0L;
				
		for (Documento docSiged : documentos.getListaDocumento()) {
		  PgimDocumentoDTO pgimDocumentoDTOResultado = new PgimDocumentoDTO();
		  
		  String nroDocumento = docSiged.getNroDocumento();
		  if(docSiged.getNroDocumento().equalsIgnoreCase(".s/n") || 
			  docSiged.getNroDocumento().equalsIgnoreCase("s/n") ||
			  docSiged.getNroDocumento().equalsIgnoreCase("sn") || 
			  docSiged.getNroDocumento().equalsIgnoreCase("")){
			  nroDocumento = ".s/n";
		  }
		  
		  pgimDocumentoDTOResultado.setNumeroDocumento(nroDocumento);
		  pgimDocumentoDTOResultado.setNombreTipoDocumento(docSiged.getNombreTipoDocumento());
		  pgimDocumentoDTOResultado.setAsuntoSiged(docSiged.getUltimoAsunto());
		  // pgimDocumentoDTOResultado.setFechaDocumentoSiged(docSiged.getFechaDocumento());
		  // pgimDocumentoDTOResultado.setFechaCreacionSiged(docSiged.getFechaCreacion());
		  // pgimDocumentoDTOResultado.setFechaLimiteAtencionSiged(docSiged.getFechaLimiteAtencion());
		  // pgimDocumentoDTOResultado.setFechaNumeracionSiged(docSiged.getFechaNumeracion());
		  pgimDocumentoDTOResultado.setNuExpedienteSiged(docSiged.getNroExpediente());
		  pgimDocumentoDTOResultado.setDescCantidadArchivosDoc(docSiged.getArchivos().size());
		  pgimDocumentoDTOResultado.setCoTipoDocumentoSiged(Long.parseLong(docSiged.getIdTipoDocumento()));
		  pgimDocumentoDTOResultado.setCoDocumentoSiged(Long.parseLong(docSiged.getIdDocumento()));
		  pgimDocumentoDTOResultado.setFechaNumeracionSiged(docSiged.getFechaNumeracion());
		  pgimDocumentoDTOResultado.setFechaLimiteAtencionSiged(docSiged.getFechaLimiteAtencion());
		  pgimDocumentoDTOResultado.setFechaDocumentoSiged(docSiged.getFechaDocumento());
		  pgimDocumentoDTOResultado.setFechaCreacionSiged(docSiged.getFechaCreacion());
		  pgimDocumentoDTOResultado.setDescRucCliente(docSiged.getRucCliente());
		  pgimDocumentoDTOResultado.setDescRazonsocialCliente(docSiged.getRazonsocialCliente());
		  pgimDocumentoDTOResultado.setDeAsuntoDocumento(docSiged.getAsunto());
		  
		  // Ordenar archivos siged por su Id desc
		  List<Archivo> lArchivosSiged = docSiged.getArchivos().stream()
		      .sorted(Comparator.comparing(Archivo::getIdArchivo).reversed())
		      .collect(Collectors.toList());
		  
		  Long contador = 0L;
		  
		  for (Archivo archivoSiged : lArchivosSiged) {

		    if (contador > 0) {
		      PgimDocumentoDTO pgimDocumentoDTOTemp = pgimDocumentoDTOResultado;
		      pgimDocumentoDTOResultado = new PgimDocumentoDTO();
		      BeanUtils.copyProperties(pgimDocumentoDTOTemp, pgimDocumentoDTOResultado);
		      pgimDocumentoDTOResultado.setTipoRegistro("A");
		    } else {
		      contadorDocumentos++;
		      
		      pgimDocumentoDTOResultado.setTipoRegistro("D");
		      pgimDocumentoDTOResultado.setDescIndexDocumento(contadorDocumentos);
		    }

		    pgimDocumentoDTOResultado
		        .setCoDocumentoSiged(pgimDocumentoDTOResultado.getCoDocumentoSiged());
		    pgimDocumentoDTOResultado.setNombreArchivo(archivoSiged.getNombre());
		    pgimDocumentoDTOResultado.setRutaAlfresco(archivoSiged.getRutaAlfresco());

		    pgimDocumentoDTOResultado.setIdArchivo(Long.parseLong(archivoSiged.getIdArchivo()));

		    lPgimDocumentoDTOResultado.add(pgimDocumentoDTOResultado);
		    contador += 1;
		  }

		}

		paramSalida.put("lPgimDocumentoDTOResultado", lPgimDocumentoDTOResultado);
		paramSalida.put("cantidadDocumentos", contadorDocumentos);
		
		return paramSalida;
	}
	

	private Documentos obtenerDocumentosSiged_old(ConsultaListadoDocumento consultaListadoDocumento)
			throws Exception {

		Documentos objResultado = new Documentos();

		// Ejecutar el procedimiento de búsqueda de cliente
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String urlServicio = ConstantesUtil.PARAM_SIGED_LISTADO_DOCUMENTO_V2;

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI, ConstantesUtil.PARAM_SIGED_NOM_METODO_LISTADO_DOCUMENTO_V2));

		try {
			
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_POST);
			conn.setUseCaches(false);
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setAllowUserInteraction(true);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE, "application/xml");
			OutputStreamWriter infWebSvcReqWriter = new OutputStreamWriter(conn.getOutputStream());
			
			/* obtener xml file */
			String xmlStringReq = ConsultaListadoDocumento.getStringXmlFile(consultaListadoDocumento);
			infWebSvcReqWriter.write(xmlStringReq);
			infWebSvcReqWriter.flush(); 

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR, ConstantesUtil.PARAM_SIGED_NOM_METODO_LISTADO_DOCUMENTO_V2));
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_SERVICIO_NO_DISPONIBLE, objResultado.getErrorCode(), objResultado.getMessage()));
				
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "documentos", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "documentos", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "documentos", "errorCode"));
			objResultado.setErrorMessage(CommonsUtil.getValue2Tag(doc, "documentos", "errorMessage"));

			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				List<Documento> lDocumento = new LinkedList<Documento>();
				
				// Obtenemos la lista de las etiquetas "documento"
				NodeList nodeListExpedientes = doc.getElementsByTagName("documento");
				for (int i = 0; i < nodeListExpedientes.getLength(); i++) {
					Node node = nodeListExpedientes.item(i);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
	
						Documento obj = new Documento();
	
						Element element = (Element) nodeListExpedientes.item(i);
						
						obj.setAutor(CommonsUtil.getTagValue("autor", element));
						obj.setAsunto(CommonsUtil.getTagValue("asuntoDocumento", element));
						obj.setDelExpediente(CommonsUtil.getTagValue("delExpediente", element));
						obj.setEnumerado(CommonsUtil.getTagValue("enumerado", element));
						obj.setEstado(CommonsUtil.getTagValue("estado", element));
						obj.setEstadoAlarma(CommonsUtil.getTagValue("estadoAlarma", element));
						obj.setEstadoDigitalizacion(CommonsUtil.getTagValue("estadoDigitalizacion", element));
						obj.setEstaEnFlujo(CommonsUtil.getTagValue("estaEnFlujo", element));
						obj.setFechaAccion(CommonsUtil.getTagValue("fechaAccion", element));
						obj.setFechaCreacion(CommonsUtil.getTagValue("fechaCreacion", element));
						obj.setFechaDocumento(CommonsUtil.getTagValue("fechaDocumento", element));
						obj.setFechaLimiteAtencion(CommonsUtil.getTagValue("fechaLimiteAtencion", element));
						obj.setFirmado(CommonsUtil.getTagValue("firmado", element));
						obj.setFlagBloqueo(CommonsUtil.getTagValue("flagBloqueo", element));
						obj.setIdAccion(CommonsUtil.getTagValue("idAccion", element));
						obj.setIdDocumento(CommonsUtil.getTagValue("idDocumento", element));
						obj.setIdEnumerador(CommonsUtil.getTagValue("idEnumerador", element));
						obj.setIdExpediente(CommonsUtil.getTagValue("idExpediente", element));
						obj.setIdPropietario(CommonsUtil.getTagValue("idPropietario", element));
						obj.setIdTipoDocumento(CommonsUtil.getTagValue("idTipoDocumento", element));
						obj.setLeido(CommonsUtil.getTagValue("leido", element));
						obj.setNombreAcccion(CommonsUtil.getTagValue("nombreAcccion", element));
						obj.setNombreEnumerador(CommonsUtil.getTagValue("nombreEnumerador", element));
						obj.setNombrePropietario(CommonsUtil.getTagValue("nombrePropietario", element));
						obj.setNombreTipoDocumento(CommonsUtil.getTagValue("nombreTipoDocumento", element));
						obj.setNombreUsrCompartidoEnumerador(CommonsUtil.getTagValue("nombreUsrCompartidoEnumerador", element));
						obj.setNombreUsrCompartidoFirmante(CommonsUtil.getTagValue("nombreUsrCompartidoFirmante", element));
						obj.setNroDocumento(CommonsUtil.getTagValue("nroDocumento", element));
						obj.setNroExpediente(CommonsUtil.getTagValue("nroExpediente", element));
						obj.setNroFolios(CommonsUtil.getTagValue("nroFolios", element));
						obj.setPrincipal(CommonsUtil.getTagValue("principal", element));
						obj.setRemitente(CommonsUtil.getTagValue("remitente", element));
						obj.setUltimoAsunto(CommonsUtil.getTagValue("ultimoAsunto", element));
						obj.setUsuarioCreador(CommonsUtil.getTagValue("usuarioCreador", element));
						obj.setRucCliente(CommonsUtil.getTagValue("rucCliente", element));
						obj.setDniCliente(CommonsUtil.getTagValue("dniCliente", element));
						obj.setRazonsocialCliente(CommonsUtil.getTagValue("razonSocialCliente", element));
						obj.setNombreCliente(CommonsUtil.getTagValue("nombreCliente", element));
						
						obj.setFechaNumeracion(CommonsUtil.getTagValue("fechaNumeracion", element));
						obj.setIdFirmante(CommonsUtil.getTagValue("idFirmante", element));
						obj.setIdUsrCompartidoEnumerador(CommonsUtil.getTagValue("idUsrCompartidoEnumerador", element));
						obj.setIdUsrCompartidoFirmante(CommonsUtil.getTagValue("idUsrCompartidoFirmante", element));
						obj.setNombreFirmante(CommonsUtil.getTagValue("nombreFirmante", element));
				
						List<Archivo> lArchivo = new LinkedList<Archivo>();
						// Obtenemos la lista de las etiquetas "archivos"
						NodeList nodeListArchivos = element.getElementsByTagName("archivos");
						for (int j = 0; j < nodeListArchivos.getLength(); j++) {
							Node nodeArchivos = (Node) nodeListArchivos.item(j);
							if (nodeArchivos.getNodeType() == Node.ELEMENT_NODE) {
								Element elementArchivos = (Element) nodeListArchivos.item(j);					
								
								// Obtenemos la lista de las etiquetas "archivo"
								NodeList nodeListArchivo = elementArchivos.getElementsByTagName("archivo");
								for (int k = 0; k < nodeListArchivo.getLength(); k++) {
									Archivo archivo = new Archivo();
									
									Node nodeArchivo = (Node) nodeListArchivo.item(k);
									if (nodeArchivo.getNodeType() == Node.ELEMENT_NODE) {
										Element elementArchivo = (Element) nodeListArchivo.item(k);
										
										archivo.setEstadoDigitalizacion( CommonsUtil.getTagValue("estadoDigitalizacion", elementArchivo) );
										archivo.setFechaCreacion( CommonsUtil.getTagValue("fechaCreacion", elementArchivo) );
										archivo.setFlagBloqueo( CommonsUtil.getTagValue("flagBloqueo", elementArchivo) );
										archivo.setIdArchivo( CommonsUtil.getTagValue("idArchivo", elementArchivo) );
										archivo.setNombre( CommonsUtil.getTagValue("nombre", elementArchivo) );
										archivo.setRutaAlfresco( CommonsUtil.getTagValue("rutaAlfresco", elementArchivo) );

										lArchivo.add(archivo);
									}
								}
								
								obj.setArchivos(lArchivo);
							}
							
						}
	
						lDocumento.add(obj);
					}
				}
	
				objResultado.setListaDocumento(lDocumento);
					
			} else {
				
				String mensajeSiged = (objResultado.getErrorMessage() != null && !objResultado.getErrorMessage().trim().equals("")) ? 
						objResultado.getErrorMessage() : objResultado.getMessage();
				
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged,
						ConstantesUtil.PARAM_SIGED_NOM_METODO_LISTADO_DOCUMENTO_V2, objResultado.getErrorCode(), mensajeSiged);
				
				log.error(mensajeErrorSiged);
				objResultado.setMessage(mensajeErrorSiged);
				
			}
			
			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage() + " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				ConstantesUtil.PARAM_SIGED_NOM_METODO_LISTADO_DOCUMENTO_V2));

		return objResultado;
	}
	
	@Override
	public Tiposdocumento listarTipoDocsSiged()
			throws Exception {
		
		Tiposdocumento tiposDocumento = this.listarTipoDocs_old();

		return tiposDocumento;
	}

	
	private Tiposdocumento listarTipoDocs_old()
			throws Exception {

		Tiposdocumento objResultado = new Tiposdocumento();

		// Ejecutar el procedimiento de búsqueda de cliente
		String serverUrl = propertiesConfig.getUrlSigedRestOld();
		String urlServicio = ConstantesUtil.PARAM_SIGED_TIPO_DOCUMENTO;

		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_INI,
				ConstantesUtil.PARAM_SIGED_NOM_METODO_TIPO_DOCUMENTO));

		try {
			URL url = new URL(serverUrl + urlServicio);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod(ConstantesUtil.PARAM_REQUEST_METHOD_GET);
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_ACCEPT_ENCODING, "gzip, deflate, br");
			conn.setRequestProperty(ConstantesUtil.PARAM_REQUEST_PROPERTY_CONTENT_TYPE,
					"application/xml;charset=UTF-8");
			conn.addRequestProperty("Accept-Encoding", "identity");

			if (conn.getResponseCode() != 200) {
				objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
				objResultado.setErrorCode(String.valueOf(conn.getResponseCode()));
				objResultado.setMessage(conn.getResponseMessage());
				
				log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN_ERROR,
						ConstantesUtil.PARAM_SIGED_NOM_METODO_TIPO_DOCUMENTO ));
				log.error(String.format(ConstantesUtil.PARAM_SIGED_LOG_SERVICIO_NO_DISPONIBLE, objResultado.getErrorCode(), objResultado.getMessage()));
				
				return objResultado;
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())), 100000);
			StringBuilder xmlString = new StringBuilder("");
			String output;
			while ((output = br.readLine()) != null) {
				output = CommonsUtil.getLimpiarString(output);
				xmlString.append(output);
			}

			Document doc = CommonsUtil.convertStringToXMLDocument(xmlString);
			doc.getDocumentElement().normalize();
			objResultado.setResultCode(CommonsUtil.getValue2Tag(doc, "tiposdocumento", "resultCode"));
			objResultado.setMessage(CommonsUtil.getValue2Tag(doc, "tiposdocumento", "message"));
			objResultado.setErrorCode(CommonsUtil.getValue2Tag(doc, "tiposdocumento", "errorCode"));

			if (objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				
				List<TipoDocumento> lTipoDocumento = new LinkedList<TipoDocumento>();
				// Obtenemos la lista de las etiquetas "tipoDocumento"
				NodeList nodeListTiposDoc = doc.getElementsByTagName("tipoDocumento");
				for (int i = 0; i < nodeListTiposDoc.getLength(); i++) {
					Node node = nodeListTiposDoc.item(i);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
	
						TipoDocumento obj = new TipoDocumento();
	
						Element element = (Element) nodeListTiposDoc.item(i);
	
						obj.setIdTipoDocumento(CommonsUtil.getTagValue("idTipoDocumento", element));
						obj.setNombreTipoDocumento(CommonsUtil.getTagValue("nombreTipoDocumento", element));
	
						lTipoDocumento.add(obj);
					}
				}
	
				objResultado.setListTipoDocumento(lTipoDocumento);
	
	
			} else {
				String mensajeSiged = (objResultado.getErrorMessage() != null && !objResultado.getErrorMessage().trim().equals("")) ? 
						objResultado.getErrorMessage() : objResultado.getMessage();
				
				String mensajeErrorSiged = String.format(ConstantesUtil.MENSAJE_ErrorSiged,
						ConstantesUtil.PARAM_SIGED_NOM_METODO_TIPO_DOCUMENTO, objResultado.getErrorCode(), mensajeSiged);
				
				log.error(mensajeErrorSiged);
				objResultado.setMessage(mensajeErrorSiged);
				
			}

			conn.disconnect();
		} catch (Exception e) {
			objResultado.setResultCode(ConstantesUtil.PARAM_RESULTADO_FAIL_DOS);
			objResultado.setErrorCode(ConstantesUtil.PARAM_RESULTADO_ERROR_EXCEPTION);
			objResultado.setMessage("Message: " + e.getMessage() + " || Localized: " + e.getLocalizedMessage()
					+ " || Cause: " + e.getCause());
			e.printStackTrace();
			log.error(e.getMessage(), e);
		}
		
		log.info(String.format(ConstantesUtil.PARAM_SIGED_LOG_DE_USO_FIN,
				ConstantesUtil.PARAM_SIGED_NOM_METODO_TIPO_DOCUMENTO));

		return objResultado;
	}


	@SuppressWarnings("unchecked")
	@Override
	public byte[] generarReporteListadoExcel(ReporteAuxDTO<?> reporteAuxDTO) throws Exception {

		List<Object> configsReporte = this.obtenerConfiguracionesReporte(reporteAuxDTO);
		String cadenaFiltro = (String) configsReporte.get(0);
		List<?> listData = (List<?>) configsReporte.get(1);
		List<ImgReporteDTO> listImgs = (List<ImgReporteDTO>) configsReporte.get(2);
		String codreporte = (String) configsReporte.get(3);
		CabeceraReporteExpSigedDTO cabeceraReporteExpSigedDTO = (CabeceraReporteExpSigedDTO) configsReporte.get(4);
		CabeceraReporteHistoricoUmDTO cabeceraReporteHistoricoUM = (CabeceraReporteHistoricoUmDTO) configsReporte
				.get(5);

		ArrayList<ReporteColumnDTO> columnasAExportar = reporteAuxDTO.getColumnasAExportar();

		byte[] archivo = null;

		switch (codreporte) {
			case "reporte": // exportación con diseño estandar
				archivo = this.crearTablaDatosExcel(listData, columnasAExportar, reporteAuxDTO.getTituloReporte(),
						cadenaFiltro, listImgs);
				break;

			case "EXPPAS_EVAL_PASO_ANIO": // exportación con diseño personalizado para un reporte especifico
				archivo = this.crearTablaDatosExcelExpPasPaso(listData, columnasAExportar,
						reporteAuxDTO.getTituloReporte(), cadenaFiltro, listImgs);

				break;

			case "EXP_DOCUMENTOS": // exportación con diseño personalizado para reporte 'documentos de expediente'
				archivo = this.crearTablaDatosExcelReporteExpediente(listData, columnasAExportar,
						reporteAuxDTO.getTituloReporte(), cadenaFiltro, cabeceraReporteExpSigedDTO);

				break;

			case "EXP_TRAZABILIDAD": // exportación con diseño personalizado para reporte 'trazabilidad de
										// expediente'
				archivo = this.crearTablaDatosExcelReporteExpediente(listData, columnasAExportar,
						reporteAuxDTO.getTituloReporte(), cadenaFiltro, cabeceraReporteExpSigedDTO);

				break;

			case "HISTORICO_UM": // exportación con diseño personalizado para reporte 'comparativo historico de
									// UM'
				archivo = this.crearTablaDatosExcelReporteHistoricoUM(listData, columnasAExportar,
						reporteAuxDTO.getTituloReporte(), cadenaFiltro, cabeceraReporteHistoricoUM);

				break;

			default:

				break;
		}

		return archivo;
	}

	@SuppressWarnings("unchecked")
	@Override
	public byte[] generarReporteListadoPdf(ReporteAuxDTO<?> reporteAuxDTO) throws Exception {

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdf.format(new Date());

		List<Object> configsReporte = this.obtenerConfiguracionesReporte(reporteAuxDTO);
		String cadenaFiltro = (String) configsReporte.get(0);
		List<?> listData = (List<?>) configsReporte.get(1);
		List<ImgReporteDTO> listImgs = (List<ImgReporteDTO>) configsReporte.get(2);

		ArrayList<ReporteColumnDTO> columnasAExportar = reporteAuxDTO.getColumnasAExportar();

		XWPFDocument document = this.crearDocumentHeaderPdf(cadenaFiltro, reporteAuxDTO.getTituloReporte());

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(document, fechaDeGeneracion, "HORIZONTAL", -100, 13000); //PLANTILLA_REPORTE_HORIZONTAL.docx


		List<XWPFParagraph> paragraphs = document.getParagraphs();

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());

				if (text != null && text.contains("tabla_datos")) {
					paragraph.removeRun(j);

					// Creación de la tabla
					XWPFTable table = PoiWordUtil.createTable(document);
					table = this.crearTablaDatosPdf(table, listData, columnasAExportar);
					setAlineacionTabla(table, TableRowAlign.CENTER);
				}
			}
		}

		// insertar el array de imagenes
		if (listImgs.size() != 0) {
			for (ImgReporteDTO img : listImgs) {
				this.addImgInParagraph(document, img.getBase64Img());
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		document.write(baos);

		byte[] archivo = baos.toByteArray();
		Long idTipoExtensionGen = ConstantesUtil.PARAM_SC_PDF;

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	public List<Object> obtenerConfiguracionesReporte(ReporteAuxDTO<?> reporteAuxDTO) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy");

		String orderByReporte = reporteAuxDTO.getOrderByReporte();

		ObjectMapper objectMapper = new ObjectMapper();
		String txtFiltroDTO = objectMapper.writeValueAsString(reporteAuxDTO.getFiltroDTO());

		ObjectMapper mapper = new ObjectMapper();
		List<?> listData = new ArrayList<>();
		String cadenaFiltro = "";
		String codReporte = "reporte";
		List<ImgReporteDTO> lImgReporteDTO = new ArrayList<ImgReporteDTO>();
		CabeceraReporteExpSigedDTO cabeceraReporteExpSigedDTO = new CabeceraReporteExpSigedDTO();
		CabeceraReporteHistoricoUmDTO cabeceraReporteHistoricoUmDTO = new CabeceraReporteHistoricoUmDTO();

		List<Object> configsReporte = new ArrayList<>();

		for (Object object : reporteAuxDTO.getImgsReporte()) {
			String txtImgDTO = objectMapper.writeValueAsString(object);
			ImgReporteDTO ImgReporteDTO = mapper.readValue(txtImgDTO, ImgReporteDTO.class);
			lImgReporteDTO.add(ImgReporteDTO);
		}

		// Ordenamiento
		Sort sort = Sort.unsorted();

		if (orderByReporte != null) {
			if (!orderByReporte.isEmpty()) {
				String order[] = orderByReporte.split(",");
				sort = Sort.by(order[0]);
				if (order[1].equals("asc")) {
					sort = sort.ascending();
				} else {
					sort = sort.descending();
				}
			}
		}

		switch (reporteAuxDTO.getCodigoReporte()) {

			case "EVENTO":

				PgimEventoAuxDTO pgimEventoAuxDTOFiltro = mapper.readValue(txtFiltroDTO, PgimEventoAuxDTO.class);

				if (pgimEventoAuxDTOFiltro.getFeAnioEvento() != null)
					cadenaFiltro += "Año: " + pgimEventoAuxDTOFiltro.getFeAnioEvento().toString() + ", ";
				if (pgimEventoAuxDTOFiltro.getIdTipoEvento() != null)
					cadenaFiltro += "Tipo evento: " + pgimEventoAuxDTOFiltro.getNoTipoEvento() + ", ";
				if (pgimEventoAuxDTOFiltro.getNoUnidadMinera() != null
						&& pgimEventoAuxDTOFiltro.getNoUnidadMinera() != "")
					cadenaFiltro += "Unidad fiscalizada: " + pgimEventoAuxDTOFiltro.getNoUnidadMinera() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.eventoRepository.listarEventosTotalExportar(pgimEventoAuxDTOFiltro.getIdTipoEvento(),
						pgimEventoAuxDTOFiltro.getFeAnioEvento(), pgimEventoAuxDTOFiltro.getNoUnidadMinera(),
						pgimEventoAuxDTOFiltro.getCoUnidadMinera(), sort);

				break;

			case "EXPEDIENTE_EVALUADOR":
				PgimExppasPendientesAuxDTO filtroPgimExppasPendientesAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimExppasPendientesAuxDTO.class);

				if (filtroPgimExppasPendientesAuxDTO.getEtiquetaPersonaAsignada() != "null")
					cadenaFiltro += "Expedientes asignado a: "
							+ filtroPgimExppasPendientesAuxDTO.getEtiquetaPersonaAsignada();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.exppasPendientesAuxRepository.listarReporteExpPersonaAsignada(
						filtroPgimExppasPendientesAuxDTO.getEtiquetaPersonaAsignada(), sort);

				break;

			case "EXPPAS_ANIO":

				cadenaFiltro = " ";

				listData = this.pasAuxRepository.listarReporteExppasAnioExportar(sort);

				break;

			case "EXPPAS_DSU_ANIO":

				cadenaFiltro = " ";

				listData = this.pasAuxRepository.listarReporteExppasdsuAnioExportar(sort);

				break;

			case "EXPPAS_EVAL_FASE_ANIO":
				PgimExpPerfaAuxDTO filtroPgimExpPerfaAuxDTO = mapper.readValue(txtFiltroDTO, PgimExpPerfaAuxDTO.class);

				if (filtroPgimExpPerfaAuxDTO.getAnioSupervision() != null)
					cadenaFiltro += "Año: " + filtroPgimExpPerfaAuxDTO.getAnioSupervision().toString();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.expPerfaAuxRepository
						.listarReporteExpPasPerfaseAnio(filtroPgimExpPerfaAuxDTO.getAnioSupervision(), sort);

				break;
			case "EXPPAS_EVAL_PASO_ANIO":
				codReporte = "EXPPAS_EVAL_PASO_ANIO";
				PgimExpPerpaAuxDTO filtroPgimExpPerpaAuxDTO = mapper.readValue(txtFiltroDTO, PgimExpPerpaAuxDTO.class);

				if (filtroPgimExpPerpaAuxDTO.getAnioSupervision() != null)
					cadenaFiltro += "Año: " + filtroPgimExpPerpaAuxDTO.getAnioSupervision().toString();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.expPerpaAuxRepository
						.listarReporteExpPasPerPasoAnio(filtroPgimExpPerpaAuxDTO.getAnioSupervision(), sort);

				break;

			case "EXPPAS_ESPEC_MES":

				cadenaFiltro = " ";

				listData = this.pasAuxRepository.listarReporteExppasespeMesExportar(sort);

				break;

			case "EXPPAS_TIPOSUST_ANIO":

				cadenaFiltro = " ";

				listData = this.pasAuxRepository.listarReporteExppastipsustAnio(sort);

				break;

			case "EXPPAS_TIPOACTI_ANIO":

				cadenaFiltro = " ";

				listData = this.pasAuxRepository.listarReporteExppastipactiAnio(sort);

				break;

			case "EXPPAS_ESTADO_RESOL":
				PgimExppasEstResolAuxDTO pgimExppasEstResolAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimExppasEstResolAuxDTO.class);

				if (pgimExppasEstResolAuxDTOFiltro.getAnioSuper() != null
						&& pgimExppasEstResolAuxDTOFiltro.getAnioSuper() != "")
					cadenaFiltro += "Año: " + pgimExppasEstResolAuxDTOFiltro.getAnioSuper().toString();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.pasAuxRepository
						.listarReporteExppasEstResol(pgimExppasEstResolAuxDTOFiltro.getAnioSuper(), sort);

				break;

			case "EXPPAS_ESPEC_ANIO":

				cadenaFiltro = " ";

				listData = this.pasAuxRepository.listarReporteExpPasEspecAnio(sort);

				break;

			case "EXPPAS_PER_DS_ESPEC":

				PgimExppasEvaluadorAuxDTO filtroPgimExppasEvaluadorAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimExppasEvaluadorAuxDTO.class);

				if (filtroPgimExppasEvaluadorAuxDTO.getIdEspecialidad() != null)
					cadenaFiltro += "Especialidad: " + filtroPgimExppasEvaluadorAuxDTO.getNoEspecialidad() + ", ";
				if (filtroPgimExppasEvaluadorAuxDTO.getIdDivisionSupervisora() != null)
					cadenaFiltro += "DIV. SUP: " + filtroPgimExppasEvaluadorAuxDTO.getNoDivisionSupervisora() + ", ";
				if (filtroPgimExppasEvaluadorAuxDTO.getNoEvaluador() != null)
					cadenaFiltro += "Evaluador: " + filtroPgimExppasEvaluadorAuxDTO.getNoEvaluador() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.pasAuxRepository.listarReporteExpPasPerDsEspec(
						filtroPgimExppasEvaluadorAuxDTO.getIdDivisionSupervisora(),
						filtroPgimExppasEvaluadorAuxDTO.getIdEspecialidad(),
						filtroPgimExppasEvaluadorAuxDTO.getNoEvaluador(), sort);

				break;

			case "EXPPAS_PAS_PROCESO":

				PgimPasAuxDTO filtroPgimPasAuxDTO = mapper.readValue(txtFiltroDTO, PgimPasAuxDTO.class);

				if (filtroPgimPasAuxDTO.getIdFaseActual() != null)
					cadenaFiltro += "Fase: " + filtroPgimPasAuxDTO.getNoFaseActual() + ", ";
				if (filtroPgimPasAuxDTO.getIdPasoActual() != null)
					cadenaFiltro += "Paso: " + filtroPgimPasAuxDTO.getNoPasoActual() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.pasAuxRepository.listarReporteExpPasProceso(filtroPgimPasAuxDTO.getIdFaseActual(),
						filtroPgimPasAuxDTO.getIdPasoActual(),
						this.valorParametroRepository
								.obtenerIdValorParametro(EValorParametro.REPAS_CNCLAR_FLJO.toString()),
						this.valorParametroRepository
								.obtenerIdValorParametro(EValorParametro.REPAS_FNLZAR_FLJO.toString()),
						sort);

				break;

			case "EXP_DOCUMENTOS":
				codReporte = "EXP_DOCUMENTOS";
				PgimDocumentoAuxDTO pgimDocumentoAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimDocumentoAuxDTO.class);

				if (pgimDocumentoAuxDTOFiltro.getNuExpedienteSiged() != null
						&& pgimDocumentoAuxDTOFiltro.getNuExpedienteSiged() != "") {

					listData = this.pasAuxRepository
							.listarReporteExpDocs(pgimDocumentoAuxDTOFiltro.getNuExpedienteSiged(), sort);

					String unidadMinera = "";
					String agenteSuperv = "";
					String rucAs = "";

					PgimSupervisionAuxDTO pgimSupervisionAuxDTO = supervisionRepository
							.obtenerCabecSupervisionPorExpediente(pgimDocumentoAuxDTOFiltro.getNuExpedienteSiged());

					if (pgimSupervisionAuxDTO != null) {
						unidadMinera = pgimSupervisionAuxDTO.getNoUnidadMinera();
						agenteSuperv = pgimSupervisionAuxDTO.getAsNoRazonSocial();
						rucAs = pgimSupervisionAuxDTO.getAsCoDocumentoIdentidad();
					} else {
						PgimPasAuxDTO pgimPasAuxDTO = pasAuxRepository
								.obtenerCabecPasPorExpediente(pgimDocumentoAuxDTOFiltro.getNuExpedienteSiged());
						if (pgimPasAuxDTO != null) {
							unidadMinera = pgimPasAuxDTO.getNoUnidadMinera();
							agenteSuperv = pgimPasAuxDTO.getAsNoRazonSocial();
							rucAs = pgimPasAuxDTO.getAsCoDocumentoIdentidad();
						}
					}

					String dataCabecera = "dataCabecera: Unidad fiscalizada: " + unidadMinera + ", Agente fiscalizado: "
							+ agenteSuperv + " - " + rucAs;
					cadenaFiltro = dataCabecera;
					cadenaFiltro = cadenaFiltro.trim();

					cabeceraReporteExpSigedDTO.setNoUnidadMinera(unidadMinera);
					cabeceraReporteExpSigedDTO.setAsNoRazonSocial(agenteSuperv);
					cabeceraReporteExpSigedDTO.setAsCoDocumentoIdentidad(rucAs);
				}

				break;

			case "EXP_TRAZABILIDAD":
				codReporte = "EXP_TRAZABILIDAD";
				PgimDocumentoAuxDTO pgimDocumentoAuxDTOFiltroTraz = mapper.readValue(txtFiltroDTO,
						PgimDocumentoAuxDTO.class);

				if (pgimDocumentoAuxDTOFiltroTraz.getNuExpedienteSiged() != null
						&& pgimDocumentoAuxDTOFiltroTraz.getNuExpedienteSiged() != "") {

					PgimInstanciaProcesDTO pgimInstanciaProcesDTO = this.instanciaProcesService
							.obtenerInstanciaProcesoPorNuExpediente(
									pgimDocumentoAuxDTOFiltroTraz.getNuExpedienteSiged());

					Long idInstanciaProceso = null;

					if (pgimInstanciaProcesDTO != null) {
						idInstanciaProceso = pgimInstanciaProcesDTO.getIdInstanciaProceso();
					}

					listData = this.instanciaPasoAuxRepository
							.obtenerInstanciaPasoAuxPorInstanciaProcesoList(idInstanciaProceso, sort);

					String unidadMinera = "";
					String agenteSuperv = "";
					String rucAs = "";

					PgimSupervisionAuxDTO pgimSupervisionAuxDTO = supervisionRepository
							.obtenerCabecSupervisionPorExpediente(pgimDocumentoAuxDTOFiltroTraz.getNuExpedienteSiged());

					if (pgimSupervisionAuxDTO != null) {
						unidadMinera = pgimSupervisionAuxDTO.getNoUnidadMinera();
						agenteSuperv = pgimSupervisionAuxDTO.getAsNoRazonSocial();
						rucAs = pgimSupervisionAuxDTO.getAsCoDocumentoIdentidad();
					} else {
						PgimPasAuxDTO pgimPasAuxDTO = pasAuxRepository
								.obtenerCabecPasPorExpediente(pgimDocumentoAuxDTOFiltroTraz.getNuExpedienteSiged());
						if (pgimPasAuxDTO != null) {
							unidadMinera = pgimPasAuxDTO.getNoUnidadMinera();
							agenteSuperv = pgimPasAuxDTO.getAsNoRazonSocial();
							rucAs = pgimPasAuxDTO.getAsCoDocumentoIdentidad();
						}
					}

					String dataCabecera = "dataCabecera: Unidad fiscalizada: " + unidadMinera + ", Agente fiscalizado: "
							+ agenteSuperv + " - " + rucAs;
					cadenaFiltro = dataCabecera;
					cadenaFiltro = cadenaFiltro.trim();

					cabeceraReporteExpSigedDTO.setNoUnidadMinera(unidadMinera);
					cabeceraReporteExpSigedDTO.setAsNoRazonSocial(agenteSuperv);
					cabeceraReporteExpSigedDTO.setAsCoDocumentoIdentidad(rucAs);
				}

				break;

			case "INFRACCIONES":
				PgimDetaInfraccionesAuxDTO filtroPgimDetaInfraccionesAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimDetaInfraccionesAuxDTO.class);

				String feInicio = "";
				String feFin = "";
				if (filtroPgimDetaInfraccionesAuxDTO.getFeInicioSupervisionReal() != null)
					feInicio = sdf.format(filtroPgimDetaInfraccionesAuxDTO.getFeInicioSupervisionReal());
				if (filtroPgimDetaInfraccionesAuxDTO.getFeFinSupervisionReal() != null)
					feFin = sdf.format(filtroPgimDetaInfraccionesAuxDTO.getFeFinSupervisionReal());

				if (filtroPgimDetaInfraccionesAuxDTO.getFeInicioSupervisionReal() != null
						&& filtroPgimDetaInfraccionesAuxDTO.getFeFinSupervisionReal() != null)
					cadenaFiltro += "Desde " + feInicio + " Hasta " + feFin;

				listData = this.detaInfraccionesRepository.listarReporteInfracciones(
						filtroPgimDetaInfraccionesAuxDTO.getFeInicioSupervisionReal(),
						filtroPgimDetaInfraccionesAuxDTO.getFeFinSupervisionReal(), sort);
				break;

			case "INFRACCIONES_AS":
				PgimDetaInfraccionesAuxDTO PgimDetaInfraccionesAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimDetaInfraccionesAuxDTO.class);

				if ((PgimDetaInfraccionesAuxDTOFiltro.getEtiquetaAgenteSupervisado() != null
						&& PgimDetaInfraccionesAuxDTOFiltro.getEtiquetaAgenteSupervisado() != "")
						|| (PgimDetaInfraccionesAuxDTOFiltro.getDiAgenteSupervisado() != null
								&& PgimDetaInfraccionesAuxDTOFiltro.getDiAgenteSupervisado() != "")) {
					String agenteSupervisado = PgimDetaInfraccionesAuxDTOFiltro.getEtiquetaUnidadMinera();

					if (PgimDetaInfraccionesAuxDTOFiltro.getDiAgenteSupervisado() != null
							&& PgimDetaInfraccionesAuxDTOFiltro.getDiAgenteSupervisado() != "") {
						PgimAgenteSupervisadoDTO pgimAgenteSupervisado = this.agenteSupervisadoRepository
								.obtenerAgenteSupervisadoPorRuc(
										PgimDetaInfraccionesAuxDTOFiltro.getDiAgenteSupervisado());
						agenteSupervisado = pgimAgenteSupervisado.getDescNoRazonSocial() + " (" + pgimAgenteSupervisado.getDescCoDocumentoIdentidad() + ")";
					} else {
						PgimAgenteSupervisadoDTO pgimAgenteSupervisado = this.agenteSupervisadoRepository
								.obtenerAgenteSupervisadoPorRuc(
										PgimDetaInfraccionesAuxDTOFiltro.getEtiquetaAgenteSupervisado());
						agenteSupervisado = pgimAgenteSupervisado.getDescNoRazonSocial() + " (" + pgimAgenteSupervisado.getDescCoDocumentoIdentidad() + ")";;
					}
					cadenaFiltro += "Agente fiscalizado: " + agenteSupervisado;
				}

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.detaInfraccionesRepository.listarReporteInfraccionesAS(
						PgimDetaInfraccionesAuxDTOFiltro.getDiAgenteSupervisado(),
						PgimDetaInfraccionesAuxDTOFiltro.getEtiquetaAgenteSupervisado(), sort);

				break;
			case "INFRACCIONES_ESPECIALIDAD":
				PgimDetaInfraccionesAuxDTO filterPgimDetaInfraccionesAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimDetaInfraccionesAuxDTO.class);

				if (filterPgimDetaInfraccionesAuxDTO.getNoEspecialidad() != null)
					cadenaFiltro += "Especialidad: " + filterPgimDetaInfraccionesAuxDTO.getNoEspecialidad();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.detaInfraccionesRepository
						.listarReporteInfraccionesEspec(filterPgimDetaInfraccionesAuxDTO.getNoEspecialidad(), sort);

				break;

			case "INFRACCIONXAS":

				PgimInfraccionxtitularAuxDTO pgimInfraccionxtitularAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimInfraccionxtitularAuxDTO.class);

				if (pgimInfraccionxtitularAuxDTOFiltro.getIdEstrato() != null)
					cadenaFiltro += "Estrato: " + pgimInfraccionxtitularAuxDTOFiltro.getNoCortoEstrato();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.infraccionAuxRepository.listarInfraccionxtitularExportar(
						pgimInfraccionxtitularAuxDTOFiltro.getIdEstrato(),
						pgimInfraccionxtitularAuxDTOFiltro.getDescNuInfraccionesMin(), sort);

				break;

			case "INFRACCION_ESPEC_ANIO":

				cadenaFiltro = " ";

				listData = this.infraccionAuxRepository.listarReporteInfraccionxespExportar(sort);

				break;

			case "INFRACCION_ESPEC_MES":
				PgimInfraccionxespMesAuxDTO pgimInfraccionxespMesAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimInfraccionxespMesAuxDTO.class);

				if (pgimInfraccionxespMesAuxDTOFiltro.getAnio() != null
						&& pgimInfraccionxespMesAuxDTOFiltro.getAnio() != "")
					cadenaFiltro += "Año: " + pgimInfraccionxespMesAuxDTOFiltro.getAnio().toString();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.infraccionAuxRepository
						.listarReporteInfraccionxespMesExportar(pgimInfraccionxespMesAuxDTOFiltro.getAnio(), sort);

				break;

			case "INFRACCIONES_UM":
				PgimDetaInfraccionesAuxDTO pgimDetaInfraccionesAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimDetaInfraccionesAuxDTO.class);

				if ((pgimDetaInfraccionesAuxDTO.getEtiquetaUnidadMinera() != null
						&& pgimDetaInfraccionesAuxDTO.getEtiquetaUnidadMinera() != "")
						|| (pgimDetaInfraccionesAuxDTO.getCoUnidadMinera() != null
								&& pgimDetaInfraccionesAuxDTO.getCoUnidadMinera() != "")) {
					String unidadMinera = pgimDetaInfraccionesAuxDTO.getEtiquetaUnidadMinera();

					if (pgimDetaInfraccionesAuxDTO.getCoUnidadMinera() != null
							&& pgimDetaInfraccionesAuxDTO.getCoUnidadMinera() != "") {
						PgimUnidadMineraDTO pgimUnidadMinera = this.unidadMineraRepository
								.obtenerUnidadMineraPorCod(pgimDetaInfraccionesAuxDTO.getCoUnidadMinera());
						unidadMinera = pgimUnidadMinera.getNoUnidadMinera() + " (" + pgimUnidadMinera.getCoUnidadMinera() + ")";
					} else {
						PgimUnidadMineraDTO pgimUnidadMinera = this.unidadMineraRepository
								.obtenerUnidadMineraPorCod(pgimDetaInfraccionesAuxDTO.getEtiquetaUnidadMinera());
						unidadMinera = pgimUnidadMinera.getNoUnidadMinera() + " (" + pgimUnidadMinera.getCoUnidadMinera() + ")";
					}
					cadenaFiltro += "Unidad fiscalizada: " + unidadMinera;
				}

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.detaInfraccionesRepository.listarReporteInfraccionesUM(
						pgimDetaInfraccionesAuxDTO.getEtiquetaUnidadMinera(),
						pgimDetaInfraccionesAuxDTO.getCoUnidadMinera(), sort);

				break;

			case "INFRACCIONES_DS":
				PgimDetaInfraccionesAuxDTO pgimDetaInfraccionesAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimDetaInfraccionesAuxDTO.class);

				if (!pgimDetaInfraccionesAuxDTOFiltro.getNoDivisionSupervisora().equals("_vacio_"))
					cadenaFiltro += "División Supervisora: "
							+ pgimDetaInfraccionesAuxDTOFiltro.getNoDivisionSupervisora();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.detaInfraccionesRepository
						.listarReporteInfraccionesDS(pgimDetaInfraccionesAuxDTOFiltro.getIdDivisionSupervisora(), sort);

				break;

			case "INFRACCION_UM_ANIO":

				PgimInfraccionxumAuxDTO filtroPgimInfraccionxumAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimInfraccionxumAuxDTO.class);

				if (filtroPgimInfraccionxumAuxDTO.getIdTipoUnidadMinera() != null)
					cadenaFiltro += "Tipo de unidad fiscalizada: " + filtroPgimInfraccionxumAuxDTO.getNoTipoUnidadMinera()
							+ ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.infraccionAuxRepository.listarReporteInfraccionesUmAnio(
						filtroPgimInfraccionxumAuxDTO.getNroInfraccionTotal(),
						filtroPgimInfraccionxumAuxDTO.getIdTipoUnidadMinera(), sort);

				break;

			case "INFRACCIONESTOP15":
				PgimInfracciontop15AuxDTO filtroPgimInfracciontop15AuxDTO = mapper.readValue(txtFiltroDTO,
						PgimInfracciontop15AuxDTO.class);

				if (filtroPgimInfracciontop15AuxDTO.getAnioInfraccion() != null)
					cadenaFiltro += "Año: " + filtroPgimInfracciontop15AuxDTO.getAnioInfraccion().toString();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.infracciontop15AuxRepository
						.listarReporteInfraccionesTop15(filtroPgimInfracciontop15AuxDTO.getAnioInfraccion());

				break;

			case "REPR_DETALLADO_LIQU":

				PgimContrLiquidacionAuxDTO pgimContrLiquidacionAuxDTOFiltro = mapper.readValue(txtFiltroDTO, PgimContrLiquidacionAuxDTO.class);
				
				if (pgimContrLiquidacionAuxDTOFiltro.getNoEspecialidad() != null && pgimContrLiquidacionAuxDTOFiltro.getNoEspecialidad() != "")
					cadenaFiltro += "Especialidad: " + pgimContrLiquidacionAuxDTOFiltro.getNoEspecialidad() + ", ";
					
				if (pgimContrLiquidacionAuxDTOFiltro.getNoDivisionSupervisora() != null && pgimContrLiquidacionAuxDTOFiltro.getNoDivisionSupervisora() != "")
					cadenaFiltro += "División supervisora: " + pgimContrLiquidacionAuxDTOFiltro.getNoDivisionSupervisora() + ", ";
					
				if (pgimContrLiquidacionAuxDTOFiltro.getCoSupervision() != null && pgimContrLiquidacionAuxDTOFiltro.getCoSupervision() != "")
					cadenaFiltro += "Código de Fiscalización: " + pgimContrLiquidacionAuxDTOFiltro.getCoSupervision() + ", ";
					
				if (pgimContrLiquidacionAuxDTOFiltro.getCoUnidadMinera() != null && pgimContrLiquidacionAuxDTOFiltro.getCoUnidadMinera() != "")
					cadenaFiltro += "Código de Unidad Fiscalizable: " + pgimContrLiquidacionAuxDTOFiltro.getCoUnidadMinera() + ", ";

				if (pgimContrLiquidacionAuxDTOFiltro.getNoFaseDestinoFisc() != null && pgimContrLiquidacionAuxDTOFiltro.getNoFaseDestinoFisc() != "")
					cadenaFiltro += "Fase de Fiscalización: " + pgimContrLiquidacionAuxDTOFiltro.getNoFaseDestinoFisc() + ", ";

				if (pgimContrLiquidacionAuxDTOFiltro.getNoPasoDestinoFisc() != null && pgimContrLiquidacionAuxDTOFiltro.getNoPasoDestinoFisc() != "")
					cadenaFiltro += "Tarea de Fiscalización: " + pgimContrLiquidacionAuxDTOFiltro.getNoPasoDestinoFisc() + ", ";
				
				if (pgimContrLiquidacionAuxDTOFiltro.getNuLiquidacion() != null && pgimContrLiquidacionAuxDTOFiltro.getNuLiquidacion() != "")
					cadenaFiltro += "Número de liquidación: " + pgimContrLiquidacionAuxDTOFiltro.getNuLiquidacion() + ", ";
						
				if (pgimContrLiquidacionAuxDTOFiltro.getCoExpSigedLiquidacion() != null && pgimContrLiquidacionAuxDTOFiltro.getCoExpSigedLiquidacion() != "")
					cadenaFiltro += "Expediente de la liquidación: " + pgimContrLiquidacionAuxDTOFiltro.getCoExpSigedLiquidacion() + ", ";

				if (pgimContrLiquidacionAuxDTOFiltro.getNoFaseDestinoLiquidacion() != null && pgimContrLiquidacionAuxDTOFiltro.getNoFaseDestinoLiquidacion() != "")
					cadenaFiltro += "Fase de liquidación: " + pgimContrLiquidacionAuxDTOFiltro.getNoFaseDestinoLiquidacion() + ", ";

				if (pgimContrLiquidacionAuxDTOFiltro.getNoPasoDestinoLiquidacion() != null && pgimContrLiquidacionAuxDTOFiltro.getNoPasoDestinoLiquidacion() != "")
					cadenaFiltro += "Tarea de liquidación: " + pgimContrLiquidacionAuxDTOFiltro.getNoPasoDestinoLiquidacion() + ", ";
					
				if (pgimContrLiquidacionAuxDTOFiltro.getNoEstadoConsumo() != null && pgimContrLiquidacionAuxDTOFiltro.getNoEstadoConsumo() != "")
					cadenaFiltro += "Tarea de liquidación: " + pgimContrLiquidacionAuxDTOFiltro.getNoEstadoConsumo() + ", ";
	
				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.contrLiquidacionAuxRepository.listarContrLiquidacionAux(
					pgimContrLiquidacionAuxDTOFiltro.getIdEspecialidad(),
					pgimContrLiquidacionAuxDTOFiltro.getIdDivisionSupervisora(),
					pgimContrLiquidacionAuxDTOFiltro.getCoSupervision(),
					pgimContrLiquidacionAuxDTOFiltro.getCoUnidadMinera(),
					pgimContrLiquidacionAuxDTOFiltro.getIdFaseDestinoFisc(),
					pgimContrLiquidacionAuxDTOFiltro.getIdPasoDestinoFisc(),
					pgimContrLiquidacionAuxDTOFiltro.getIdTipoEntregable(),
					pgimContrLiquidacionAuxDTOFiltro.getNuLiquidacion(),
					pgimContrLiquidacionAuxDTOFiltro.getCoExpSigedLiquidacion(),
					pgimContrLiquidacionAuxDTOFiltro.getIdFaseDestinoLiquidacion(),
					pgimContrLiquidacionAuxDTOFiltro.getIdPasoDestinoLiquidacion(),
					pgimContrLiquidacionAuxDTOFiltro.getIdEstadoConsumo(),
					sort);
	
				break;

			case "SUPERVISION":

				PgimSupervisionAuxDTO pgimSupervisionAuxDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimSupervisionAuxDTO.class);

				if (pgimSupervisionAuxDTOFiltro.getNoUnidadMinera() != null
						&& pgimSupervisionAuxDTOFiltro.getNoUnidadMinera() != "")
					cadenaFiltro += "Unidad fiscalizada: " + pgimSupervisionAuxDTOFiltro.getNoUnidadMinera() + ", ";
				if (pgimSupervisionAuxDTOFiltro.getAsNoRazonSocial() != null
						&& pgimSupervisionAuxDTOFiltro.getAsNoRazonSocial() != "")
					cadenaFiltro += "Agente fiscalizado: " + pgimSupervisionAuxDTOFiltro.getAsNoRazonSocial() + ", ";
				if (pgimSupervisionAuxDTOFiltro.getIdEspecialidad() != null)
					cadenaFiltro += "Especialidad: " + pgimSupervisionAuxDTOFiltro.getNoEspecialidad() + ", ";
				if (pgimSupervisionAuxDTOFiltro.getIdSubtipoSupervision() != null)
					cadenaFiltro += "Tipo: " + pgimSupervisionAuxDTOFiltro.getNoTipoSupervision() + ", ";
				if (pgimSupervisionAuxDTOFiltro.getIdFaseActual() != null)
					cadenaFiltro += "Fase actual: " + pgimSupervisionAuxDTOFiltro.getNoFaseActual() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.supervisionRepository.listarSupervisionesReporteExportar(
						pgimSupervisionAuxDTOFiltro.getCoUnidadMinera(),
						pgimSupervisionAuxDTOFiltro.getNoUnidadMinera(),
						pgimSupervisionAuxDTOFiltro.getAsCoDocumentoIdentidad(),
						pgimSupervisionAuxDTOFiltro.getAsNoRazonSocial(),
						pgimSupervisionAuxDTOFiltro.getIdEspecialidad(),
						pgimSupervisionAuxDTOFiltro.getIdSubtipoSupervision(),
						pgimSupervisionAuxDTOFiltro.getIdFaseActual(), sort,
						this.valorParametroRepository
								.obtenerIdValorParametro(EValorParametro.REPAS_CNCLAR_FLJO.toString()),
						this.valorParametroRepository
								.obtenerIdValorParametro(EValorParametro.REPAS_FNLZAR_FLJO.toString()));

				break;

			case "SUPERVISION_ESTADO":

				PgimSupervisionDTO pgimSupervisionDTOFiltro = mapper.readValue(txtFiltroDTO, PgimSupervisionDTO.class);

				if (pgimSupervisionDTOFiltro.getDescNoUnidadMinera() != null
						&& pgimSupervisionDTOFiltro.getDescNoUnidadMinera() != "")
					cadenaFiltro += "Unidad fiscalizada: " + pgimSupervisionDTOFiltro.getDescNoUnidadMinera() + ", ";
				if (pgimSupervisionDTOFiltro.getDescNoRazonSocial() != null
						&& pgimSupervisionDTOFiltro.getDescNoRazonSocial() != "")
					cadenaFiltro += "Agente fiscalizado: " + pgimSupervisionDTOFiltro.getDescNoRazonSocial() + ", ";
				if (pgimSupervisionDTOFiltro.getDescNoEspecialidad() != null
						&& pgimSupervisionDTOFiltro.getDescNoEspecialidad() != "")
					cadenaFiltro += "Especialidad: " + pgimSupervisionDTOFiltro.getDescNoEspecialidad() + ", ";
				if (pgimSupervisionDTOFiltro.getDescTipoSupervision() != null
						&& pgimSupervisionDTOFiltro.getDescTipoSupervision() != "")
					cadenaFiltro += "Tipo: " + pgimSupervisionDTOFiltro.getDescTipoSupervision() + ", ";
				if (pgimSupervisionDTOFiltro.getDescNoFaseProceso() != null
						&& pgimSupervisionDTOFiltro.getDescNoFaseProceso() != "")
					cadenaFiltro += "Fase actual: " + pgimSupervisionDTOFiltro.getDescNoFaseProceso() + ", ";
				if (pgimSupervisionDTOFiltro.getDescNoPasoProcesoDestino() != null
						&& pgimSupervisionDTOFiltro.getDescNoPasoProcesoDestino() != "")
					cadenaFiltro += "Paso actual: " + pgimSupervisionDTOFiltro.getDescNoPasoProcesoDestino() + ", ";
				if (pgimSupervisionDTOFiltro.getCoSupervision() != null
						&& pgimSupervisionDTOFiltro.getCoSupervision() != "")
					cadenaFiltro += "Código fiscalización: " + pgimSupervisionDTOFiltro.getCoSupervision() + ", ";
				if (pgimSupervisionDTOFiltro.getDescNuExpedienteSiged() != null
						&& pgimSupervisionDTOFiltro.getDescNuExpedienteSiged() != "")
					cadenaFiltro += "N° Expediente Siged: " + pgimSupervisionDTOFiltro.getDescNuExpedienteSiged()
							+ ", ";
				if (pgimSupervisionDTOFiltro.getDescNoResponsable() != null
						&& pgimSupervisionDTOFiltro.getDescNoResponsable() != "")
					cadenaFiltro += "Responsable: " + pgimSupervisionDTOFiltro.getDescNoResponsable() + ", ";
				if (pgimSupervisionDTOFiltro.getDescPersonaDestino() != null
						&& pgimSupervisionDTOFiltro.getDescPersonaDestino() != "")
					cadenaFiltro += "Asignado a: " + pgimSupervisionDTOFiltro.getDescPersonaDestino() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.supervisionRepository.listarSupervisionesList(
						pgimSupervisionDTOFiltro.getDescCoUnidadMinera(),
						pgimSupervisionDTOFiltro.getDescNoUnidadMinera(),
						pgimSupervisionDTOFiltro.getDescCoDocumentoIdentidad(),
						pgimSupervisionDTOFiltro.getDescNoRazonSocial(),
						pgimSupervisionDTOFiltro.getDescIdEspecialidad(),
						pgimSupervisionDTOFiltro.getDescIdTipoSupervision(),
						pgimSupervisionDTOFiltro.getDescIdDivisionSupervisora(),
						pgimSupervisionDTOFiltro.getFlPropia(),
						pgimSupervisionDTOFiltro.getCoSupervision(),
						pgimSupervisionDTOFiltro.getDescNuExpedienteSiged(),
						pgimSupervisionDTOFiltro.getDescIdFaseProceso(),
						pgimSupervisionDTOFiltro.getDescIdPasoProceso(),
						pgimSupervisionDTOFiltro.getDescPersonaDestino(),
						pgimSupervisionDTOFiltro.getDescNoResponsable(),
						pgimSupervisionDTOFiltro.getNoUsuarioOrigen(),
						pgimSupervisionDTOFiltro.getDescUsuarioAsignado(), 
						"",
						"0",
						pgimSupervisionDTOFiltro.getTextoBusqueda(), 
						sort);

				break;

			case "SUPERVISION_ESPEC":

				PgimSupervisionAuxDTO pgimSupervisionAuxDTOFiltro2 = mapper.readValue(txtFiltroDTO,
						PgimSupervisionAuxDTO.class);

				if (pgimSupervisionAuxDTOFiltro2.getFeInicioSupervisionDesc() != null
						&& pgimSupervisionAuxDTOFiltro2.getFeInicioSupervisionDesc() != "")
					cadenaFiltro += "Año: " + pgimSupervisionAuxDTOFiltro2.getFeInicioSupervisionDesc();

				cadenaFiltro = cadenaFiltro.trim();

				List<PgimSupervisionAuxDTO> listData0 = this.supervisionRepository
						.listarSupervisionxAnioReporte(pgimSupervisionAuxDTOFiltro2.getFeInicioSupervisionDesc());

				String auxEspec = "";
				int auxProgramadas = 0;
				int auxNoProgramadas = 0;
				int auxTotalEspec = 0;

				List<SupervisionxEspecAuxDTO> lSupervisionxEspecAuxDTO = new ArrayList<>();

				SupervisionxEspecAuxDTO supervisionxEspecAuxDTO = new SupervisionxEspecAuxDTO();

				for (int i = 0; i < listData0.size(); i++) {

					PgimSupervisionAuxDTO pgimSupervisionAuxDTO = listData0.get(i);

					if (i == 0)
						auxEspec = pgimSupervisionAuxDTO.getNoEspecialidad();

					if (pgimSupervisionAuxDTO.getNoEspecialidad().equals(auxEspec)) {

						if (pgimSupervisionAuxDTO.getNoTipoSupervision().toUpperCase()
								.equals("Fiscalización programada".toUpperCase())) {
							auxProgramadas++;
						} else if (pgimSupervisionAuxDTO.getNoTipoSupervision().toUpperCase()
								.equals("Fiscalización no programada".toUpperCase())) {
							auxNoProgramadas++;
						}
						auxTotalEspec++;

					} else {
						supervisionxEspecAuxDTO = new SupervisionxEspecAuxDTO();

						supervisionxEspecAuxDTO.setNoEspecialidad(auxEspec);
						supervisionxEspecAuxDTO.setNuProgramadas(auxProgramadas);
						supervisionxEspecAuxDTO.setNuNoProgramadas(auxNoProgramadas);
						supervisionxEspecAuxDTO.setNuTotalEspecialidad(auxTotalEspec);

						lSupervisionxEspecAuxDTO.add(supervisionxEspecAuxDTO);

						auxEspec = pgimSupervisionAuxDTO.getNoEspecialidad();

						if (pgimSupervisionAuxDTO.getNoTipoSupervision().toUpperCase()
								.equals("Fiscalización programada".toUpperCase())) {
							auxProgramadas = 1;
							auxTotalEspec = 1;
							auxNoProgramadas = 0;

						} else if (pgimSupervisionAuxDTO.getNoTipoSupervision().toUpperCase()
								.equals("Fiscalización no programada".toUpperCase())) {
							auxNoProgramadas = 1;
							auxTotalEspec = 1;
							auxProgramadas = 0;
						}
					}

					if (i == (listData0.size() - 1)) { // en la última iteración
						supervisionxEspecAuxDTO = new SupervisionxEspecAuxDTO();

						supervisionxEspecAuxDTO.setNoEspecialidad(auxEspec);
						supervisionxEspecAuxDTO.setNuProgramadas(auxProgramadas);
						supervisionxEspecAuxDTO.setNuNoProgramadas(auxNoProgramadas);
						supervisionxEspecAuxDTO.setNuTotalEspecialidad(auxTotalEspec);

						lSupervisionxEspecAuxDTO.add(supervisionxEspecAuxDTO);
					}
				}

				listData = lSupervisionxEspecAuxDTO;

				break;

			case "UNIDAD_MINERA":

				cadenaFiltro = " ";

				listData = this.unidadMineraAuxRepository.listarReporteUM(sort);

				break;

			case "AGENTE_SUPERVISADO":

				cadenaFiltro = " ";

				listData = this.agenteSupervisadoRepository.listarReporteAS(sort);

				break;

			case "PAS":
				PgimPasAuxDTO PgimPasAuxDTOFiltro = mapper.readValue(txtFiltroDTO, PgimPasAuxDTO.class);

				if (PgimPasAuxDTOFiltro.getFeCreacionPasAnio() != "null")
					cadenaFiltro += "Año: " + PgimPasAuxDTOFiltro.getFeCreacionPasAnio().toString();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.pasAuxRepository.listarReporteExpPas(PgimPasAuxDTOFiltro.getFeCreacionPasAnio(), sort,
						this.valorParametroRepository
								.obtenerIdValorParametro(EValorParametro.REPAS_CNCLAR_FLJO.toString()),
						this.valorParametroRepository
								.obtenerIdValorParametro(EValorParametro.REPAS_FNLZAR_FLJO.toString()));

				break;

			case "PAS_ESTADO":

				PgimPasAuxDTO pgimPasAuxDTOFiltro = mapper.readValue(txtFiltroDTO, PgimPasAuxDTO.class);

				if (pgimPasAuxDTOFiltro.getNoUnidadMinera() != null && pgimPasAuxDTOFiltro.getNoUnidadMinera() != "")
					cadenaFiltro += "Unidad fiscalizada: " + pgimPasAuxDTOFiltro.getNoUnidadMinera() + ", ";
				if (pgimPasAuxDTOFiltro.getAsNoRazonSocial() != null && pgimPasAuxDTOFiltro.getAsNoRazonSocial() != "")
					cadenaFiltro += "Agente fiscalizado: " + pgimPasAuxDTOFiltro.getAsNoRazonSocial() + ", ";

				if (pgimPasAuxDTOFiltro.getFeCreacionPasAnio() != null && pgimPasAuxDTOFiltro.getFeCreacionPasAnio() != "")
					cadenaFiltro += "Año: " + pgimPasAuxDTOFiltro.getFeCreacionPasAnio() + ", ";

				if (pgimPasAuxDTOFiltro.getNoEspecialidad() != null && pgimPasAuxDTOFiltro.getNoEspecialidad() != "")
					cadenaFiltro += "Especialidad: " + pgimPasAuxDTOFiltro.getNoEspecialidad() + ", ";

				if (pgimPasAuxDTOFiltro.getNoFaseActual() != null && pgimPasAuxDTOFiltro.getNoFaseActual() != "")
					cadenaFiltro += "Fase: " + pgimPasAuxDTOFiltro.getNoFaseActual() + ", ";

				if (pgimPasAuxDTOFiltro.getNoPasoActual() != null && pgimPasAuxDTOFiltro.getNoPasoActual() != "")
					cadenaFiltro += "Paso: " + pgimPasAuxDTOFiltro.getNoPasoActual() + ", ";

				if (pgimPasAuxDTOFiltro.getNuExpedienteSigedPas() != null && pgimPasAuxDTOFiltro.getNuExpedienteSigedPas() != "")
					cadenaFiltro += "N° Expediente: " + pgimPasAuxDTOFiltro.getNuExpedienteSigedPas() + ", ";

				if (pgimPasAuxDTOFiltro.getDescUsuarioAsignado() != null && pgimPasAuxDTOFiltro.getDescUsuarioAsignado() != "")
					cadenaFiltro += "Persona asignada: " + pgimPasAuxDTOFiltro.getDescUsuarioAsignado() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.pasAuxRepository.filtrarReporte(
					pgimPasAuxDTOFiltro.getCoSupervision(),
					pgimPasAuxDTOFiltro.getNoUnidadMinera(), 
					pgimPasAuxDTOFiltro.getAsNoRazonSocial(),
					pgimPasAuxDTOFiltro.getFeCreacionPasAnio(),
                pgimPasAuxDTOFiltro.getIdEspecialidad(),
                pgimPasAuxDTOFiltro.getIdFaseActual(),
                pgimPasAuxDTOFiltro.getIdPasoActual(),
                pgimPasAuxDTOFiltro.getNuExpedienteSigedPas(),
                pgimPasAuxDTOFiltro.getNoUsuarioOrigen(),
                pgimPasAuxDTOFiltro.getDescUsuarioAsignado(),
                pgimPasAuxDTOFiltro.getDescPersonaDestino(),
                "", 
                "0", 
                pgimPasAuxDTOFiltro.getTextoBusqueda(),
						sort);

				break;

			case "SUPER_PROG":

				PgimSuperProgramadaAuxDTO filtroPgimSuperProgramadaAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimSuperProgramadaAuxDTO.class);

				if (filtroPgimSuperProgramadaAuxDTO.getIdDivisionSupervisora() != null)
					cadenaFiltro += "Division supervisora: "
							+ filtroPgimSuperProgramadaAuxDTO.getNoDivisionSupervisora() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.prgrmSupervisionRepository
						.listarReporteSuperProgramada(filtroPgimSuperProgramadaAuxDTO.getIdDivisionSupervisora(), sort);

				break;

			case "SUPER_NO_PROG":

				PgimSupernpDsEspAuxDTO filtroPgimSupernpDsEspAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimSupernpDsEspAuxDTO.class);

				if (filtroPgimSupernpDsEspAuxDTO.getIdDivisionSupervisora() != null)
					cadenaFiltro += "Division supervisora: " + filtroPgimSupernpDsEspAuxDTO.getNoDivisionSupervisora()
							+ ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.prgrmSupervisionRepository
						.listarReporteSuperNoProgramada(filtroPgimSupernpDsEspAuxDTO.getIdDivisionSupervisora(), sort);

				break;

			case "PROG_SUPER_DS_UM":

				PgimSuperDsUmAuxDTO filtroPgimSuperDsUmAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimSuperDsUmAuxDTO.class);

				if (filtroPgimSuperDsUmAuxDTO.getIdDivisionSupervisora() != null)
					cadenaFiltro += "Division supervisora: " + filtroPgimSuperDsUmAuxDTO.getNoDivisionSupervisora()
							+ ", ";
				if (filtroPgimSuperDsUmAuxDTO.getNoRazonSocial() != null
						&& !filtroPgimSuperDsUmAuxDTO.getNoRazonSocial().equals(""))
					cadenaFiltro += "Agente fiscalizado: " + filtroPgimSuperDsUmAuxDTO.getNoRazonSocial() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.prgrmSupervisionRepository.listarReporteSuperDsUm(
						filtroPgimSuperDsUmAuxDTO.getIdDivisionSupervisora(),
						filtroPgimSuperDsUmAuxDTO.getNoRazonSocial(), sort);

				break;

			case "PRESUPUESTO_DS_ESPEC":

				PgimPresupuestoDsEspAuxDTO filtroPgimPresupuestoDsEspAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimPresupuestoDsEspAuxDTO.class);

				if (filtroPgimPresupuestoDsEspAuxDTO.getIdDivisionSupervisora() != null)
					cadenaFiltro += "Division supervisora: "
							+ filtroPgimPresupuestoDsEspAuxDTO.getNoDivisionSupervisora() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.prgrmSupervisionRepository
						.listarReportePresupDsEspec(filtroPgimPresupuestoDsEspAuxDTO.getIdDivisionSupervisora(), sort);

				break;

			case "COMPONENTES_UM":

				PgimUnidadMineraDTO pgimUnidadMineraDTOFiltro = mapper.readValue(txtFiltroDTO,
						PgimUnidadMineraDTO.class);

				// if(pgimInfraccionxespMesAuxDTOFiltro.getAnio() != null &&
				// pgimInfraccionxespMesAuxDTOFiltro.getAnio() != "") cadenaFiltro += "Año: "+
				// pgimInfraccionxespMesAuxDTOFiltro.getAnio().toString();

				// Ordenamiento
				sort = Sort.by("nuCapacidadPlanta");
				sort = sort.descending();

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.componenteMineroRepository
						.listarComponenteMinero(pgimUnidadMineraDTOFiltro.getIdUnidadMinera(), sort);

				break;

			case "HISTORICO_UM":
				codReporte = "HISTORICO_UM";
				PgimCopiaDetalleUmDTO filtroPgimCopiaDetalleUmDTO = mapper.readValue(txtFiltroDTO,
						PgimCopiaDetalleUmDTO.class);

				if (filtroPgimCopiaDetalleUmDTO.getIdUnidadMinera() != null) {

					listData = this.unidadMineraAuxRepository
							.listarHistoricoUMReporte(filtroPgimCopiaDetalleUmDTO.getIdUnidadMinera());

					String codUnidadMinera = filtroPgimCopiaDetalleUmDTO.getCoUnidadMinera();
					String unidadMinera = filtroPgimCopiaDetalleUmDTO.getNoUnidadMinera();
					String tipoUnidadMinera = filtroPgimCopiaDetalleUmDTO.getDescNoTipoUnidadMinera();

					String dataCabecera = "dataCabecera: Código Unidad fiscalizada: " + codUnidadMinera + ", Unidad fiscalizada:"
							+ unidadMinera + ", Tipo unidad fiscalizada: " + tipoUnidadMinera;
					cadenaFiltro = dataCabecera;
					cadenaFiltro = cadenaFiltro.trim();

					cabeceraReporteHistoricoUmDTO.setNoUnidadMinera(unidadMinera);
					cabeceraReporteHistoricoUmDTO.setCoUnidadMinera(codUnidadMinera);
					cabeceraReporteHistoricoUmDTO.setTipoUnidadMinera(tipoUnidadMinera);
				}

				break;

			case "COMPONENTE_UM":

				cadenaFiltro = " ";

				PgimComponenteMineroDTO filtroPgimComponenteMineroDTO = mapper.readValue(txtFiltroDTO,
						PgimComponenteMineroDTO.class);

				if (filtroPgimComponenteMineroDTO.getIdTipoComponenteMinero() != null)
					cadenaFiltro += "Tipo de componente: "
							+ filtroPgimComponenteMineroDTO.getDescIdTipoComponenteMinero()
							+ ", ";
				if (filtroPgimComponenteMineroDTO.getDescAgenteFiscalizado() != null
						&& !filtroPgimComponenteMineroDTO.getDescAgenteFiscalizado().equals(""))
					cadenaFiltro += "Agente fiscalizado: " + filtroPgimComponenteMineroDTO.getDescAgenteFiscalizado()
							+ ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.componenteMinRepository.listarReporteComponenteUM(
						filtroPgimComponenteMineroDTO.getIdTipoComponenteMinero(),
						filtroPgimComponenteMineroDTO.getDescAgenteFiscalizado(), sort);

				break;

			case "TIPIFICACION":

				cadenaFiltro = " ";

				PgimItemTipificacionDTO filtroPgimItemTipificacionDTO = mapper.readValue(txtFiltroDTO,
						PgimItemTipificacionDTO.class);

				if (filtroPgimItemTipificacionDTO.getIdNorma() != null)
					cadenaFiltro += "Norma: " + filtroPgimItemTipificacionDTO.getDescNoCortoNorma() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.itemTipificacionRepository
						.listarItemTipificacionReporte(filtroPgimItemTipificacionDTO.getIdNorma(), sort);

				break;

			case "DEMARCACIONES_UM":

				cadenaFiltro = " ";
				PgimDemarcacionAuxDTO filtroPgimDemarcacionAuxDTO = mapper.readValue(txtFiltroDTO,
						PgimDemarcacionAuxDTO.class);

				String json2 = objectMapper.writeValueAsString(filtroPgimDemarcacionAuxDTO);
				log.info(json2);

				// if(filtroPgimDemarcacionAuxDTO.getCoUnidadMinera() != null &&
				// filtroPgimDemarcacionAuxDTO.getCoUnidadMinera().equals(""))
				// cadenaFiltro = "CoUnidadMinera" +
				// filtroPgimDemarcacionAuxDTO.getCoUnidadMinera() + ", ";

				if (filtroPgimDemarcacionAuxDTO.getNoUnidadMinera() != null
						&& !filtroPgimDemarcacionAuxDTO.getNoUnidadMinera().equals(""))
					cadenaFiltro += "Unidad fiscalizada: " + filtroPgimDemarcacionAuxDTO.getNoUnidadMinera() + ", ";

				// if(filtroPgimDemarcacionAuxDTO.getCoDocumentoIdentidadAf() != null &&
				// filtroPgimDemarcacionAuxDTO.getCoDocumentoIdentidadAf().equals(""))
				// cadenaFiltro = "RUC: " +
				// filtroPgimDemarcacionAuxDTO.getCoDocumentoIdentidadAf() + ", ";

				if (filtroPgimDemarcacionAuxDTO.getNoRazonSocialAf() != null
						&& !filtroPgimDemarcacionAuxDTO.getNoRazonSocialAf().equals(""))
					cadenaFiltro += "Agente fiscalizado: " + filtroPgimDemarcacionAuxDTO.getNoRazonSocialAf() + ", ";

				if (filtroPgimDemarcacionAuxDTO.getIdTipoUnidadMinera() != null)
					cadenaFiltro += "Tipo Unidad fiscalizada: " + filtroPgimDemarcacionAuxDTO.getNoTipoUnidadMinera() + ", ";

				if (filtroPgimDemarcacionAuxDTO.getIdDivisionSupervisora() != null)
					cadenaFiltro += "División Supervisora: " + filtroPgimDemarcacionAuxDTO.getNoDivisionSupervisora()
							+ ", ";

				if (filtroPgimDemarcacionAuxDTO.getDescFlDemarcacion() != null
						&& !filtroPgimDemarcacionAuxDTO.getDescFlDemarcacion().equals(""))
					cadenaFiltro += "¿Con demarcaciones?: " + filtroPgimDemarcacionAuxDTO.getDescConDemarcacion()
							+ ", ";

				if (filtroPgimDemarcacionAuxDTO.getFlPrincipalDemarcacion() != null
						&& !filtroPgimDemarcacionAuxDTO.getFlPrincipalDemarcacion().equals(""))
					cadenaFiltro += "¿Principal?: " + filtroPgimDemarcacionAuxDTO.getPrincipalDemarcacion() + ", ";

				if (filtroPgimDemarcacionAuxDTO.getDescUbigeo() != null
						&& !filtroPgimDemarcacionAuxDTO.getDescUbigeo().equals(""))
					cadenaFiltro += "Ubigeo: " + filtroPgimDemarcacionAuxDTO.getDescUbigeo() + ", ";

				cadenaFiltro = cadenaFiltro.trim();
				cadenaFiltro = (cadenaFiltro.length() > 0) ? cadenaFiltro.substring(0, cadenaFiltro.length() - 1) : "";

				listData = this.demarcacionUMineraRepository.listarReporteDemarcacionesUMinera(
						filtroPgimDemarcacionAuxDTO.getCoUnidadMinera(),
						filtroPgimDemarcacionAuxDTO.getNoUnidadMinera(),
						filtroPgimDemarcacionAuxDTO.getCoDocumentoIdentidadAf(),
						filtroPgimDemarcacionAuxDTO.getNoRazonSocialAf(),
						filtroPgimDemarcacionAuxDTO.getIdTipoUnidadMinera(),
						filtroPgimDemarcacionAuxDTO.getIdDivisionSupervisora(),
						filtroPgimDemarcacionAuxDTO.getFlPrincipalDemarcacion(),
						filtroPgimDemarcacionAuxDTO.getDescFlDemarcacion(),
						filtroPgimDemarcacionAuxDTO.getDescUbigeo(),
						filtroPgimDemarcacionAuxDTO.getIdDistritoDemarcacion());
				break;

			case "EXTRACCION_MM":
				PgimRecursoExtraidoAuxDTO pgimRecursoExtraidoAuxDTOFiltro = mapper.readValue(txtFiltroDTO, PgimRecursoExtraidoAuxDTO.class);

				cadenaFiltro = " ";
				String feInicial="";
				String feFinal="";

				String feAnioMesInicio = "";
				String feAnioMesFin = "";
				SimpleDateFormat sdfr = new SimpleDateFormat("yyyyMM");
				SimpleDateFormat sdfr2 = new SimpleDateFormat("MM/yyyy");
				if(pgimRecursoExtraidoAuxDTOFiltro.getDescFeInicial() != null){
					feAnioMesInicio = sdfr.format(pgimRecursoExtraidoAuxDTOFiltro.getDescFeInicial());
					feInicial = sdfr2.format(pgimRecursoExtraidoAuxDTOFiltro.getDescFeInicial());
					cadenaFiltro += "Fecha inicial: "+feInicial+ ", ";
				}
				if(pgimRecursoExtraidoAuxDTOFiltro.getDescFeFinal() != null){
					feAnioMesFin = sdfr.format(pgimRecursoExtraidoAuxDTOFiltro.getDescFeFinal());
					feFinal = sdfr2.format(pgimRecursoExtraidoAuxDTOFiltro.getDescFeFinal());
					cadenaFiltro += "Fecha final: "+feFinal;
				}

				cadenaFiltro = cadenaFiltro.trim();

				listData = this.recursoExtraidoRepository.listarReporteRecursosExtraidos(pgimRecursoExtraidoAuxDTOFiltro.getDescNoUnidadMinera(),
					feAnioMesInicio,feAnioMesFin, sort);

				break;

			default:
				break;
		}

		configsReporte.add(cadenaFiltro);
		configsReporte.add(listData);
		configsReporte.add(lImgReporteDTO);
		configsReporte.add(codReporte);
		configsReporte.add(cabeceraReporteExpSigedDTO);
		configsReporte.add(cabeceraReporteHistoricoUmDTO);

		return configsReporte;
	}

	/// Funciones de apoyo generacion pdf

	public XWPFDocument crearDocumentHeaderPdf(String cadenaFiltro, String tituloReporte) throws Exception {
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PLANTILLA_REPORTE_HORIZONTAL;
		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument document = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		XWPFHeaderFooterPolicy headerFooterPolicy = document.getHeaderFooterPolicy();
    if (headerFooterPolicy == null)
      headerFooterPolicy = document.createHeaderFooterPolicy();

    //XWPFHeaderFooter footer = policy.createFooter(XWPFHeaderFooterPolicy.DEFAULT);
    XWPFHeaderFooter header = headerFooterPolicy.createHeader(XWPFHeaderFooterPolicy.DEFAULT);

		XWPFParagraph paragraphHeader = header.getParagraphArray(0);

		if(paragraphHeader == null){
			paragraphHeader = header.createParagraph();
		}

		XWPFRun runHeder = paragraphHeader.createRun();

		XmlCursor cursor = paragraphHeader.getCTP().newCursor();

		XWPFTable tableHeader = header.insertNewTbl(cursor);

		// fila1
		XWPFTableRow rowOne = tableHeader.getRow(0);
		if (rowOne == null)
			rowOne = tableHeader.createRow();

		XWPFTableCell cell = rowOne.getCell(0);
		if (cell == null)
			cell = rowOne.createCell();
		cell.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(11500)); // 13000 8800
		paragraphHeader = cell.getParagraphs().get(0);
		paragraphHeader.setAlignment(ParagraphAlignment.CENTER);
		runHeder = paragraphHeader.createRun();
		runHeder.setText(tituloReporte.toUpperCase());
		runHeder.setBold(true);
		runHeder.setFontSize(10);
		runHeder.setFontFamily("Arial");
		runHeder.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");

		// fila2
		XWPFTableRow rowTwo = tableHeader.getRow(2);
		if (rowTwo == null)
			rowTwo = tableHeader.createRow();

		XWPFTableCell cell10 = rowTwo.getCell(0);
		if (cell10 == null)
			cell10 = rowTwo.createCell();
		cell10.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(11500)); // 13000
		paragraphHeader = cell10.getParagraphs().get(0);
		paragraphHeader.setAlignment(ParagraphAlignment.CENTER);

		if (cadenaFiltro.contains("dataCabecera")) {
			cadenaFiltro = cadenaFiltro.substring(13); // omite la palabra dataCabecera: del inicio

		} else if (cadenaFiltro.trim().length() > 0) {
			runHeder = paragraphHeader.createRun();
			runHeder.setText("Criterios de filtro aplicado: ".toUpperCase());
			runHeder.setBold(true);
			runHeder.setItalic(true);
			runHeder.setFontSize(8);
			runHeder.setFontFamily("Arial");
			runHeder.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		}

		runHeder = paragraphHeader.createRun();
		runHeder.setText(cadenaFiltro.toUpperCase());
		runHeder.setBold(false);
		runHeder.setFontSize(8);
		runHeder.setFontFamily("Arial");
		runHeder.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");

		setAlineacionTabla(tableHeader, TableRowAlign.RIGHT); // alinear tabla

		return document;
	}

	public XWPFTable crearTablaDatosPdf(XWPFTable xwpfTable, List<?> lstDatos,
			ArrayList<ReporteColumnDTO> columnasAExportar) throws Exception {

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy");
		SimpleDateFormat sdf_hora = new SimpleDateFormat("dd'/'MM'/'yyyy HH':'mm");

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		decimalFormat.applyPattern(pattern);

		XWPFTableRow tableRowOne = PoiWordUtil.createTableCell(xwpfTable, null, XWPFVertAlign.CENTER, 250, "D9D9D9",
				400, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60, 0, "N°", 8, true);

		for (int i = 0; i < columnasAExportar.size(); i++) {
			ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
			tableRowOne = PoiWordUtil.createTableCell(xwpfTable, tableRowOne, XWPFVertAlign.CENTER, 250, "D9D9D9",
					reporteColumnDTO.getWidthColum(), 0, i + 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60,
					0, reporteColumnDTO.getLabelColumn(), 8, true);

		}

		tableRowOne.setRepeatHeader(true);

		int rowNumber = 1;

		for (int k = 0; k < lstDatos.size(); k++) {

			// Creación de la fila #n de la tabla
			XWPFTableRow tableRowN = PoiWordUtil.createTableCell(xwpfTable, null, XWPFVertAlign.CENTER, 250, "FFFFFF",
					400, rowNumber, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 60, 0, rowNumber + "", 8,
					false);

			ObjectMapper objectMapper = new ObjectMapper();
			String entidadJsonStr = objectMapper.writeValueAsString(lstDatos.get(k));

			JSONObject entidadJson = new JSONObject(entidadJsonStr);

			for (int i = 0; i < columnasAExportar.size(); i++) {
				ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
				ParagraphAlignment alineacion = this.getAlineacionHorizontal(reporteColumnDTO.getHorizAlignColumn());
				String valor = entidadJson.optString(reporteColumnDTO.getNameColumn());

				if (valor.equals("null")) {
					valor = "";
				}

				if (reporteColumnDTO.getTypeColumn().equals("fecha")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf.format(fecha);
					}

				} else if (reporteColumnDTO.getTypeColumn().equals("fechahora")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf_hora.format(fecha);
					}
				} else if (reporteColumnDTO.getTypeColumn().equals("decimal")) {
					if (!valor.equals("")) {
						valor = decimalFormat.format(Double.parseDouble(valor));
					}
				} else if (reporteColumnDTO.getTypeColumn().equals("cadena")) {
					valor = this.convertirHTMLaString(valor);
				}

				tableRowN = PoiWordUtil.createTableCell(xwpfTable, tableRowN, XWPFVertAlign.CENTER, 250, "FFFFFF",
						reporteColumnDTO.getWidthColum(), rowNumber, i + 1, 0, alineacion, LineSpacingRule.EXACT, 60, 0,
						valor, 8, false);
			}
			rowNumber++;
		}

		return xwpfTable;
	}

	public String convertirHTMLaString(String cadena) {

		String html[] = { "<br>", "<br/>", "<br />", "<b>", "</b>", "<strong>", "</strong>" };

		String output = cadena;

		for (int i = 0; i < html.length; i++) {
			String findText = html[i];
			if (output.contains(findText) && (i == 0 || i == 1 || i == 2)) {
				output = output.replace(findText, "\n");
			} else {
				if (output.contains(findText))
					output = output.replace(findText, " ");
			}

		}

		return output;
	}

	public ParagraphAlignment getAlineacionHorizontal(String align) {
		ParagraphAlignment alineacion;
		switch (align) {
			case "CENTER":
				alineacion = ParagraphAlignment.CENTER;
				break;
			case "LEFT":
				alineacion = ParagraphAlignment.LEFT;
				break;
			case "RIGHT":
				alineacion = ParagraphAlignment.RIGHT;
				break;
			default:
				alineacion = ParagraphAlignment.LEFT;
				break;
		}
		return alineacion;
	}

	public void setAlineacionTabla(XWPFTable table, TableRowAlign align) {

		table.setTableAlignment(align);

	}

	public void borderCeldaTabla(XWPFTableCell cell) {
		CTTc ctTc = cell.getCTTc();
		CTTcPr tcPr = ctTc.getTcPr();
		CTTcBorders border = tcPr.addNewTcBorders();

		border.addNewBottom().setVal(STBorder.SINGLE);
		border.addNewRight().setVal(STBorder.SINGLE);
		border.addNewLeft().setVal(STBorder.SINGLE);
		border.addNewTop().setVal(STBorder.SINGLE);
	}

	public XWPFParagraph addImgInParagraph(XWPFDocument document, String base64Img) throws Exception {

		byte[] dataImg = DatatypeConverter.parseBase64Binary(base64Img);

		InputStream pic = new ByteArrayInputStream(dataImg);

		BufferedImage img = ImageIO.read(pic);

		double w = img.getWidth();
		double h = img.getHeight();
		pic.close();

		double scaling = 1.0;
		boolean scalaAncho = false;
		double hScala = 0;
		if (w > 72 * 8) {
			scaling = (72 * 8) / w; // scale width not to be greater than 8 inches
			// if (w > 72*6) scaling = (72*6)/w; //scale width not to be greater than 6
			// inches
			scalaAncho = true;
			hScala = h * scaling;
		}

		if (scalaAncho && hScala > 72 * 6) {
			System.out.println("llegue");
			scaling = (72 * 5) / h; // scale width not to be greater than 8 inches
		} else if (!scalaAncho && h > 72 * 6) {
			scaling = (72 * 5) / h; // scale width not to be greater than 8 inches
		}

		XWPFParagraph paragraph = document.createParagraph();
		paragraph.setAlignment(ParagraphAlignment.CENTER);

		pic = new ByteArrayInputStream(dataImg);

		paragraph.createRun().addBreak();
		paragraph.createRun().addPicture(pic, XWPFDocument.PICTURE_TYPE_PNG, "graficoReporte", Units.toEMU(w * scaling),
				Units.toEMU(h * scaling));
		pic.close();

		return paragraph;
	}

	public XWPFDocument crearHeaderPdfReporte(String tituloReporte, XWPFDocument document, String orientacion ) throws Exception {

		int ancho = 0;
		if(orientacion == "VERTICAL"){
			ancho = 7600;
		}else if(orientacion == "HORIZONTAL"){
			ancho = 10500;
		}

		String cadenaFiltro = " ";

		XWPFHeaderFooterPolicy headerFooterPolicy = document.getHeaderFooterPolicy();
    if (headerFooterPolicy == null)
      headerFooterPolicy = document.createHeaderFooterPolicy();

    XWPFHeaderFooter header = headerFooterPolicy.createHeader(XWPFHeaderFooterPolicy.DEFAULT);

		XWPFParagraph paragraphHeader = header.getParagraphArray(0);

		if(paragraphHeader == null){
			paragraphHeader = header.createParagraph();
		}

		XWPFRun runHeder = paragraphHeader.createRun();

		XmlCursor cursor = paragraphHeader.getCTP().newCursor();

		XWPFTable tableHeader = header.insertNewTbl(cursor);

		// fila1
		XWPFTableRow rowOne = tableHeader.getRow(0);
		if (rowOne == null)
			rowOne = tableHeader.createRow();

		XWPFTableCell cell = rowOne.getCell(0);
		if (cell == null)
			cell = rowOne.createCell();
		cell.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(ancho)); // 13000 8800
		paragraphHeader = cell.getParagraphs().get(0);
		paragraphHeader.setAlignment(ParagraphAlignment.CENTER);
		runHeder = paragraphHeader.createRun();
		runHeder.setText(tituloReporte.toUpperCase());
		runHeder.setBold(true);
		runHeder.setFontSize(10);
		runHeder.setFontFamily("Arial");
		runHeder.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");

		// fila2
		XWPFTableRow rowTwo = tableHeader.getRow(2);
		if (rowTwo == null)
			rowTwo = tableHeader.createRow();

		XWPFTableCell cell10 = rowTwo.getCell(0);
		if (cell10 == null)
			cell10 = rowTwo.createCell();
		cell10.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(ancho)); // 13000
		paragraphHeader = cell10.getParagraphs().get(0);
		paragraphHeader.setAlignment(ParagraphAlignment.CENTER);

		if (cadenaFiltro.contains("dataCabecera")) {
			cadenaFiltro = cadenaFiltro.substring(13); // omite la palabra dataCabecera: del inicio

		} else if (cadenaFiltro.trim().length() > 0) {
			runHeder = paragraphHeader.createRun();
			runHeder.setText("Criterios de filtro aplicado: ".toUpperCase());
			runHeder.setBold(true);
			runHeder.setItalic(true);
			runHeder.setFontSize(8);
			runHeder.setFontFamily("Arial");
			runHeder.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		}

		runHeder = paragraphHeader.createRun();
		runHeder.setText(cadenaFiltro.toUpperCase());
		runHeder.setBold(false);
		runHeder.setFontSize(8);
		runHeder.setFontFamily("Arial");
		runHeder.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");

		setAlineacionTabla(tableHeader, TableRowAlign.RIGHT); // alinear tabla

		return document;
	}

	/// Funciones de apoyo generacion excel

	public void addImgExcel(Workbook workbook, Sheet sheet, String base64Img, Integer cell, Integer row, Double escala,
			Integer indexImg) throws Exception {

		CreationHelper helper = workbook.getCreationHelper();

		// Insertar imagen
		byte[] bytesImg = java.util.Base64.getDecoder().decode(base64Img);

		BufferedImage img = ImageIO.read(new ByteArrayInputStream(bytesImg));
		int imgWidth = img.getWidth();
		int rangeCellImg = 0;
		int widthColumnDefault = sheet.getDefaultColumnWidth();

		if (indexImg > 1) {
			rangeCellImg = (int) ((imgWidth * escala) / (widthColumnDefault * Units.DEFAULT_CHARACTER_WIDTH));
		}

		cell += rangeCellImg;

		// Adds a picture to the workbook
		int pictureIdx = workbook.addPicture(bytesImg, Workbook.PICTURE_TYPE_PNG);

		// Creates the top-level drawing patriarch.
		Drawing drawing = sheet.createDrawingPatriarch();

		// Create an anchor that is attached to the worksheet
		ClientAnchor anchor = helper.createClientAnchor();
		anchor.setAnchorType(AnchorType.MOVE_DONT_RESIZE);
		// set top-left corner for the image
		anchor.setCol1(cell);
		anchor.setRow1(row);

		// Creates a picture
		Picture pict = drawing.createPicture(anchor, pictureIdx);
		// Reset the image to the original size
		pict.resize(escala);
		// Fin Insertar imagen
	}

	public byte[] crearTablaDatosExcel(List<?> lstDatos, ArrayList<ReporteColumnDTO> columnasAExportar, String titulo,
			String cadenaFiltro, List<ImgReporteDTO> lstImgs) throws Exception {

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy");
		SimpleDateFormat sdf_hora = new SimpleDateFormat("dd'/'MM'/'yyyy HH':'mm");

		String[] columns = new String[columnasAExportar.size() + 1];
		columns[0] = "N°";

		for (int i = 0; i < columnasAExportar.size(); i++) {
			ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
			columns[i + 1] = reporteColumnDTO.getLabelColumn();
		}

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Reporte");

		CreationHelper helper = workbook.getCreationHelper();

		Font headerFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());

		CellStyle titleCellStyle = workbook.createCellStyle();
		titleCellStyle.setFont(headerFont);
		titleCellStyle.setAlignment(HorizontalAlignment.CENTER);
		titleCellStyle.setWrapText(true);

		CellStyle headerCellStyle = workbook.createCellStyle();
		headerCellStyle.setFont(headerFont);
		headerCellStyle.setBorderBottom(BorderStyle.THIN);
		headerCellStyle.setBorderTop(BorderStyle.THIN);
		headerCellStyle.setBorderRight(BorderStyle.THIN);
		headerCellStyle.setBorderLeft(BorderStyle.THIN);

		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		CellStyle bodyCellStyle = workbook.createCellStyle();
		bodyCellStyle.setFont(bodyFont);
		bodyCellStyle.setBorderBottom(BorderStyle.THIN);
		bodyCellStyle.setBorderTop(BorderStyle.THIN);
		bodyCellStyle.setBorderRight(BorderStyle.THIN);
		bodyCellStyle.setBorderLeft(BorderStyle.THIN);

		CellStyle numeroDatoStyle = workbook.createCellStyle();
		numeroDatoStyle.setFont(bodyFont);
		numeroDatoStyle.setBorderBottom(BorderStyle.THIN);
		numeroDatoStyle.setBorderTop(BorderStyle.THIN);
		numeroDatoStyle.setBorderRight(BorderStyle.THIN);
		numeroDatoStyle.setBorderLeft(BorderStyle.THIN);
		numeroDatoStyle.setAlignment(HorizontalAlignment.RIGHT);

		CellStyle decimalDatoStyle = workbook.createCellStyle();
		decimalDatoStyle.setFont(bodyFont);
		decimalDatoStyle.setBorderBottom(BorderStyle.THIN);
		decimalDatoStyle.setBorderTop(BorderStyle.THIN);
		decimalDatoStyle.setBorderRight(BorderStyle.THIN);
		decimalDatoStyle.setBorderLeft(BorderStyle.THIN);
		decimalDatoStyle.setAlignment(HorizontalAlignment.RIGHT);
		decimalDatoStyle.setDataFormat(helper.createDataFormat().getFormat("#,##0.00"));

		CellStyle fechaDatoStyle = workbook.createCellStyle();
		fechaDatoStyle.setFont(bodyFont);
		fechaDatoStyle.setBorderBottom(BorderStyle.THIN);
		fechaDatoStyle.setBorderTop(BorderStyle.THIN);
		fechaDatoStyle.setBorderRight(BorderStyle.THIN);
		fechaDatoStyle.setBorderLeft(BorderStyle.THIN);
		fechaDatoStyle.setAlignment(HorizontalAlignment.CENTER);

		CellStyle fechaStyle = workbook.createCellStyle();
		fechaStyle.setDataFormat(helper.createDataFormat().getFormat("m/d/yy h:mm"));
		fechaStyle.setFont(bodyFont);

		CellStyle filtrosStyle = workbook.createCellStyle();
		filtrosStyle.setFont(bodyFont);
		filtrosStyle.setAlignment(HorizontalAlignment.CENTER);

		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		// Create Row - title
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(titulo);
		titleCell.setCellStyle(titleCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, columnasAExportar.size())); // row(1,1) columnas(0,5)

		// Fecha de generación
		Row headerRowFecha = sheet.createRow(3);
		Cell fechaGenCell = headerRowFecha.createCell(columnasAExportar.size());
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Create Row - filtros
		if(!cadenaFiltro.equals("")){
			cadenaFiltro = "Criterios de filtro aplicado: " + cadenaFiltro;
		}

		Row filtrosRow = sheet.createRow(5);
		Cell filtroCell = filtrosRow.createCell(0);
		filtroCell.setCellValue(cadenaFiltro.toUpperCase());
		filtroCell.setCellStyle(filtrosStyle);
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, columnasAExportar.size()));

		// Create Row - cabecera de tabla
		Row headerRowTable = sheet.createRow(7);
		PoiExcelUtil.createCellsInRow(headerRowTable, columns, headerCellStyle);

		// Create Other rows - Datos
		int rowNumInicial = 8;
		int rowNum = rowNumInicial;
		int index = 1;

		for (int k = 0; k < lstDatos.size(); k++) {

			ObjectMapper objectMapper = new ObjectMapper();
			String entidadJsonStr = objectMapper.writeValueAsString(lstDatos.get(k));

			JSONObject entidadJson = new JSONObject(entidadJsonStr);

			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(index);
			cell0.setCellStyle(bodyCellStyle);

			for (int i = 0; i < columnasAExportar.size(); i++) {
				ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
				//String valor = entidadJson.getString(reporteColumnDTO.getNameColumn()); //comento elozano 06-09-2023
                String valor = entidadJson.optString(reporteColumnDTO.getNameColumn()); //agrego elozano 06-09-2023 en todas getString se cambio x optString
				CellStyle cellStyle = bodyCellStyle;

				if (valor.equals("null")) {
					valor = "";
				}

				if (reporteColumnDTO.getTypeColumn().equals("fecha")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("fechahora")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf_hora.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("numero")) {
					cellStyle = numeroDatoStyle;
				}

				if (reporteColumnDTO.getTypeColumn().equals("decimal")) {
					cellStyle = decimalDatoStyle;
				}

				if (reporteColumnDTO.getTypeColumn().equals("cadena")) {
					valor = this.convertirHTMLaString(valor);
				}

				Cell cell = row.createCell(i + 1);
				cell.setCellStyle(cellStyle);

				if (reporteColumnDTO.getTypeColumn().equals("numero")
						|| reporteColumnDTO.getTypeColumn().equals("decimal")) {
					if (!valor.equals("")) {
						cell.setCellValue(Double.parseDouble(valor));
					}
				} else {
					cell.setCellValue(valor);
				}
			}

			index++;
		}

		// Resize all columns to fit the content size
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		// insertar el array de imagenes
		int countAux = 0;
		for (ImgReporteDTO img : lstImgs) {
			countAux++;
			this.addImgExcel(workbook, sheet, img.getBase64Img(), columnasAExportar.size() + 3, rowNumInicial, 0.5,
					countAux);
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
			workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	public byte[] crearTablaDatosExcelExpPasPaso(List<?> lstDatos, ArrayList<ReporteColumnDTO> columnasAExportar,
			String titulo, String cadenaFiltro, List<ImgReporteDTO> lstImgs) throws Exception {

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy");

		String[] columns = new String[columnasAExportar.size() + 1];
		columns[0] = "N°";

		for (int i = 0; i < columnasAExportar.size(); i++) {
			ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
			columns[i + 1] = reporteColumnDTO.getLabelColumn();
		}

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Reporte");

		CreationHelper helper = workbook.getCreationHelper();

		Font headerFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());

		CellStyle titleCellStyle = workbook.createCellStyle();
		titleCellStyle.setFont(headerFont);
		titleCellStyle.setAlignment(HorizontalAlignment.CENTER);
		titleCellStyle.setWrapText(true);

		CellStyle headerCellStyle = workbook.createCellStyle();
		headerCellStyle.setFont(headerFont);
		headerCellStyle.setBorderBottom(BorderStyle.THIN);
		headerCellStyle.setBorderTop(BorderStyle.THIN);
		headerCellStyle.setBorderRight(BorderStyle.THIN);
		headerCellStyle.setBorderLeft(BorderStyle.THIN);
		headerCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);

		CellStyle header2CellStyle = workbook.createCellStyle();
		header2CellStyle.setFont(headerFont);
		header2CellStyle.setBorderBottom(BorderStyle.THIN);
		header2CellStyle.setBorderTop(BorderStyle.THIN);
		header2CellStyle.setBorderRight(BorderStyle.THIN);
		header2CellStyle.setBorderLeft(BorderStyle.THIN);
		header2CellStyle.setAlignment(HorizontalAlignment.CENTER);
		header2CellStyle.setVerticalAlignment(VerticalAlignment.CENTER);

		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		CellStyle bodyCellStyle = workbook.createCellStyle();
		bodyCellStyle.setFont(bodyFont);
		bodyCellStyle.setBorderBottom(BorderStyle.THIN);
		bodyCellStyle.setBorderTop(BorderStyle.THIN);
		bodyCellStyle.setBorderRight(BorderStyle.THIN);
		bodyCellStyle.setBorderLeft(BorderStyle.THIN);

		CellStyle numeroDatoStyle = workbook.createCellStyle();
		numeroDatoStyle.setFont(bodyFont);
		numeroDatoStyle.setBorderBottom(BorderStyle.THIN);
		numeroDatoStyle.setBorderTop(BorderStyle.THIN);
		numeroDatoStyle.setBorderRight(BorderStyle.THIN);
		numeroDatoStyle.setBorderLeft(BorderStyle.THIN);
		numeroDatoStyle.setAlignment(HorizontalAlignment.RIGHT);

		CellStyle fechaDatoStyle = workbook.createCellStyle();
		fechaDatoStyle.setFont(bodyFont);
		fechaDatoStyle.setBorderBottom(BorderStyle.THIN);
		fechaDatoStyle.setBorderTop(BorderStyle.THIN);
		fechaDatoStyle.setBorderRight(BorderStyle.THIN);
		fechaDatoStyle.setBorderLeft(BorderStyle.THIN);
		fechaDatoStyle.setAlignment(HorizontalAlignment.CENTER);

		CellStyle fechaStyle = workbook.createCellStyle();
		fechaStyle.setDataFormat(helper.createDataFormat().getFormat("m/d/yy h:mm"));
		fechaStyle.setFont(bodyFont);

		CellStyle filtrosStyle = workbook.createCellStyle();
		filtrosStyle.setFont(bodyFont);
		filtrosStyle.setAlignment(HorizontalAlignment.CENTER);

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Row headerRowFecha = sheet.createRow(3);
		Cell fechaGenCell = headerRowFecha.createCell(columnasAExportar.size());
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Create Row - filtros
		if(!cadenaFiltro.equals("")){
			cadenaFiltro = "Criterios de filtro aplicado: " + cadenaFiltro;
		}

		// Create Row - title
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(titulo);
		titleCell.setCellStyle(titleCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, columnasAExportar.size())); // row(1,1) columnas(0,5)

		// Create Row - filtros
		Row filtrosRow = sheet.createRow(5);
		Cell filtroCell = filtrosRow.createCell(0);
		filtroCell.setCellValue(cadenaFiltro.toUpperCase());
		filtroCell.setCellStyle(filtrosStyle);
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, columnasAExportar.size()));

		// Create segundos Row - cabecera de tabla
		Row headerRowTable = sheet.createRow(8);
		PoiExcelUtil.createCellsInRow(headerRowTable, columns, header2CellStyle);

		// Create Row - cabecera de tabla
		int rowfase = 7;
		Row headerRow2 = sheet.createRow(rowfase);

		Cell titleNro = headerRow2.createCell(0);
		titleNro.setCellValue("Nro");
		titleNro.setCellStyle(header2CellStyle);
		CellRangeAddress regionNro = new CellRangeAddress(7, 8, 0, 0);
		sheet.addMergedRegion(regionNro);

		Cell titleInstitucion = headerRow2.createCell(1);
		titleInstitucion.setCellValue("Institución");
		titleInstitucion.setCellStyle(header2CellStyle);
		CellRangeAddress regionInstitucion = new CellRangeAddress(7, 8, 1, 1);
		sheet.addMergedRegion(regionInstitucion);

		Cell titlePersona = headerRow2.createCell(2);
		titlePersona.setCellValue("Persona");
		titlePersona.setCellStyle(header2CellStyle);
		CellRangeAddress regionPersona = new CellRangeAddress(7, 8, 2, 2);
		sheet.addMergedRegion(regionPersona);

		Cell titleF1 = headerRow2.createCell(3);
		titleF1.setCellValue("F1 Pre-Fiscalización");
		titleF1.setCellStyle(header2CellStyle);
		CellRangeAddress regionF1 = new CellRangeAddress(rowfase, rowfase, 3, 12);
		sheet.addMergedRegion(regionF1);

		Cell titleF2 = headerRow2.createCell(13);
		titleF2.setCellValue("F2 Fiscalización de campo");
		titleF2.setCellStyle(header2CellStyle);
		CellRangeAddress regionF2 = new CellRangeAddress(rowfase, rowfase, 13, 17);
		sheet.addMergedRegion(regionF2);

		Cell titleF3 = headerRow2.createCell(18);
		titleF3.setCellValue("F3 Post-fiscalización de campo");
		titleF3.setCellStyle(header2CellStyle);
		CellRangeAddress regionF3 = new CellRangeAddress(rowfase, rowfase, 18, 19);
		sheet.addMergedRegion(regionF3);

		Cell titleF4 = headerRow2.createCell(20);
		titleF4.setCellValue("F4 Revisión de informe de fiscalización");
		titleF4.setCellStyle(header2CellStyle);
		CellRangeAddress regionF4 = new CellRangeAddress(rowfase, rowfase, 20, 23);
		sheet.addMergedRegion(regionF4);

		Cell titleF5 = headerRow2.createCell(24);
		titleF5.setCellValue("F5 Aprobación de resultados");
		titleF5.setCellStyle(header2CellStyle);
		CellRangeAddress regionF5 = new CellRangeAddress(rowfase, rowfase, 24, 33);
		sheet.addMergedRegion(regionF5);

		// Aplicamos los bordes a las celdas fusionadas
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionF1, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionF2, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionF3, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionF4, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionF5, sheet, workbook);

		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionNro, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionInstitucion, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, regionPersona, sheet, workbook);

		// Create Other rows - Datos
		int rowNumInicial = 9;
		int rowNum = rowNumInicial;
		int index = 1;

		for (int k = 0; k < lstDatos.size(); k++) {

			ObjectMapper objectMapper = new ObjectMapper();
			String entidadJsonStr = objectMapper.writeValueAsString(lstDatos.get(k));

			JSONObject entidadJson = new JSONObject(entidadJsonStr);

			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(index);
			cell0.setCellStyle(bodyCellStyle);

			for (int i = 0; i < columnasAExportar.size(); i++) {
				ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
				String valor = entidadJson.optString(reporteColumnDTO.getNameColumn());
				CellStyle cellStyle = bodyCellStyle;

				if (valor.equals("null")) {
					valor = "";
				}

				if (reporteColumnDTO.getTypeColumn().equals("fecha")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("numero")) {
					cellStyle = numeroDatoStyle;
				}

				Cell cell = row.createCell(i + 1);
				cell.setCellStyle(cellStyle);

				if (reporteColumnDTO.getTypeColumn().equals("numero")) {
					if (valor.equals("")) {
						valor = "0";
					}
					cell.setCellValue(Double.parseDouble(valor));
				} else {
					cell.setCellValue(valor);
				}

			}

			index++;
		}

		// Resize all columns to fit the content size
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);
		sheet.autoSizeColumn(0, true);
		sheet.autoSizeColumn(1, true);
		sheet.autoSizeColumn(2, true);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		// insertar el array de imagenes
		int countAux = 0;
		for (ImgReporteDTO img : lstImgs) {
			countAux++;
			this.addImgExcel(workbook, sheet, img.getBase64Img(), columnasAExportar.size() + 3, rowNumInicial, 0.5,
					countAux);
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	public byte[] crearTablaDatosExcelReporteExpediente(List<?> lstDatos, ArrayList<ReporteColumnDTO> columnasAExportar,
			String titulo, String cadenaFiltro, CabeceraReporteExpSigedDTO datosCabecera) throws Exception {

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy");
		SimpleDateFormat sdf_hora = new SimpleDateFormat("dd'/'MM'/'yyyy HH':'mm");

		String[] columns = new String[columnasAExportar.size() + 1];
		columns[0] = "N°";

		for (int i = 0; i < columnasAExportar.size(); i++) {
			ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
			columns[i + 1] = reporteColumnDTO.getLabelColumn();
		}

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Reporte");

		CreationHelper helper = workbook.getCreationHelper();

		Font headerFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());
		Font headerFont2 = PoiExcelUtil.createFont(workbook, true, (short) 11,
				IndexedColors.BLACK.getIndex());

		CellStyle titleCellStyle = workbook.createCellStyle();
		titleCellStyle.setFont(headerFont);
		titleCellStyle.setAlignment(HorizontalAlignment.CENTER);

		CellStyle headerCellStyle = workbook.createCellStyle();
		headerCellStyle.setFont(headerFont);
		headerCellStyle.setBorderBottom(BorderStyle.THIN);
		headerCellStyle.setBorderTop(BorderStyle.THIN);
		headerCellStyle.setBorderRight(BorderStyle.THIN);
		headerCellStyle.setBorderLeft(BorderStyle.THIN);

		CellStyle header2CellStyle = workbook.createCellStyle();
		header2CellStyle.setFont(headerFont2);
		header2CellStyle.setBorderBottom(BorderStyle.THIN);
		header2CellStyle.setBorderTop(BorderStyle.THIN);
		header2CellStyle.setBorderRight(BorderStyle.THIN);
		header2CellStyle.setBorderLeft(BorderStyle.THIN);
		header2CellStyle.setAlignment(HorizontalAlignment.LEFT);

		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		CellStyle bodyCellStyle = workbook.createCellStyle();
		bodyCellStyle.setFont(bodyFont);
		bodyCellStyle.setBorderBottom(BorderStyle.THIN);
		bodyCellStyle.setBorderTop(BorderStyle.THIN);
		bodyCellStyle.setBorderRight(BorderStyle.THIN);
		bodyCellStyle.setBorderLeft(BorderStyle.THIN);

		CellStyle numeroDatoStyle = workbook.createCellStyle();
		numeroDatoStyle.setFont(bodyFont);
		numeroDatoStyle.setBorderBottom(BorderStyle.THIN);
		numeroDatoStyle.setBorderTop(BorderStyle.THIN);
		numeroDatoStyle.setBorderRight(BorderStyle.THIN);
		numeroDatoStyle.setBorderLeft(BorderStyle.THIN);
		numeroDatoStyle.setAlignment(HorizontalAlignment.RIGHT);

		CellStyle fechaDatoStyle = workbook.createCellStyle();
		fechaDatoStyle.setFont(bodyFont);
		fechaDatoStyle.setBorderBottom(BorderStyle.THIN);
		fechaDatoStyle.setBorderTop(BorderStyle.THIN);
		fechaDatoStyle.setBorderRight(BorderStyle.THIN);
		fechaDatoStyle.setBorderLeft(BorderStyle.THIN);
		fechaDatoStyle.setAlignment(HorizontalAlignment.CENTER);

		CellStyle fechaStyle = workbook.createCellStyle();
		fechaStyle.setDataFormat(helper.createDataFormat().getFormat("m/d/yy h:mm"));
		fechaStyle.setFont(bodyFont);

		CellStyle filtrosStyle = workbook.createCellStyle();
		filtrosStyle.setFont(bodyFont);
		filtrosStyle.setAlignment(HorizontalAlignment.CENTER);

		// Create Row - title
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(titulo);
		titleCell.setCellStyle(titleCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, columnasAExportar.size() - 1)); // row(1,1) columnas(0,5)

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Cell fechaGenCell = headerRow.createCell(columnasAExportar.size());
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Create Row - filtros
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, columnasAExportar.size() - 1));

		// Create Row - Unidad minera
		Row unidadMineraRow = sheet.createRow(6);

		Cell umLblCell = unidadMineraRow.createCell(1);
		umLblCell.setCellValue("Unidad fiscalizada: ");
		umLblCell.setCellStyle(header2CellStyle);
		Cell umDatoCell = unidadMineraRow.createCell(2);
		umDatoCell.setCellValue(datosCabecera.getNoUnidadMinera());
		umDatoCell.setCellStyle(bodyCellStyle);

		// Create Row - Agente fiscalizado
		Row agenteSupervRow = sheet.createRow(7);

		Cell asLblCell = agenteSupervRow.createCell(1);
		asLblCell.setCellValue("Agente fiscalizado: ");
		asLblCell.setCellStyle(header2CellStyle);
		Cell asDatoCell = agenteSupervRow.createCell(2);
		asDatoCell.setCellValue(datosCabecera.getAsNoRazonSocial() + " - " + datosCabecera.getAsCoDocumentoIdentidad());
		asDatoCell.setCellStyle(bodyCellStyle);

		// Create Row - cabecera de tabla
		Row headerRowTable = sheet.createRow(9);
		PoiExcelUtil.createCellsInRow(headerRowTable, columns, headerCellStyle);

		// Create Other rows - Datos
		int rowNumInicial = 10;
		int rowNum = rowNumInicial;
		int index = 1;

		for (int k = 0; k < lstDatos.size(); k++) {

			ObjectMapper objectMapper = new ObjectMapper();
			String entidadJsonStr = objectMapper.writeValueAsString(lstDatos.get(k));

			JSONObject entidadJson = new JSONObject(entidadJsonStr);

			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(index);
			cell0.setCellStyle(bodyCellStyle);

			for (int i = 0; i < columnasAExportar.size(); i++) {
				ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
				String valor = entidadJson.optString(reporteColumnDTO.getNameColumn());
				CellStyle cellStyle = bodyCellStyle;

				if (valor.equals("null")) {
					valor = "";
				}

				if (reporteColumnDTO.getTypeColumn().equals("fecha")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("fechahora")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf_hora.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("numero")) {
					cellStyle = numeroDatoStyle;
				}

				Cell cell = row.createCell(i + 1);
				cell.setCellValue(valor);
				cell.setCellStyle(cellStyle);
			}

			index++;
		}

		// Resize all columns to fit the content size
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	@Override
	public byte[] generarFichaInformativaUnidadMinera(String ruta, PgimUnidadMineraDTO pgimUnidadMineraDTO,
			Long idTipoExtensionGen) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		df.applyPattern(pattern);

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();

		// Objeto Calendar con la fecha actual
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fechaActual);

        // Resta 6 meses
        calendar.add(Calendar.MONTH, -6); 

        // Obtén la fecha final y la fecha inicial en formato deseado
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy/MM");
        String feFin = sdf2.format(fechaActual);
        String feInicio = sdf2.format(calendar.getTime());
		
		// Obtenemos el detalle de la unidad minera.
		PgimUnidadMineraDTO pgimUnidadMineraDTOActual = unidadMineraRepository
				.obtenerFichaInformativaUM(pgimUnidadMineraDTO.getIdUnidadMinera());
		// Obtenemos el detalle del agente supervisado por unidad minera
		PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTOActual = agenteSupervisadoRepository
				.obtenerAgenteSupervisadoPorId(pgimUnidadMineraDTOActual.getIdAgenteSupervisado(),
						pgimUnidadMineraDTOActual.getIdTipoUnidadMinera());
		// Obtenemos las demarcaciones por unidad minera
		List<PgimDemarcacionUmineraDTO> lPgimDemarcacionUmineraDTOActual = demarcacionUMineraRepository
				.getDemarcacionUMByIdUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtenemos los componentes mineros por unidad minera
		List<PgimComponenteMineroDTO> lPgimComponenteMineroDTOActual = compomenteMinRepository
				.obtenerComponenteMineroPorIdUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtener los eventos accidentes mortal por unidad minera
		List<PgimAccMortalAuxDTO> lPgimAccMortalAuxDTOActual = accMortalAuxRepository
				.listarAccMortalAuxPorUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtener los incidentes peligrosos por unidad minera
		List<PgimIncPeligrosoAuxDTO> lPgimIncPeligrosoAuxDTOActual = incPeligrosoAuxRepository
				.listarPgimIncPeligrosoAuxPorUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtenemos la lista de autorizaciones por unidad minera
		List<PgimAutorizacionDTO> lPgimAutorizacionDTOActual = autorizacionRepository
				.getAutorizacionPorUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtenemos la lista de supervisiones por unidad minera
		List<PgimSuperRptAuxDTO> lPgimSuperRptAuxDTOActual = superRptAuxRepository
				.listarPgimSuperRptAuxPorUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtenemos el PAS por unidad minera
		List<PgimPasRptAuxDTO> lPgimPasRptAuxDTOActual = pasRptAuxRepository
				.listarPgimPasRptAuxPorUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		// Obtenemos la lista de medidas administrativas por unidad minera
		List<PgimMedAdmRptAuxDTO> lPgimMedAdmRptAuxDTOActual = medAdmRptAuxRepository
				.listarPgimMedAdmRptAuxPorUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());
		//Obtenemos los datos de la tabla "ESTADÍSTICAS DE PRODUCCIÓN OBTENIDA (ESTAMIN)"
		List<PgimProduccionObtAuxDTO> listaProduccionObtenidaUM = produccionObtRepository
				.listarProduccionObtenidaUM(pgimUnidadMineraDTO.getCoUnidadMinera(),feInicio,feFin);
		//Obtenemos los datos de la tabla "ÍNDICES DE SEGURIDAD"
		List<PgimEstadisticoIncidenteAuxDTO> listaEstadisticosIncidenteUM = estadisticoIncidenteAuxRepository
				.listaEstadisticosIncidenteUM(pgimUnidadMineraDTO.getCoUnidadMinera(),feInicio,feFin);
		//Obtenemos los datos de la tabla infracciones
		List<PgimInfraccionAuxDTO> listaInfraccionPorUM = infraccionAuxRepository
				.listaInfraccionPorUM(pgimUnidadMineraDTO.getCoUnidadMinera());

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		JSONArray list = new JSONArray();

		String fecha = sdf.format(new Date());

		JSONObject CODIGO_UNIDAD_MINERA = new JSONObject();
		CODIGO_UNIDAD_MINERA.put("mergeField", "CODIGO_UNIDAD_MINERA");
		CODIGO_UNIDAD_MINERA.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getNoUnidadMinera()));
		list.put(CODIGO_UNIDAD_MINERA);

		this.getFooterAlignBottomDocs(documento, fecha, "VERTICAL", 0, 8000); //PLANTILLA_FICHA_INFORMATIVA_UM.docx

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		JSONArray listTablaUM = new JSONArray();

		JSONObject codigo_um = new JSONObject();
		codigo_um.put("mergeField", "codigo_um");
		codigo_um.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getCoUnidadMinera()));
		listTablaUM.put(codigo_um);

		JSONObject nombre_um = new JSONObject();
		nombre_um.put("mergeField", "nombre_um");
		nombre_um.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getNoUnidadMinera()));
		listTablaUM.put(nombre_um);

		JSONObject nombre_estrato = new JSONObject();
		nombre_estrato.put("mergeField", "nombre_estrato");
		nombre_estrato.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoEstrato()));
		listTablaUM.put(nombre_estrato);

		JSONObject nombre_division_supervisora = new JSONObject();
		nombre_division_supervisora.put("mergeField", "nombre_division_supervisora");
		nombre_division_supervisora.put("value",
				CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoDivisionSupervisora()));
		listTablaUM.put(nombre_division_supervisora);

		JSONObject nombre_tipo_um = new JSONObject();
		nombre_tipo_um.put("mergeField", "nombre_tipo_um");
		nombre_tipo_um.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoTipoUnidadMinera()));
		listTablaUM.put(nombre_tipo_um);

		JSONObject situacion_um = new JSONObject();
		situacion_um.put("mergeField", "situacion_um");
		situacion_um.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoSituacion()));
		listTablaUM.put(situacion_um);

		JSONObject nombre_planta_beneficio_destino = new JSONObject();
		nombre_planta_beneficio_destino.put("mergeField", "nombre_planta_beneficio_destino");
		nombre_planta_beneficio_destino.put("value",
				CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoPlntaBeneficioDestino()));
		listTablaUM.put(nombre_planta_beneficio_destino);

		JSONObject nombre_tipo_minado = new JSONObject();
		nombre_tipo_minado.put("mergeField", "nombre_tipo_minado");
		nombre_tipo_minado.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoTipoMinado()));
		listTablaUM.put(nombre_tipo_minado);

		JSONObject metodo_explotación = new JSONObject();
		metodo_explotación.put("mergeField", "metodo_explotación");
		metodo_explotación.put("value",
				CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoMetodoExplotacion()));
		listTablaUM.put(metodo_explotación);

		String cmraSubtrraneaGas = "";
		if(pgimUnidadMineraDTOActual.getFlCmraSubtrraneaGas() != null){
			if (pgimUnidadMineraDTOActual.getFlCmraSubtrraneaGas().equals("1")) {
				cmraSubtrraneaGas = "Si";
			} else if (pgimUnidadMineraDTOActual.getFlCmraSubtrraneaGas().equals("0")) {
				cmraSubtrraneaGas = "No";
			}
		}

		JSONObject indicios_camara_subterranea_si_o_no = new JSONObject();
		indicios_camara_subterranea_si_o_no.put("mergeField", "indicios_camara_subterranea_si_o_no");
		indicios_camara_subterranea_si_o_no.put("value", cmraSubtrraneaGas);
		listTablaUM.put(indicios_camara_subterranea_si_o_no);

		JSONObject tipo_yacimiento = new JSONObject();
		tipo_yacimiento.put("mergeField", "tipo_yacimiento");
		tipo_yacimiento.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoTipoYacimiento()));
		listTablaUM.put(tipo_yacimiento);

		JSONObject tipo_de_sustancia = new JSONObject();
		tipo_de_sustancia.put("mergeField", "tipo_de_sustancia");
		tipo_de_sustancia.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDescNoTipoSustancia()));
		listTablaUM.put(tipo_de_sustancia);

		List<PgimSustanciaUmineraDTO> lPgimSustanciaUmineraDTO = sustanciaUnidadMineraRepository
				.listarSustanciaPorUnidadMinera(pgimUnidadMineraDTO.getIdUnidadMinera());
		String listaSustanciasUM = "";
		for (PgimSustanciaUmineraDTO pgimSustanciaUmineraDTO : lPgimSustanciaUmineraDTO) {
			if (listaSustanciasUM.equals("")) {
				listaSustanciasUM = pgimSustanciaUmineraDTO.getDescNoSustancia();
			} else {
				listaSustanciasUM = listaSustanciasUM + ", " + pgimSustanciaUmineraDTO.getDescNoSustancia();
			}
		}

		JSONObject csv_minerales_o_sustancias = new JSONObject();
		csv_minerales_o_sustancias.put("mergeField", "csv_minerales_o_sustancias");
		csv_minerales_o_sustancias.put("value", listaSustanciasUM);
		listTablaUM.put(csv_minerales_o_sustancias);

		String nuProfundidad = "";
		if (pgimUnidadMineraDTOActual.getNuProfundidad() != null) {
			nuProfundidad = df.format(pgimUnidadMineraDTOActual.getNuProfundidad());
		}
		JSONObject profundidad_m = new JSONObject();
		profundidad_m.put("mergeField", "profundidad_m");
		profundidad_m.put("value", nuProfundidad);
		listTablaUM.put(profundidad_m);

		String nuAlturaMinima = "";
		if (pgimUnidadMineraDTOActual.getNuAlturaMinima() != null) {
			nuAlturaMinima = df.format(pgimUnidadMineraDTOActual.getNuAlturaMinima());
		}
		JSONObject altura_min_msnm = new JSONObject();
		altura_min_msnm.put("mergeField", "altura_min_msnm");
		altura_min_msnm.put("value", nuAlturaMinima);
		listTablaUM.put(altura_min_msnm);

		String nuAlturaMaxima = "";
		if (pgimUnidadMineraDTOActual.getNuAlturaMaxima() != null) {
			nuAlturaMaxima = df.format(pgimUnidadMineraDTOActual.getNuAlturaMaxima());
		}
		JSONObject altura_max_msnm = new JSONObject();
		altura_max_msnm.put("mergeField", "altura_max_msnm");
		altura_max_msnm.put("value", nuAlturaMaxima);
		listTablaUM.put(altura_max_msnm);

		JSONObject ubicacion_acceso_y_antecedentes = new JSONObject();
		ubicacion_acceso_y_antecedentes.put("mergeField", "ubicacion_acceso_y_antecedentes");
		ubicacion_acceso_y_antecedentes.put("value",
				CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getDeUbicacionAcceso()));
		listTablaUM.put(ubicacion_acceso_y_antecedentes);

		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, listTablaUM);

		JSONArray listTablaAS = new JSONArray();

		JSONObject ruc = new JSONObject();
		ruc.put("mergeField", "ruc");
		ruc.put("value", CommonsUtil.validarNull(pgimAgenteSupervisadoDTOActual.getDescCoDocumentoIdentidad()));
		listTablaAS.put(ruc);

		JSONObject razon_social = new JSONObject();
		razon_social.put("mergeField", "razon_social");
		razon_social.put("value", CommonsUtil.validarNull(pgimAgenteSupervisadoDTOActual.getDescNoRazonSocial()));
		listTablaAS.put(razon_social);

		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, listTablaAS);

		documento = PoiWordUtil.replaceIMGInTabla(documento, pgimUnidadMineraDTO.getDescBase64Img(),
				"imagen_mapa_ubicacion", 300, 250);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_demarcaciones")) {
					paragraph.removeRun(j);

					XWPFTable tableDemarcaciones = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableDemarcacionRowOne = PoiWordUtil.createTableCell(tableDemarcaciones, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2820, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Departamento", 8, false);

					tableDemarcacionRowOne = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2660, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Provincia", 8, false);

					tableDemarcacionRowOne = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2600, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Distrito", 8, false);

					tableDemarcacionRowOne = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2380, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Porcentaje", 8, false);

					int cant = 0;
					if (lPgimDemarcacionUmineraDTOActual != null && lPgimDemarcacionUmineraDTOActual.size() > 0) {
						for (PgimDemarcacionUmineraDTO pgimDemarcacionUmineraDTO : lPgimDemarcacionUmineraDTOActual) {
							cant++;
							XWPFTableRow tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2820, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimDemarcacionUmineraDTO.getDescDepartamento(), 8,
									false);

							tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2660, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimDemarcacionUmineraDTO.getDescProvincia(), 8,
									false);

							tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2600, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimDemarcacionUmineraDTO.getDescDistrito(), 8, false);

							tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2380, cant, 3, 0, ParagraphAlignment.RIGHT,
									LineSpacingRule.EXACT, 0, 0, pgimDemarcacionUmineraDTO.getPcUbigeo() + " %", 8,
									false);
						}
					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2820, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2660, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2600, cant, 2, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);

							tableDemarcacionRow = PoiWordUtil.createTableCell(tableDemarcaciones, tableDemarcacionRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", 2380, cant, 3, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, false);
						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_componentes")) {
					paragraph.removeRun(j);

					XWPFTable tableComponentes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Código", 8, false);
					tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 4240, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Tipo", 8, false);
					tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Nombre", 8, false);
					tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Capacidad", 8, false);

					int cant = 0;
					if (lPgimComponenteMineroDTOActual != null && lPgimComponenteMineroDTOActual.size() > 0) {

						for (PgimComponenteMineroDTO pgimComponenteMineroDTO : lPgimComponenteMineroDTOActual) {
							cant++;
							XWPFTableRow tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimComponenteMineroDTO.getCoComponente(), 8, false);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									pgimComponenteMineroDTO.getDescIdTipoComponenteMinero(), 8, false);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimComponenteMineroDTO.getNoComponente(), 8, false);

							if (pgimComponenteMineroDTO.getNuCapacidadPlanta() == null) {
								pgimComponenteMineroDTO.setNuCapacidadPlanta(new BigDecimal(0));
							}
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.RIGHT,
									LineSpacingRule.EXACT, 0, 0,
									df.format(pgimComponenteMineroDTO.getNuCapacidadPlanta()), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_incidentes_peligrosos")) {
					paragraph.removeRun(j);

					XWPFTable tableIncidentesPeligrosos = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableIncidentesPeligrososRowOne = PoiWordUtil.createTableCell(
							tableIncidentesPeligrosos, null, XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Fecha de presentación", 8, false);
					tableIncidentesPeligrososRowOne = PoiWordUtil.createTableCell(tableIncidentesPeligrosos,
							tableIncidentesPeligrososRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 6240, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Descripción", 8, false);
					tableIncidentesPeligrososRowOne = PoiWordUtil.createTableCell(tableIncidentesPeligrosos,
							tableIncidentesPeligrososRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Especialidad", 8, false);

					int cant = 0;
					if (lPgimIncPeligrosoAuxDTOActual != null && lPgimIncPeligrosoAuxDTOActual.size() > 0) {

						for (PgimIncPeligrosoAuxDTO pgimIncPeligrosoAuxDTO : lPgimIncPeligrosoAuxDTOActual) {
							cant++;
							XWPFTableRow tableIncidentesPeligrososRow = PoiWordUtil.createTableCell(
									tableIncidentesPeligrosos, null, XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0,
									0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									sdf.format(pgimIncPeligrosoAuxDTO.getFePresentacion()), 8, false);
							tableIncidentesPeligrososRow = PoiWordUtil.createTableCell(tableIncidentesPeligrosos,
									tableIncidentesPeligrososRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 6240, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimIncPeligrosoAuxDTO.getCoEvento() + " "
											+ pgimIncPeligrosoAuxDTO.getNoTipoEvento() + " "
											+ pgimIncPeligrosoAuxDTO.getDeEvento(),
									8, false);
							tableIncidentesPeligrososRow = PoiWordUtil.createTableCell(tableIncidentesPeligrosos,
									tableIncidentesPeligrososRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimIncPeligrosoAuxDTO.getNoEspecialidad(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableIncidentesPeligrososRow = PoiWordUtil.createTableCell(
									tableIncidentesPeligrosos, null, XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0,
									0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableIncidentesPeligrososRow = PoiWordUtil.createTableCell(tableIncidentesPeligrosos,
									tableIncidentesPeligrososRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 6240, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableIncidentesPeligrososRow = PoiWordUtil.createTableCell(tableIncidentesPeligrosos,
									tableIncidentesPeligrososRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_accidentes_mortales")) {
					paragraph.removeRun(j);

					XWPFTable tableAccidentesMortales = PoiWordUtil.createTableInSpecificPosition(paragraph, documento,10450);

					XWPFTableRow tableAccidentesMortalesRowOne = PoiWordUtil.createTableCell(tableAccidentesMortales,
							null, XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Fecha de presentación", 8, false);
					tableAccidentesMortalesRowOne = PoiWordUtil.createTableCell(tableAccidentesMortales,
							tableAccidentesMortalesRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 4240, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Descripción", 8, false);
					tableAccidentesMortalesRowOne = PoiWordUtil.createTableCell(tableAccidentesMortales,
							tableAccidentesMortalesRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Cantidad de accidentados", 8, false);
					tableAccidentesMortalesRowOne = PoiWordUtil.createTableCell(tableAccidentesMortales,
							tableAccidentesMortalesRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Especialidad", 8, false);

					int cant = 0;
					if (lPgimAccMortalAuxDTOActual != null && lPgimAccMortalAuxDTOActual.size() > 0) {

						for (PgimAccMortalAuxDTO pgimAccMortalAuxDTO : lPgimAccMortalAuxDTOActual) {
							cant++;
							XWPFTableRow tableAccidentesMortalesRow = PoiWordUtil.createTableCell(
									tableAccidentesMortales, null, XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0,
									0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									sdf.format(pgimAccMortalAuxDTO.getFePresentacion()), 8, false);
							tableAccidentesMortalesRow = PoiWordUtil.createTableCell(tableAccidentesMortales,
									tableAccidentesMortalesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimAccMortalAuxDTO.getCoEvento() + " " + pgimAccMortalAuxDTO.getNoTipoEvento()
											+ " " + pgimAccMortalAuxDTO.getDeEvento(),
									8, false);
							tableAccidentesMortalesRow = PoiWordUtil.createTableCell(tableAccidentesMortales,
									tableAccidentesMortalesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									pgimAccMortalAuxDTO.getCaAccidentados().toString(), 8, false);
							tableAccidentesMortalesRow = PoiWordUtil.createTableCell(tableAccidentesMortales,
									tableAccidentesMortalesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimAccMortalAuxDTO.getNoEspecialidad(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableAccidentesMortalesRow = PoiWordUtil.createTableCell(
									tableAccidentesMortales, null, XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0,
									0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableAccidentesMortalesRow = PoiWordUtil.createTableCell(tableAccidentesMortales,
									tableAccidentesMortalesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableAccidentesMortalesRow = PoiWordUtil.createTableCell(tableAccidentesMortales,
									tableAccidentesMortalesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableAccidentesMortalesRow = PoiWordUtil.createTableCell(tableAccidentesMortales,
									tableAccidentesMortalesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_autorizaciones")) {
					paragraph.removeRun(j);

					XWPFTable tableAutorizaciones = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableAutorizacionesRowOne = PoiWordUtil.createTableCell(tableAutorizaciones, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "N° de documento", 8, false);
					tableAutorizacionesRowOne = PoiWordUtil.createTableCell(tableAutorizaciones,
							tableAutorizacionesRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 4240, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Tipo", 8, false);
					tableAutorizacionesRowOne = PoiWordUtil.createTableCell(tableAutorizaciones,
							tableAutorizacionesRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Inicio de autorización", 8, false);
					tableAutorizacionesRowOne = PoiWordUtil.createTableCell(tableAutorizaciones,
							tableAutorizacionesRowOne, XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 3, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Emisor", 8, false);

					int cant = 0;
					if (lPgimAutorizacionDTOActual != null && lPgimAutorizacionDTOActual.size() > 0) {

						for (PgimAutorizacionDTO pgimAutorizacionDTO : lPgimAutorizacionDTOActual) {
							cant++;
							XWPFTableRow tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimAutorizacionDTO.getNuDocumento(), 8, false);
							tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones,
									tableAutorizacionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimAutorizacionDTO.getDescTipoAutorizacion(), 8, false);
							tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones,
									tableAutorizacionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									sdf.format(pgimAutorizacionDTO.getFeInicioAutorizacion()), 8, false);
							tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones,
									tableAutorizacionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimAutorizacionDTO.getDescNoRazonSocial(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones,
									tableAutorizacionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones,
									tableAutorizacionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableAutorizacionesRow = PoiWordUtil.createTableCell(tableAutorizaciones,
									tableAutorizacionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_supervisiones")) {
					paragraph.removeRun(j);

					XWPFTable tableSupervisiones = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableSupervisionesRowOne = PoiWordUtil.createTableCell(tableSupervisiones, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Código", 8, false);
					tableSupervisionesRowOne = PoiWordUtil.createTableCell(tableSupervisiones, tableSupervisionesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Tipo", 8, false);
					tableSupervisionesRowOne = PoiWordUtil.createTableCell(tableSupervisiones, tableSupervisionesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2240, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Fechas", 8, false);
					tableSupervisionesRowOne = PoiWordUtil.createTableCell(tableSupervisiones, tableSupervisionesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Paso actual en flujo de trabajo", 8, false);
					tableSupervisionesRowOne = PoiWordUtil.createTableCell(tableSupervisiones, tableSupervisionesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 4, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Expediente Siged", 8, false);

					int cant = 0;
					if (lPgimSuperRptAuxDTOActual != null && lPgimSuperRptAuxDTOActual.size() > 0) {

						for (PgimSuperRptAuxDTO pgimSuperRptAuxDTO : lPgimSuperRptAuxDTOActual) {
							cant++;
							XWPFTableRow tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimSuperRptAuxDTO.getCoSupervision(), 8, false);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimSuperRptAuxDTO.getNoTipoSupervision(), 8, false);

							String fechasProgramadas = "";
							String feIniSupPro = "";
							if (pgimSuperRptAuxDTO.getFeInicioSupervision() != null) {
								feIniSupPro = sdf.format(pgimSuperRptAuxDTO.getFeInicioSupervision());
							}
							String feFinSupPro = "";
							if (pgimSuperRptAuxDTO.getFeFinSupervision() != null) {
								feFinSupPro = sdf.format(pgimSuperRptAuxDTO.getFeFinSupervision());
							}

							if (!feIniSupPro.equals("") && !feFinSupPro.equals("")) {
								fechasProgramadas = "P: " + feIniSupPro + " - " + feFinSupPro;
							}

							String fechasReales = "";
							String feIniSupReal = "";
							if (pgimSuperRptAuxDTO.getFeInicioSupervisionReal() != null) {
								feIniSupReal = sdf.format(pgimSuperRptAuxDTO.getFeInicioSupervisionReal());
							}
							String feFinSupReal = "";
							if (pgimSuperRptAuxDTO.getFeFinSupervisionReal() != null) {
								feFinSupReal = sdf.format(pgimSuperRptAuxDTO.getFeFinSupervisionReal());
							}

							if (!feIniSupReal.equals("") && !feFinSupReal.equals("")) {
								fechasReales = "\nR: " + feIniSupReal + " - " + feFinSupReal;
							}

							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2240, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									fechasProgramadas + fechasReales, 8, false);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimSuperRptAuxDTO.getEtiquetaPasoActual(), 8, false);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									pgimSuperRptAuxDTO.getNuExpedienteSiged(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2240, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tableSupervisiones,
									tableSupervisionesRow, XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_pas")) {
					paragraph.removeRun(j);

					XWPFTable tablePas = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tablePasRowOne = PoiWordUtil.createTableCell(tablePas, null, XWPFVertAlign.CENTER, 400,
							"DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Código", 8,
							false);
					tablePasRowOne = PoiWordUtil.createTableCell(tablePas, tablePasRowOne, XWPFVertAlign.CENTER, 400,
							"DEEAF6", 2000, 0, 1, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Fecha de inicio", 8, false);
					tablePasRowOne = PoiWordUtil.createTableCell(tablePas, tablePasRowOne, XWPFVertAlign.CENTER, 400,
							"DEEAF6", 4240, 0, 2, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Paso actual en el flujo de trabajo", 8, false);
					tablePasRowOne = PoiWordUtil.createTableCell(tablePas, tablePasRowOne, XWPFVertAlign.CENTER, 400,
							"DEEAF6", 2020, 0, 3, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							"Expediente Siged", 8, false);

					int cant = 0;
					if (lPgimPasRptAuxDTOActual != null && lPgimPasRptAuxDTOActual.size() > 0) {

						for (PgimPasRptAuxDTO pgimPasRptAuxDTO : lPgimPasRptAuxDTOActual) {
							cant++;
							XWPFTableRow tableSupervisionesRow = PoiWordUtil.createTableCell(tablePas, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimPasRptAuxDTO.getCoSupervision(), 8, false);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tablePas, tableSupervisionesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, sdf.format(pgimPasRptAuxDTO.getFeCreacionPas()), 8,
									false);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tablePas, tableSupervisionesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimPasRptAuxDTO.getEtiquetaPasoActual(), 8, false);
							tableSupervisionesRow = PoiWordUtil.createTableCell(tablePas, tableSupervisionesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimPasRptAuxDTO.getNuExpedienteSiged(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tablePasRow = PoiWordUtil.createTableCell(tablePas, null, XWPFVertAlign.CENTER,
									250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT,
									0, 0, " ", 8, true);
							tablePasRow = PoiWordUtil.createTableCell(tablePas, tablePasRow, XWPFVertAlign.CENTER, 250,
									"FFFFFF", 2000, cant, 1, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									" ", 8, true);
							tablePasRow = PoiWordUtil.createTableCell(tablePas, tablePasRow, XWPFVertAlign.CENTER, 250,
									"FFFFFF", 4240, cant, 2, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									" ", 8, true);
							tablePasRow = PoiWordUtil.createTableCell(tablePas, tablePasRow, XWPFVertAlign.CENTER, 250,
									"FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									" ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_medidas_adm")) {
					paragraph.removeRun(j);

					XWPFTable tableMedidasAdm = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableMedidasAdmRowOne = PoiWordUtil.createTableCell(tableMedidasAdm, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Código", 8, false);
					tableMedidasAdmRowOne = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 4240, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Descripción", 8, false);
					tableMedidasAdmRowOne = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Fecha de medida", 8, false);
					tableMedidasAdmRowOne = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Expediente Siged", 8, false);

					int cant = 0;
					if (lPgimMedAdmRptAuxDTOActual != null && lPgimMedAdmRptAuxDTOActual.size() > 0) {

						for (PgimMedAdmRptAuxDTO pgimMedAdmRptAuxDTO : lPgimMedAdmRptAuxDTOActual) {
							cant++;
							XWPFTableRow tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimMedAdmRptAuxDTO.getDescCoMedidaAdministrativa(), 8,
									false);
							tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimMedAdmRptAuxDTO.getDeTipoMedidaAdministrativa()
											+ " " + pgimMedAdmRptAuxDTO.getDeMedidaAdministrativa(),
									8, false);
							tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									sdf.format(pgimMedAdmRptAuxDTO.getFeMedidaAdministrativa()), 8, false);
							tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimMedAdmRptAuxDTO.getNuExpedienteSiged(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableMedidasAdmRow = PoiWordUtil.createTableCell(tableMedidasAdm, tableMedidasAdmRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}
		
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_produccion_obtenida")) {
					paragraph.removeRun(j);

					XWPFTable tableProdObtenida = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableProdObtRowOne = PoiWordUtil.createTableCell(tableProdObtenida, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2700, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Producto", 8, false);
					tableProdObtRowOne = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 1500, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Periodo", 8, false);
					tableProdObtRowOne = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Proceso", 8, false);
					tableProdObtRowOne = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Cantidad", 8, false);
					tableProdObtRowOne = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2030, 0, 4, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Unidad de medida", 8, false);

					int cant = 0;
					if (listaProduccionObtenidaUM != null && listaProduccionObtenidaUM.size() > 0) {

						for (PgimProduccionObtAuxDTO pgimProduccionObtAuxDTO : listaProduccionObtenidaUM) {
							cant++;
							XWPFTableRow tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2700, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getProducto(), 8,false);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1500, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getAnioPro().trim() + "-" + pgimProduccionObtAuxDTO.getMes().trim(), 8, false);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									pgimProduccionObtAuxDTO.getProceso(), 8, false);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getCantidad().toString(), 8, false);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2050, cant, 4, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getDescripcion(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2700, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1500, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableProdObtRow = PoiWordUtil.createTableCell(tableProdObtenida, tableProdObtRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2050, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_indices_seguridad")) {
					paragraph.removeRun(j);

					XWPFTable tableIndiceSeg = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableIndiceSegRowOne = PoiWordUtil.createTableCell(tableIndiceSeg, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Periodo", 8, false);
					tableIndiceSegRowOne = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2500, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Ind. de frecuencia acumulada", 8, false);
					tableIndiceSegRowOne = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2500, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Ind. de severidad acumulada", 8, false);
					tableIndiceSegRowOne = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2500, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Ind. de accidentabilidad acumulada", 8, false);

					int cant = 0;
					if (listaEstadisticosIncidenteUM != null && listaEstadisticosIncidenteUM.size() > 0) {

						for (PgimEstadisticoIncidenteAuxDTO pgimProduccionObtAuxDTO : listaEstadisticosIncidenteUM) {
							cant++;
							XWPFTableRow tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getAnioPro().trim() + "-" + pgimProduccionObtAuxDTO.getMes().trim(), 8, false);
							tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2500, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getIndiceFrecuenciaAcum().toString(), 8, false);
							tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									pgimProduccionObtAuxDTO.getIndiceSeveridadAcum().toString(), 8, false);
							tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2500, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getIndiceAccidentesAcum().toString(), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2500, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2500, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableIndiceSegRow = PoiWordUtil.createTableCell(tableIndiceSeg, tableIndiceSegRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2500, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							

						}
					}
				}
			}
		}

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_infracciones")) {
					paragraph.removeRun(j);

					XWPFTable tableInfraciones = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450);

					XWPFTableRow tableInfraccionRowOne = PoiWordUtil.createTableCell(tableInfraciones, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 1500, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Fiscalización", 8, false);
					tableInfraccionRowOne = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 1500, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "PAS", 8, false);
					tableInfraccionRowOne = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 1800, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Código de infracción", 8, false);
					tableInfraccionRowOne = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2000, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Nombre de infracción", 8, false);
					tableInfraccionRowOne = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 1000, 0, 4, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Sanción", 8, false);	
					tableInfraccionRowOne = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2650, 0, 5, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Obligación fiscalizada", 8, false);

					int cant = 0;
					if (listaInfraccionPorUM != null && listaInfraccionPorUM.size() > 0) {

						for (PgimInfraccionAuxDTO pgimProduccionObtAuxDTO : listaInfraccionPorUM) {
							cant++;
							XWPFTableRow tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1500, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getDescCoSupervision(), 8, false);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1500, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getDescCoPas(), 8, false);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1800, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									pgimProduccionObtAuxDTO.getCoTipificacion(), 8, false);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getNoItemTipificacion(), 8, false);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1000, cant, 4, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getDeSancionPecuniariaUit(), 8, false);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2850, cant, 5, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, 
									pgimProduccionObtAuxDTO.getDescDeObligacionNormativa(), 8, false);
						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1500, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1500, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1800, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2000, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 1000, cant, 4, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableInfraccionRow = PoiWordUtil.createTableCell(tableInfraciones, tableInfraccionRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2650, cant, 5, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
						}
					}
				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);
		// documento.close();

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarFichaComponentesUnidadMinera(String ruta, PgimUnidadMineraDTO pgimUnidadMineraDTO,
			Long idTipoExtensionGen) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		df.applyPattern(pattern);

		// Obtenemos el detalle de la unidad minera.
		PgimUnidadMineraDTO pgimUnidadMineraDTOActual = unidadMineraRepository
				.obtenerFichaInformativaUM(pgimUnidadMineraDTO.getIdUnidadMinera());

		// Obtenemos el detalle del agente fiscalizado por unidad minera
		PgimAgenteSupervisadoDTO pgimAgenteSupervisadoDTOActual = agenteSupervisadoRepository
				.obtenerAgenteSupervisadoPorId(pgimUnidadMineraDTOActual.getIdAgenteSupervisado(),
						pgimUnidadMineraDTOActual.getIdTipoUnidadMinera());

		// Obtenemos los componentes mineros por unidad minera
		List<PgimComponenteMineroDTO> lPgimComponenteMineroDTOActual = compomenteMinRepository
				.obtenerComponenteMineroPorIdUnidadMinera(pgimUnidadMineraDTOActual.getIdUnidadMinera());

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		JSONArray list = new JSONArray();
		String fecha = sdf.format(new Date());

		JSONObject CODIGO_UNIDAD_MINERA = new JSONObject();
		CODIGO_UNIDAD_MINERA.put("mergeField", "CODIGO_UNIDAD_MINERA");
		CODIGO_UNIDAD_MINERA.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getCoUnidadMinera()));
		list.put(CODIGO_UNIDAD_MINERA);

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fecha, "VERTICAL", 0, 8000); //PLANTILLA_FICHA_COMPONENTES_UM.docx

		JSONArray listTablaCabecera = new JSONArray();

		JSONObject codigo_um = new JSONObject();
		codigo_um.put("mergeField", "codigo_um");
		codigo_um.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getCoUnidadMinera()));
		listTablaCabecera.put(codigo_um);

		JSONObject nombre_um = new JSONObject();
		nombre_um.put("mergeField", "nombre_um");
		nombre_um.put("value", CommonsUtil.validarNull(pgimUnidadMineraDTOActual.getNoUnidadMinera()));
		listTablaCabecera.put(nombre_um);

		JSONObject ruc = new JSONObject();
		ruc.put("mergeField", "ruc");
		ruc.put("value", CommonsUtil.validarNull(pgimAgenteSupervisadoDTOActual.getDescCoDocumentoIdentidad()));
		listTablaCabecera.put(ruc);

		JSONObject razon_social = new JSONObject();
		razon_social.put("mergeField", "razon_social");
		razon_social.put("value", CommonsUtil.validarNull(pgimAgenteSupervisadoDTOActual.getDescNoRazonSocial()));
		listTablaCabecera.put(razon_social);

		documento = PoiWordUtil.replaceJSONArrayInTabla(documento, listTablaCabecera);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();

		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_componentes")) {
					paragraph.removeRun(j);

					XWPFTable tableComponentes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 10450 );

					XWPFTableRow tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, null,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2200, 0, 0, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Código", 8, true);
					tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 4240, 0, 1, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Tipo", 8, true);
					tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 4240, 0, 2, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Nombre", 8, true);
					tableComponentesRowOne = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRowOne,
							XWPFVertAlign.CENTER, 400, "DEEAF6", 2020, 0, 3, 0, ParagraphAlignment.LEFT,
							LineSpacingRule.EXACT, 0, 0, "Capacidad", 8, true);

					int cant = 0;
					if (lPgimComponenteMineroDTOActual != null && lPgimComponenteMineroDTOActual.size() > 0) {

						for (PgimComponenteMineroDTO pgimComponenteMineroDTO : lPgimComponenteMineroDTOActual) {
							cant++;
							XWPFTableRow tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimComponenteMineroDTO.getCoComponente(), 8, false);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0,
									pgimComponenteMineroDTO.getDescIdTipoComponenteMinero(), 8, false);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, pgimComponenteMineroDTO.getNoComponente(), 8, false);

							if (pgimComponenteMineroDTO.getNuCapacidadPlanta() == null) {
								pgimComponenteMineroDTO.setNuCapacidadPlanta(new BigDecimal(0));
							}
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.RIGHT,
									LineSpacingRule.EXACT, 0, 0,
									df.format(pgimComponenteMineroDTO.getNuCapacidadPlanta()), 8, false);

						}

					} else {
						for (int k = 0; k < 1; k++) {
							cant++;
							XWPFTableRow tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, null,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2200, cant, 0, 0, ParagraphAlignment.CENTER,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 1, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 4240, cant, 2, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableComponentesRow = PoiWordUtil.createTableCell(tableComponentes, tableComponentesRow,
									XWPFVertAlign.CENTER, 250, "FFFFFF", 2020, cant, 3, 0, ParagraphAlignment.LEFT,
									LineSpacingRule.EXACT, 0, 0, " ", 8, true);

						}
					}
				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarReportePenalidadPeriodoContratoSupervisoraPDF(String ruta,
			PgimPenalidadAuxDTO filtroPenalidadAuxDTO, Long idTipoExtensionGen) throws IOException, JSONException, XmlException {
		File plantilla = new File(ruta);

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		decimalFormat.applyPattern(pattern);

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");

		List<PgimPenalidadAuxDTO> lPgimPenalidadAuxDTO = penalidadAuxRepository.listarReportePenPerContratoSupervisora(
				filtroPenalidadAuxDTO.getNuContrato(), filtroPenalidadAuxDTO.getDescNoRazonSocial(),
				filtroPenalidadAuxDTO.getDescFeInicio(), filtroPenalidadAuxDTO.getDescFeFin());

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String titulo = filtroPenalidadAuxDTO.getDeTituloReporte();

		try {
			this.crearHeaderPdfReporte(titulo, documento, "HORIZONTAL");
		} catch (Exception e1) {
			log.error(e1.getMessage(), e1);
			throw new PgimException("error", "DOC_GEN" + e1.getMessage());
		}

		JSONArray listReport = new JSONArray();
		JSONObject titulo_reporte = new JSONObject();
		titulo_reporte.put("mergeField", "titulo_reporte");
		titulo_reporte.put("value", titulo);
		listReport.put(titulo_reporte);
		System.out.println(titulo);

		documento = PoiWordUtil.replaceJSONArray(documento, listReport);

		JSONArray list = new JSONArray();

		String fechaConsulta = sdf.format(new Date());

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaConsulta, "HORIZONTAL", -100, 13000); //PLANTILLA_PENALIDAD_PERIODO_CONTRATO_SUPERVISORA.docx

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_pen_per_contrato_supervisora")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Liquidación", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Especialidad", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2000, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fiscalizadora", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 600, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fecha de liquidación", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fase", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Paso", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto liquidación S/.", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Penalidad S/.", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, true);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2000, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 600, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Por plazo", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Por reincidencia", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Personal sin EPP", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Total", 7, true);

					int cant = 1;
					for (PgimPenalidadAuxDTO obj : lPgimPenalidadAuxDTO) {
						cant++;

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 0, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuContrato(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 1, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuLiquidacion(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 700, cant, 2, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNoEspecialidad(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 3, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getDescNoRazonSocial(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 600, cant, 4, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, sdf.format(obj.getFeCreacion()), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNoFaseActual(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 6, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNoPasoActual(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 7, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, decimalFormat.format(obj.getMoItemConsumo()), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, decimalFormat.format(obj.getMoPenalidadPlazo()), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, decimalFormat.format(obj.getMoPenalidadReincidencia()), 7,
								false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 10, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, decimalFormat.format(obj.getMoPenalidadSinEpp()), 7,
								false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 11, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, decimalFormat.format(obj.getMoPenalidad()), 7, false);
					}

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 3, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 4, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 5, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 6, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 7, 0, 1);

					// Para los merge horizontal, realizarlos desde el ultimo hacia el primero,
					// ya que si no se hace en ese orden, no reconoce las celdas que se hicieron
					// merge como tales(celdas)
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 8, 11);

				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarReporteControlSaldoContratoSupervisoraPDF(String ruta,
			PgimContratoSegumntoAuxDTO filtroContratoSegumntoAuxDTO, Long idTipoExtensionGen)
			throws IOException, JSONException, XmlException {
		File plantilla = new File(ruta);

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		df.applyPattern(pattern);

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");

		List<PgimContratoSegumntoAuxDTO> lPgimContratoSegumntoAuxDTO = contratoSegumntoAuxRepository
				.listarReporteConSalContratoSupervisora(filtroContratoSegumntoAuxDTO.getNuContrato(),
						filtroContratoSegumntoAuxDTO.getNoRazonSocial(),
						filtroContratoSegumntoAuxDTO.getIdEspecialidad());

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String titulo = filtroContratoSegumntoAuxDTO.getDeTituloReporte();

		try {
			this.crearHeaderPdfReporte(titulo, documento, "HORIZONTAL");
		} catch (Exception e1) {
			log.error(e1.getMessage(), e1);
			throw new PgimException("error", "DOC_GEN" + e1.getMessage());
		}

		JSONArray listReport = new JSONArray();
		JSONObject titulo_reporte = new JSONObject();
		titulo_reporte.put("mergeField", "titulo_reporte");
		titulo_reporte.put("value", titulo);
		listReport.put(titulo_reporte);
		System.out.println(titulo);

		documento = PoiWordUtil.replaceJSONArray(documento, listReport);

		JSONArray list = new JSONArray();

		String fechaConsulta = sdf.format(new Date());

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaConsulta, "HORIZONTAL", -100, 13000); //PLANTILLA_CONTROL_SALDO_CONTRATO_SUPERVISORA.docx

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_con_sal_contrato_supervisora")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2000, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Emp. supervisora", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Especialidad", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Importe del contrato S/.", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Saldo del contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Consumo del contrato S/.", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, true);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, 1, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2000, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Pre - comprometido", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Comprometido", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Por liquidar", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Liquidado", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Facturado", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Total", 7, true);

					int cant = 1;
					for (PgimContratoSegumntoAuxDTO obj : lPgimContratoSegumntoAuxDTO) {
						cant++;

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, cant, 0, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuContrato(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 1, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNoRazonSocial(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 700, cant, 2, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNoEspecialidad(), 7, false);

						if (obj.getMoImporteContrato() == null) {
							obj.setMoImporteContrato(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoImporteContrato()), 7, false);

						if (obj.getSaldoContrato() == null) {
							obj.setSaldoContrato(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 4, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getSaldoContrato()), 7, false);

						if (obj.getPreComprometido() == null) {
							obj.setPreComprometido(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getPreComprometido()), 7, false);

						if (obj.getComprometido() == null) {
							obj.setComprometido(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 6, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getComprometido()), 7, false);

						if (obj.getPorLiquidar() == null) {
							obj.setPorLiquidar(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 7, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getPorLiquidar()), 7, false);

						if (obj.getLiquidado() == null) {
							obj.setLiquidado(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getLiquidado()), 7, false);

						if (obj.getFacturado() == null) {
							obj.setFacturado(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getFacturado()), 7, false);

						if (obj.getTotalConsumoContrato() == null) {
							obj.setTotalConsumoContrato(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 10, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getTotalConsumoContrato()), 7, false);

					}

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 3, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 4, 0, 1);

					// Para los merge horizontal, realizarlos desde el ultimo hacia el primero,
					// ya que si no se hace en ese orden, no reconoce las celdas que se hicieron
					// merge como tales(celdas)
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 5, 10);

				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarReporteEjecucionPresupuestalPDF(String ruta, PgimContratoSiafAuxDTO filtroContratoSiafAuxDTO,
			Long idTipoExtensionGen) throws IOException, JSONException, XmlException {
		File plantilla = new File(ruta);

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		df.applyPattern(pattern);

		List<PgimContratoSiafAuxDTO> lPgimContratoSiafAuxDTO = contratoSiafAuxRepository
				.listarReporteEjecucionPresupuestal(filtroContratoSiafAuxDTO.getNuAnio(),
						filtroContratoSiafAuxDTO.getDescNuContrato());

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String titulo = filtroContratoSiafAuxDTO.getDeTituloReporte();

		try {
			this.crearHeaderPdfReporte(titulo, documento, "VERTICAL");
		} catch (Exception e1) {
			log.error(e1.getMessage(), e1);
			throw new PgimException("error", "DOC_GEN" + e1.getMessage());
		}

		JSONArray list = new JSONArray();
		JSONObject titulo_reporte = new JSONObject();
		titulo_reporte.put("mergeField", "titulo_reporte");
		titulo_reporte.put("value", titulo);
		list.put(titulo_reporte);

		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm");
		String fechaConsulta = sdfg.format(new Date());

		JSONObject fecha_consulta = new JSONObject();
		fecha_consulta.put("mergeField", "fecha_consulta");
		fecha_consulta.put("value", fechaConsulta);
		list.put(fecha_consulta);

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento, fechaConsulta, "VERTICAL", -100, 8000); //PLANTILLA_EJECUCION_PRESUPUESTAL.docx

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_ejecucion_presupuestal")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 8500);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1800, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 6400, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fiscalizadora", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1300, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"N° SIAF", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 400, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Año",7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1200, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Presupuesto SIAF S/.", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1200, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Consumo del contrato S/.", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1200, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Saldos S/.", 7, true);

					int cant = 0;
					for (PgimContratoSiafAuxDTO obj : lPgimContratoSiafAuxDTO) {
						cant++;

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1800, cant, 0, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getDescNuContrato(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 6400, cant, 1, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getDescNoRazonSocial(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1300, cant, 2, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuSiaf(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 400, cant, 3, 0, ParagraphAlignment.CENTER,
								LineSpacingRule.EXACT, 0, 0, String.valueOf(obj.getNuAnio()), 7, false);

						if (obj.getMoPresupuestoSiaf() == null) {
							obj.setMoPresupuestoSiaf(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1200, cant, 4, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoPresupuestoSiaf()), 7, false);

						if (obj.getMoConsumoContrato() == null) {
							obj.setMoConsumoContrato(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1200, cant, 5, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoConsumoContrato()), 7, false);

						if (obj.getDescSaldo() == null) {
							obj.setDescSaldo(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1200, cant, 6, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getDescSaldo()), 7, false);

					}

				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public byte[] generarReporteEjecucionPresupuestalEXCEL(PgimContratoSiafAuxDTO filtroContratoSiafAuxDTO)
			throws Exception {

		List<PgimContratoSiafAuxDTO> lPgimContratoSiafAuxDTO = contratoSiafAuxRepository
				.listarReporteEjecucionPresupuestal(filtroContratoSiafAuxDTO.getNuAnio(),
						filtroContratoSiafAuxDTO.getDescNuContrato());

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("EjecucionPresupuestal");

		// Crea las fuentes para los estilos
		Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());
		Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12,
				IndexedColors.BLACK.getIndex());
		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		// Creando los estilos para las celdas
		CellStyle titleCS = workbook.createCellStyle();
		titleCS.setFont(titleFont);
		titleCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle tableHeaderCS = workbook.createCellStyle();
		tableHeaderCS.setFont(tableHeaderFont);
		tableHeaderCS.setBorderBottom(BorderStyle.THIN);
		tableHeaderCS.setBorderTop(BorderStyle.THIN);
		tableHeaderCS.setBorderRight(BorderStyle.THIN);
		tableHeaderCS.setBorderLeft(BorderStyle.THIN);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle tableBodyCS = workbook.createCellStyle();
		tableBodyCS.setFont(bodyFont);
		tableBodyCS.setBorderBottom(BorderStyle.THIN);
		tableBodyCS.setBorderTop(BorderStyle.THIN);
		tableBodyCS.setBorderRight(BorderStyle.THIN);
		tableBodyCS.setBorderLeft(BorderStyle.THIN);

		// estilo para tipo numerico
		CreationHelper helper = workbook.getCreationHelper();
		CellStyle decimalDatoStyle = workbook.createCellStyle();
		decimalDatoStyle.setFont(bodyFont);
		decimalDatoStyle.setBorderBottom(BorderStyle.THIN);
		decimalDatoStyle.setBorderTop(BorderStyle.THIN);
		decimalDatoStyle.setBorderRight(BorderStyle.THIN);
		decimalDatoStyle.setBorderLeft(BorderStyle.THIN);
		decimalDatoStyle.setAlignment(HorizontalAlignment.RIGHT);
		decimalDatoStyle.setDataFormat(helper.createDataFormat().getFormat("#,##0.00"));

		CellStyle subTitleCS = workbook.createCellStyle();
		subTitleCS.setFont(tableHeaderFont);
		subTitleCS.setAlignment(HorizontalAlignment.LEFT);

		CellStyle subTitleCS2 = workbook.createCellStyle();
		subTitleCS2.setFont(bodyFont);
		subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

		// Crea el titulo
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(filtroContratoSiafAuxDTO.getDeTituloReporte());
		titleCell.setCellStyle(titleCS);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 5));

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Cell fechaGenCell = headerRow.createCell(6);
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Crea un espacio en blanco
		Row filtrosRow = sheet.createRow(6);
		Cell filtroCell = filtrosRow.createCell(0);
		filtroCell.setCellValue("");
		sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 6));

		// Creamos las cabeceras de la tabla
		Row tablaCabecera = sheet.createRow(7);

		Cell tcCell0 = tablaCabecera.createCell(0);
		tcCell0.setCellValue("Contrato");
		tcCell0.setCellStyle(tableHeaderCS);

		Cell tcCell1 = tablaCabecera.createCell(1);
		tcCell1.setCellValue("Fiscalizadora");
		tcCell1.setCellStyle(tableHeaderCS);

		Cell tcCell2 = tablaCabecera.createCell(2);
		tcCell2.setCellValue("N° SIAF");
		tcCell2.setCellStyle(tableHeaderCS);

		Cell tcCell3 = tablaCabecera.createCell(3);
		tcCell3.setCellValue("Año");
		tcCell3.setCellStyle(tableHeaderCS);

		Cell tcCell4 = tablaCabecera.createCell(4);
		tcCell4.setCellValue("Presupuesto SIAF S/.");
		tcCell4.setCellStyle(tableHeaderCS);

		Cell tcCell5 = tablaCabecera.createCell(5);
		tcCell5.setCellValue("Consumo del contrato S/.");
		tcCell5.setCellStyle(tableHeaderCS);

		Cell tcCell6 = tablaCabecera.createCell(6);
		tcCell6.setCellValue("Saldo S/.");
		tcCell6.setCellStyle(tableHeaderCS);

		// Creamos el detalle de la tabla
		int rowNum = 8;
		for (PgimContratoSiafAuxDTO obj : lPgimContratoSiafAuxDTO) {
			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(obj.getDescNuContrato());
			cell0.setCellStyle(tableBodyCS);

			Cell cell1 = row.createCell(1);
			cell1.setCellValue(obj.getDescNoRazonSocial());
			cell1.setCellStyle(tableBodyCS);

			Cell cell2 = row.createCell(2);
			cell2.setCellValue(obj.getNuSiaf());
			cell2.setCellStyle(tableBodyCS);

			Cell cell3 = row.createCell(3);
			cell3.setCellValue(obj.getNuAnio());
			cell3.setCellStyle(tableBodyCS);

			if (obj.getMoPresupuestoSiaf() == null) {
				obj.setMoPresupuestoSiaf(new BigDecimal(0));
			}
			Cell cell4 = row.createCell(4);
			cell4.setCellValue(obj.getMoPresupuestoSiaf().doubleValue());
			cell4.setCellStyle(decimalDatoStyle);

			if (obj.getMoConsumoContrato() == null) {
				obj.setMoConsumoContrato(new BigDecimal(0));
			}
			Cell cell5 = row.createCell(5);
			cell5.setCellValue(obj.getMoConsumoContrato().doubleValue());
			cell5.setCellStyle(decimalDatoStyle);

			if (obj.getDescSaldo() == null) {
				obj.setDescSaldo(new BigDecimal(0));
			}
			Cell cell6 = row.createCell(6);
			cell6.setCellValue(obj.getDescSaldo().doubleValue());
			cell6.setCellStyle(decimalDatoStyle);

		}

		String[] columns = new String[7];
		// Resize all columns to fit the content size
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);
		sheet.autoSizeColumn(6, true);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	@Override
	public byte[] generarReporteControlSaldoContratoSupervisoraEXCEL(
			PgimContratoSegumntoAuxDTO filtroContratoSegumntoAuxDTO) throws Exception {

		List<PgimContratoSegumntoAuxDTO> lPgimContratoSegumntoAuxDTO = contratoSegumntoAuxRepository
				.listarReporteConSalContratoSupervisora(filtroContratoSegumntoAuxDTO.getNuContrato(),
						filtroContratoSegumntoAuxDTO.getNoRazonSocial(),
						filtroContratoSegumntoAuxDTO.getIdEspecialidad());

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("ControlSaldoContratoSupervisora");

		// Crea las fuentes para los estilos
		Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());
		Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12,
				IndexedColors.BLACK.getIndex());
		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		// Creando los estilos para las celdas
		CellStyle titleCS = workbook.createCellStyle();
		titleCS.setFont(titleFont);
		titleCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle subTitleCS = workbook.createCellStyle();
		subTitleCS.setFont(tableHeaderFont);
		subTitleCS.setAlignment(HorizontalAlignment.LEFT);

		CellStyle subTitleCS2 = workbook.createCellStyle();
		subTitleCS2.setFont(bodyFont);
		subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

		CellStyle tableHeaderCS = workbook.createCellStyle();
		tableHeaderCS.setFont(tableHeaderFont);
		tableHeaderCS.setBorderBottom(BorderStyle.THIN);
		tableHeaderCS.setBorderTop(BorderStyle.THIN);
		tableHeaderCS.setBorderRight(BorderStyle.THIN);
		tableHeaderCS.setBorderLeft(BorderStyle.THIN);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
		tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle tableBodyCS = workbook.createCellStyle();
		tableBodyCS.setFont(bodyFont);
		tableBodyCS.setBorderBottom(BorderStyle.THIN);
		tableBodyCS.setBorderTop(BorderStyle.THIN);
		tableBodyCS.setBorderRight(BorderStyle.THIN);
		tableBodyCS.setBorderLeft(BorderStyle.THIN);

		// Crea el titulo
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(filtroContratoSegumntoAuxDTO.getDeTituloReporte());
		// titleCell.setCellValue("Reporte de control de saldos por contrato y
		// supervisora");
		titleCell.setCellStyle(titleCS);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 9));

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Cell fechaGenCell = headerRow.createCell(10);
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Crea un espacio en blanco
		Row emptyRow = sheet.createRow(6);
		Cell emptyCell = emptyRow.createCell(0);
		emptyCell.setCellValue("");
		sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));

		// Creamos las cabeceras de la tabla
		Row tablaCabecera1 = sheet.createRow(7);
		Cell tc1Cell0 = tablaCabecera1.createCell(0);
		tc1Cell0.setCellValue("Contrato");
		tc1Cell0.setCellStyle(tableHeaderCS);
		CellRangeAddress mrContrato = new CellRangeAddress(7, 8, 0, 0);
		sheet.addMergedRegion(mrContrato);

		Cell tc1Cell1 = tablaCabecera1.createCell(1);
		tc1Cell1.setCellValue("Emp. supervisora");
		tc1Cell1.setCellStyle(tableHeaderCS);
		CellRangeAddress mrEmpSupervisora = new CellRangeAddress(7, 8, 1, 1);
		sheet.addMergedRegion(mrEmpSupervisora);

		Cell tc1Cell2 = tablaCabecera1.createCell(2);
		tc1Cell2.setCellValue("Especialidad");
		tc1Cell2.setCellStyle(tableHeaderCS);
		CellRangeAddress mrEspecialidad = new CellRangeAddress(7, 8, 2, 2);
		sheet.addMergedRegion(mrEspecialidad);

		Cell tc1Cell3 = tablaCabecera1.createCell(3);
		tc1Cell3.setCellValue("Importe del contrato S/.");
		tc1Cell3.setCellStyle(tableHeaderCS);
		CellRangeAddress mrImporteContrato = new CellRangeAddress(7, 8, 3, 3);
		sheet.addMergedRegion(mrImporteContrato);

		Cell tc1Cell4 = tablaCabecera1.createCell(4);
		tc1Cell4.setCellValue("Saldo del contrato S/.");
		tc1Cell4.setCellStyle(tableHeaderCS);
		CellRangeAddress mrSaldoContrato = new CellRangeAddress(7, 8, 4, 4);
		sheet.addMergedRegion(mrSaldoContrato);

		Cell tc1Cell5 = tablaCabecera1.createCell(5);
		tc1Cell5.setCellValue("Consumo del contrato S/.");
		tc1Cell5.setCellStyle(tableHeaderCS);
		CellRangeAddress mrConsumoContrato = new CellRangeAddress(7, 7, 5, 10);
		sheet.addMergedRegion(mrConsumoContrato);

		// Aplicamos los bordes a las celdas fusionadas
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrContrato, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrEmpSupervisora, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrEspecialidad, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrImporteContrato, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrSaldoContrato, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrConsumoContrato, sheet, workbook);

		Row tablaCabecera2 = sheet.createRow(8);
		Cell tc2Cell0 = tablaCabecera2.createCell(0);
		tc2Cell0.setCellValue("");
		tc2Cell0.setCellStyle(tableHeaderCS);

		Cell tc2Cell1 = tablaCabecera2.createCell(1);
		tc2Cell1.setCellValue("");
		tc2Cell1.setCellStyle(tableHeaderCS);

		Cell tc2Cell2 = tablaCabecera2.createCell(2);
		tc2Cell2.setCellValue("");
		tc2Cell2.setCellStyle(tableHeaderCS);

		Cell tc2Cell3 = tablaCabecera2.createCell(3);
		tc2Cell3.setCellValue("");
		tc2Cell3.setCellStyle(tableHeaderCS);

		Cell tc2Cell4 = tablaCabecera2.createCell(4);
		tc2Cell4.setCellValue("");
		tc2Cell4.setCellStyle(tableHeaderCS);

		Cell tc2Cell5 = tablaCabecera2.createCell(5);
		tc2Cell5.setCellValue("Pre-comprometido");
		tc2Cell5.setCellStyle(tableHeaderCS);

		Cell tc2Cell6 = tablaCabecera2.createCell(6);
		tc2Cell6.setCellValue("Comprometido");
		tc2Cell6.setCellStyle(tableHeaderCS);

		Cell tc2Cell7 = tablaCabecera2.createCell(7);
		tc2Cell7.setCellValue("Por liquidar");
		tc2Cell7.setCellStyle(tableHeaderCS);

		Cell tc2Cell8 = tablaCabecera2.createCell(8);
		tc2Cell8.setCellValue("Liquidado");
		tc2Cell8.setCellStyle(tableHeaderCS);

		Cell tc2Cell9 = tablaCabecera2.createCell(9);
		tc2Cell9.setCellValue("Facturado");
		tc2Cell9.setCellStyle(tableHeaderCS);

		Cell tc2Cell10 = tablaCabecera2.createCell(10);
		tc2Cell10.setCellValue("Total");
		tc2Cell10.setCellStyle(tableHeaderCS);

		// Creamos el detalle de la tabla
		int rowNum = 9;
		for (PgimContratoSegumntoAuxDTO obj : lPgimContratoSegumntoAuxDTO) {
			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(obj.getNuContrato());
			cell0.setCellStyle(tableBodyCS);

			Cell cell1 = row.createCell(1);
			cell1.setCellValue(obj.getNoRazonSocial());
			cell1.setCellStyle(tableBodyCS);

			Cell cell2 = row.createCell(2);
			cell2.setCellValue(obj.getNoEspecialidad());
			cell2.setCellStyle(tableBodyCS);

			if (obj.getMoImporteContrato() == null) {
				obj.setMoImporteContrato(new BigDecimal(0));
			}
			Cell cell3 = row.createCell(3);
			cell3.setCellValue(obj.getMoImporteContrato().doubleValue());
			cell3.setCellStyle(tableBodyCS);

			if (obj.getSaldoContrato() == null) {
				obj.setSaldoContrato(new BigDecimal(0));
			}
			Cell cell4 = row.createCell(4);
			cell4.setCellValue(obj.getSaldoContrato().doubleValue());
			cell4.setCellStyle(tableBodyCS);

			if (obj.getPreComprometido() == null) {
				obj.setPreComprometido(new BigDecimal(0));
			}
			Cell cell5 = row.createCell(5);
			cell5.setCellValue(obj.getPreComprometido().doubleValue());
			cell5.setCellStyle(tableBodyCS);

			if (obj.getComprometido() == null) {
				obj.setComprometido(new BigDecimal(0));
			}
			Cell cell6 = row.createCell(6);
			cell6.setCellValue(obj.getComprometido().doubleValue());
			cell6.setCellStyle(tableBodyCS);

			if (obj.getPorLiquidar() == null) {
				obj.setPorLiquidar(new BigDecimal(0));
			}
			Cell cell7 = row.createCell(7);
			cell7.setCellValue(obj.getPorLiquidar().doubleValue());
			cell7.setCellStyle(tableBodyCS);

			if (obj.getLiquidado() == null) {
				obj.setLiquidado(new BigDecimal(0));
			}
			Cell cell8 = row.createCell(8);
			cell8.setCellValue(obj.getLiquidado().doubleValue());
			cell8.setCellStyle(tableBodyCS);

			if (obj.getFacturado() == null) {
				obj.setFacturado(new BigDecimal(0));
			}
			Cell cell9 = row.createCell(9);
			cell9.setCellValue(obj.getFacturado().doubleValue());
			cell9.setCellStyle(tableBodyCS);

			if (obj.getTotalConsumoContrato() == null) {
				obj.setTotalConsumoContrato(new BigDecimal(0));
			}
			Cell cell10 = row.createCell(10);
			cell10.setCellValue(obj.getTotalConsumoContrato().doubleValue());
			cell10.setCellStyle(tableBodyCS);
		}

		String[] columns = new String[10];
		// Resize a todas las columnas
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		// Resize a las columnas con merge field
		sheet.autoSizeColumn(0, true);
		sheet.autoSizeColumn(1, true);
		sheet.autoSizeColumn(2, true);
		sheet.autoSizeColumn(3, true);
		sheet.autoSizeColumn(4, true);
		sheet.autoSizeColumn(10, true);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	@Override
	public byte[] generarReportePenalidadPeriodoContratoSupervisoraEXCEL(PgimPenalidadAuxDTO filtroPenalidadAuxDTO)
			throws Exception {

		List<PgimPenalidadAuxDTO> lPgimPenalidadAuxDTO = penalidadAuxRepository.listarReportePenPerContratoSupervisora(
				filtroPenalidadAuxDTO.getNuContrato(), filtroPenalidadAuxDTO.getDescNoRazonSocial(),
				filtroPenalidadAuxDTO.getDescFeInicio(), filtroPenalidadAuxDTO.getDescFeFin());

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("PenalidadPeriodoContratoSupervisora");

		// Crea las fuentes para los estilos
		Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());
		Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12,
				IndexedColors.BLACK.getIndex());
		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		// Creando los estilos para las celdas
		CellStyle titleCS = workbook.createCellStyle();
		titleCS.setFont(titleFont);
		titleCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle subTitleCS = workbook.createCellStyle();
		subTitleCS.setFont(tableHeaderFont);
		subTitleCS.setAlignment(HorizontalAlignment.LEFT);

		CellStyle subTitleCS2 = workbook.createCellStyle();
		subTitleCS2.setFont(bodyFont);
		subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

		CellStyle tableHeaderCS = workbook.createCellStyle();
		tableHeaderCS.setFont(tableHeaderFont);
		tableHeaderCS.setBorderBottom(BorderStyle.THIN);
		tableHeaderCS.setBorderTop(BorderStyle.THIN);
		tableHeaderCS.setBorderRight(BorderStyle.THIN);
		tableHeaderCS.setBorderLeft(BorderStyle.THIN);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
		tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle tableBodyCS = workbook.createCellStyle();
		tableBodyCS.setFont(bodyFont);
		tableBodyCS.setBorderBottom(BorderStyle.THIN);
		tableBodyCS.setBorderTop(BorderStyle.THIN);
		tableBodyCS.setBorderRight(BorderStyle.THIN);
		tableBodyCS.setBorderLeft(BorderStyle.THIN);

		// Crea el titulo
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(filtroPenalidadAuxDTO.getDeTituloReporte());
		titleCell.setCellStyle(titleCS);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 10));

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Cell fechaGenCell = headerRow.createCell(11);
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Crea un espacio en blanco
		Row emptyRow = sheet.createRow(6);
		Cell emptyCell = emptyRow.createCell(0);
		emptyCell.setCellValue("");
		sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));

		// Creamos las cabeceras de la tabla
		Row tablaCabecera1 = sheet.createRow(7);
		Cell tc1Cell0 = tablaCabecera1.createCell(0);
		tc1Cell0.setCellValue("Contrato");
		tc1Cell0.setCellStyle(tableHeaderCS);
		CellRangeAddress mrContrato = new CellRangeAddress(7, 8, 0, 0);
		sheet.addMergedRegion(mrContrato);

		Cell tc1Cell1 = tablaCabecera1.createCell(1);
		tc1Cell1.setCellValue("Liquidación");
		tc1Cell1.setCellStyle(tableHeaderCS);
		CellRangeAddress mrLiquidacion = new CellRangeAddress(7, 8, 1, 1);
		sheet.addMergedRegion(mrLiquidacion);

		Cell tc1Cell2 = tablaCabecera1.createCell(2);
		tc1Cell2.setCellValue("Especialidad");
		tc1Cell2.setCellStyle(tableHeaderCS);
		CellRangeAddress mrEspecialidad = new CellRangeAddress(7, 8, 2, 2);
		sheet.addMergedRegion(mrEspecialidad);

		Cell tc1Cell3 = tablaCabecera1.createCell(3);
		tc1Cell3.setCellValue("Fiscalizadora");
		tc1Cell3.setCellStyle(tableHeaderCS);
		CellRangeAddress mrSupervisora = new CellRangeAddress(7, 8, 3, 3);
		sheet.addMergedRegion(mrSupervisora);

		Cell tc1Cell4 = tablaCabecera1.createCell(4);
		tc1Cell4.setCellValue("Fecha de liquidación");
		tc1Cell4.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFecha = new CellRangeAddress(7, 8, 4, 4);
		sheet.addMergedRegion(mrFecha);

		Cell tc1Cell5 = tablaCabecera1.createCell(5);
		tc1Cell5.setCellValue("Fase");
		tc1Cell5.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFase = new CellRangeAddress(7, 8, 5, 5);
		sheet.addMergedRegion(mrFase);

		Cell tc1Cell6 = tablaCabecera1.createCell(6);
		tc1Cell6.setCellValue("Paso");
		tc1Cell6.setCellStyle(tableHeaderCS);
		CellRangeAddress mrPaso = new CellRangeAddress(7, 8, 6, 6);
		sheet.addMergedRegion(mrPaso);

		Cell tc1Cell7 = tablaCabecera1.createCell(7);
		tc1Cell7.setCellValue("Monto liquidación S/.");
		tc1Cell7.setCellStyle(tableHeaderCS);
		CellRangeAddress mrMontoLiquidacion = new CellRangeAddress(7, 8, 7, 7);
		sheet.addMergedRegion(mrMontoLiquidacion);

		Cell tc1Cell8 = tablaCabecera1.createCell(8);
		tc1Cell8.setCellValue("Penalidad S/.");
		tc1Cell8.setCellStyle(tableHeaderCS);
		CellRangeAddress mrPenalidad = new CellRangeAddress(7, 7, 8, 11);
		sheet.addMergedRegion(mrPenalidad);

		// Aplicamos los bordes a las celdas fusionadas
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrContrato, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrLiquidacion, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrEspecialidad, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrSupervisora, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrFecha, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrFase, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrPaso, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrMontoLiquidacion, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrPenalidad, sheet, workbook);

		Row tablaCabecera2 = sheet.createRow(8);
		Cell tc2Cell0 = tablaCabecera2.createCell(0);
		tc2Cell0.setCellValue("");
		tc2Cell0.setCellStyle(tableHeaderCS);

		Cell tc2Cell1 = tablaCabecera2.createCell(1);
		tc2Cell1.setCellValue("");
		tc2Cell1.setCellStyle(tableHeaderCS);

		Cell tc2Cell2 = tablaCabecera2.createCell(2);
		tc2Cell2.setCellValue("");
		tc2Cell2.setCellStyle(tableHeaderCS);

		Cell tc2Cell3 = tablaCabecera2.createCell(3);
		tc2Cell3.setCellValue("");
		tc2Cell3.setCellStyle(tableHeaderCS);

		Cell tc2Cell4 = tablaCabecera2.createCell(4);
		tc2Cell4.setCellValue("");
		tc2Cell4.setCellStyle(tableHeaderCS);

		Cell tc2Cell5 = tablaCabecera2.createCell(5);
		tc2Cell5.setCellValue("");
		tc2Cell5.setCellStyle(tableHeaderCS);

		Cell tc2Cell6 = tablaCabecera2.createCell(6);
		tc2Cell6.setCellValue("");
		tc2Cell6.setCellStyle(tableHeaderCS);

		Cell tc2Cell7 = tablaCabecera2.createCell(7);
		tc2Cell7.setCellValue("");
		tc2Cell7.setCellStyle(tableHeaderCS);

		Cell tc2Cell8 = tablaCabecera2.createCell(8);
		tc2Cell8.setCellValue("Por plazo");
		tc2Cell8.setCellStyle(tableHeaderCS);

		Cell tc2Cell9 = tablaCabecera2.createCell(9);
		tc2Cell9.setCellValue("Por reincidencia");
		tc2Cell9.setCellStyle(tableHeaderCS);

		Cell tc2Cell10 = tablaCabecera2.createCell(10);
		tc2Cell10.setCellValue("Personal sin EPP");
		tc2Cell10.setCellStyle(tableHeaderCS);

		Cell tc2Cell11 = tablaCabecera2.createCell(11);
		tc2Cell11.setCellValue("Total");
		tc2Cell11.setCellStyle(tableHeaderCS);

		// Creamos el detalle de la tabla
		int rowNum = 9;
		for (PgimPenalidadAuxDTO obj : lPgimPenalidadAuxDTO) {
			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(obj.getNuContrato());
			cell0.setCellStyle(tableBodyCS);

			Cell cell1 = row.createCell(1);
			cell1.setCellValue(obj.getNuLiquidacion());
			cell1.setCellStyle(tableBodyCS);

			Cell cell2 = row.createCell(2);
			cell2.setCellValue(obj.getNoEspecialidad());
			cell2.setCellStyle(tableBodyCS);

			Cell cell3 = row.createCell(3);
			cell3.setCellValue(obj.getDescNoRazonSocial());
			cell3.setCellStyle(tableBodyCS);

			Cell cell4 = row.createCell(4);
			cell4.setCellValue(sdf.format(obj.getFeCreacion()));
			cell4.setCellStyle(tableBodyCS);

			Cell cell5 = row.createCell(5);
			cell5.setCellValue(obj.getNoFaseActual());
			cell5.setCellStyle(tableBodyCS);

			Cell cell6 = row.createCell(6);
			cell6.setCellValue(obj.getNoPasoActual());
			cell6.setCellStyle(tableBodyCS);

			if (obj.getMoItemConsumo() == null) {
				obj.setMoItemConsumo(new BigDecimal(0));
			}
			Cell cell7 = row.createCell(7);
			cell7.setCellValue(obj.getMoItemConsumo().doubleValue());
			cell7.setCellStyle(tableBodyCS);

			if (obj.getMoPenalidadPlazo() == null) {
				obj.setMoPenalidadPlazo(new BigDecimal(0));
			}
			Cell cell8 = row.createCell(8);
			cell8.setCellValue(obj.getMoPenalidadPlazo().doubleValue());
			cell8.setCellStyle(tableBodyCS);

			if (obj.getMoPenalidadReincidencia() == null) {
				obj.setMoPenalidadReincidencia(new BigDecimal(0));
			}
			Cell cell9 = row.createCell(9);
			cell9.setCellValue(obj.getMoPenalidadReincidencia().doubleValue());
			cell9.setCellStyle(tableBodyCS);

			if (obj.getMoPenalidadSinEpp() == null) {
				obj.setMoPenalidadSinEpp(new BigDecimal(0));
			}
			Cell cell10 = row.createCell(10);
			cell10.setCellValue(obj.getMoPenalidadSinEpp().doubleValue());
			cell10.setCellStyle(tableBodyCS);

			if (obj.getMoPenalidad() == null) {
				obj.setMoPenalidad(new BigDecimal(0));
			}
			Cell cell11 = row.createCell(11);
			cell11.setCellValue(obj.getMoPenalidad().doubleValue());
			cell11.setCellStyle(tableBodyCS);
		}

		String[] columns = new String[11];
		// Resize a todas las columnas
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		// Resize a las columnas con merge field
		sheet.autoSizeColumn(0, true);
		sheet.autoSizeColumn(1, true);
		sheet.autoSizeColumn(2, true);
		sheet.autoSizeColumn(3, true);
		sheet.autoSizeColumn(4, true);
		sheet.autoSizeColumn(5, true);
		sheet.autoSizeColumn(6, true);
		sheet.autoSizeColumn(7, true);
		sheet.autoSizeColumn(11, true);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();
		
		return archivo;
	}

	@Override
	public byte[] generarReportePresupuestoGastoSupervisionEXCEL(PgimPrspstoGastoSuperDTO filtroPrspstoGastoSuperDTO)
			throws Exception {

		List<PgimPrspstoGastoSuperDTO> lPgimPrspstoGastoSuperDTO = prspstoGastoSuperRepository
				.listarReporteAdHocPreGasSupervision(filtroPrspstoGastoSuperDTO.getDeEmpresaSupervisora(),
						filtroPrspstoGastoSuperDTO.getDescNuAnio());

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("AdHocPresupuestoGastoSupervision");

		// Crea las fuentes para los estilos
		Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());
		Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12,
				IndexedColors.BLACK.getIndex());
		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		// Creando los estilos para las celdas
		CellStyle titleCS = workbook.createCellStyle();
		titleCS.setFont(titleFont);
		titleCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle subTitleCS = workbook.createCellStyle();
		subTitleCS.setFont(tableHeaderFont);
		subTitleCS.setAlignment(HorizontalAlignment.LEFT);

		CellStyle subTitleCS2 = workbook.createCellStyle();
		subTitleCS2.setFont(bodyFont);
		subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

		CellStyle tableHeaderCS = workbook.createCellStyle();
		tableHeaderCS.setFont(tableHeaderFont);
		tableHeaderCS.setBorderBottom(BorderStyle.THIN);
		tableHeaderCS.setBorderTop(BorderStyle.THIN);
		tableHeaderCS.setBorderRight(BorderStyle.THIN);
		tableHeaderCS.setBorderLeft(BorderStyle.THIN);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
		tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle tableBodyCS = workbook.createCellStyle();
		tableBodyCS.setFont(bodyFont);
		tableBodyCS.setBorderBottom(BorderStyle.THIN);
		tableBodyCS.setBorderTop(BorderStyle.THIN);
		tableBodyCS.setBorderRight(BorderStyle.THIN);
		tableBodyCS.setBorderLeft(BorderStyle.THIN);

		// estilo para tipo numerico
		CreationHelper helper = workbook.getCreationHelper();
		CellStyle decimalDatoStyle = workbook.createCellStyle();
		decimalDatoStyle.setFont(bodyFont);
		decimalDatoStyle.setBorderBottom(BorderStyle.THIN);
		decimalDatoStyle.setBorderTop(BorderStyle.THIN);
		decimalDatoStyle.setBorderRight(BorderStyle.THIN);
		decimalDatoStyle.setBorderLeft(BorderStyle.THIN);
		decimalDatoStyle.setAlignment(HorizontalAlignment.RIGHT);
		decimalDatoStyle.setDataFormat(helper.createDataFormat().getFormat("#,##0.00"));

		// Crea el titulo
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(filtroPrspstoGastoSuperDTO.getDeTituloReporte());
		titleCell.setCellStyle(titleCS);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 12));

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Cell fechaGenCell = headerRow.createCell(13);
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Crea un espacio en blanco
		Row emptyRow = sheet.createRow(6);
		Cell emptyCell = emptyRow.createCell(0);
		emptyCell.setCellValue("");
		sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 13));

		// Creamos las cabeceras de la tabla
		Row tablaCabecera1 = sheet.createRow(7);
		Cell tc1Cell0 = tablaCabecera1.createCell(0);
		tc1Cell0.setCellValue("Contrato");
		tc1Cell0.setCellStyle(tableHeaderCS);
		CellRangeAddress mrContrato = new CellRangeAddress(7, 8, 0, 0);
		sheet.addMergedRegion(mrContrato);

		Cell tc1Cell1 = tablaCabecera1.createCell(1);
		tc1Cell1.setCellValue("Fecha de contrato");
		tc1Cell1.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFeCont = new CellRangeAddress(7, 8, 1, 1);
		sheet.addMergedRegion(mrFeCont);

		Cell tc1Cell2 = tablaCabecera1.createCell(2);
		tc1Cell2.setCellValue("Empresa supervisora");
		tc1Cell2.setCellStyle(tableHeaderCS);
		CellRangeAddress mrEmpSuper = new CellRangeAddress(7, 8, 2, 2);
		sheet.addMergedRegion(mrEmpSuper);

		Cell tc1Cell3 = tablaCabecera1.createCell(3);
		tc1Cell3.setCellValue("Monto");
		tc1Cell3.setCellStyle(tableHeaderCS);
		CellRangeAddress mrMonto = new CellRangeAddress(7, 8, 3, 3);
		sheet.addMergedRegion(mrMonto);

		Cell tc1Cell4 = tablaCabecera1.createCell(4);
		tc1Cell4.setCellValue("Consumo del contrato");
		tc1Cell4.setCellStyle(tableHeaderCS);
		CellRangeAddress mrConCont = new CellRangeAddress(7, 8, 4, 4);
		sheet.addMergedRegion(mrConCont);

		Cell tc1Cell5 = tablaCabecera1.createCell(5);
		tc1Cell5.setCellValue("Saldo del contrato");
		tc1Cell5.setCellStyle(tableHeaderCS);
		CellRangeAddress mrSalCont = new CellRangeAddress(7, 8, 5, 5);
		sheet.addMergedRegion(mrSalCont);

		Cell tc1Cell6 = tablaCabecera1.createCell(6);
		tc1Cell6.setCellValue("Acta de fiscalización");
		tc1Cell6.setCellStyle(tableHeaderCS);
		CellRangeAddress mrActaSuper = new CellRangeAddress(7, 7, 6, 7);
		sheet.addMergedRegion(mrActaSuper);

		Cell tc1Cell7 = tablaCabecera1.createCell(8);
		tc1Cell7.setCellValue("Informe de fiscalización");
		tc1Cell7.setCellStyle(tableHeaderCS);
		CellRangeAddress mrInfSuper = new CellRangeAddress(7, 7, 8, 9);
		sheet.addMergedRegion(mrInfSuper);

		Cell tc1Cell8 = tablaCabecera1.createCell(10);
		tc1Cell8.setCellValue("Info. fis. fallida");
		tc1Cell8.setCellStyle(tableHeaderCS);
		CellRangeAddress mrInfFallida = new CellRangeAddress(7, 7, 10, 11);
		sheet.addMergedRegion(mrInfFallida);

		Cell tc1Cell9 = tablaCabecera1.createCell(12);
		tc1Cell9.setCellValue("Informe de cierre");
		tc1Cell9.setCellStyle(tableHeaderCS);
		CellRangeAddress mrInfCierre = new CellRangeAddress(7, 7, 12, 13);
		sheet.addMergedRegion(mrInfCierre);

		// Aplicamos los bordes a las celdas fusionadas
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrContrato, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrFeCont, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrEmpSuper, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrMonto, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrConCont, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrSalCont, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrActaSuper, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrInfSuper, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrInfFallida, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCell(BorderStyle.THIN, mrInfCierre, sheet, workbook);

		Row tablaCabecera2 = sheet.createRow(8);
		Cell tc2Cell0 = tablaCabecera2.createCell(0);
		tc2Cell0.setCellValue("");
		tc2Cell0.setCellStyle(tableHeaderCS);

		Cell tc2Cell1 = tablaCabecera2.createCell(1);
		tc2Cell1.setCellValue("");
		tc2Cell1.setCellStyle(tableHeaderCS);

		Cell tc2Cell2 = tablaCabecera2.createCell(2);
		tc2Cell2.setCellValue("");
		tc2Cell2.setCellStyle(tableHeaderCS);

		Cell tc2Cell3 = tablaCabecera2.createCell(3);
		tc2Cell3.setCellValue("");
		tc2Cell3.setCellStyle(tableHeaderCS);

		Cell tc2Cell4 = tablaCabecera2.createCell(4);
		tc2Cell4.setCellValue("");
		tc2Cell4.setCellStyle(tableHeaderCS);

		Cell tc2Cell5 = tablaCabecera2.createCell(5);
		tc2Cell5.setCellValue("");
		tc2Cell5.setCellStyle(tableHeaderCS);

		Cell tc2Cell6 = tablaCabecera2.createCell(6);
		tc2Cell6.setCellValue("Monto");
		tc2Cell6.setCellStyle(tableHeaderCS);

		Cell tc2Cell7 = tablaCabecera2.createCell(7);
		tc2Cell7.setCellValue("Cantidad");
		tc2Cell7.setCellStyle(tableHeaderCS);

		Cell tc2Cell8 = tablaCabecera2.createCell(8);
		tc2Cell8.setCellValue("Monto");
		tc2Cell8.setCellStyle(tableHeaderCS);

		Cell tc2Cell9 = tablaCabecera2.createCell(9);
		tc2Cell9.setCellValue("Cantidad");
		tc2Cell9.setCellStyle(tableHeaderCS);

		Cell tc2Cell10 = tablaCabecera2.createCell(10);
		tc2Cell10.setCellValue("Monto");
		tc2Cell10.setCellStyle(tableHeaderCS);

		Cell tc2Cell11 = tablaCabecera2.createCell(11);
		tc2Cell11.setCellValue("Cantidad");
		tc2Cell11.setCellStyle(tableHeaderCS);

		Cell tc2Cell12 = tablaCabecera2.createCell(12);
		tc2Cell12.setCellValue("Monto");
		tc2Cell12.setCellStyle(tableHeaderCS);

		Cell tc2Cell13 = tablaCabecera2.createCell(13);
		tc2Cell13.setCellValue("Cantidad");
		tc2Cell13.setCellStyle(tableHeaderCS);

		// Creamos el detalle de la tabla
		int rowNum = 9;
		for (PgimPrspstoGastoSuperDTO obj : lPgimPrspstoGastoSuperDTO) {
			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(obj.getNuContrato());
			cell0.setCellStyle(tableBodyCS);

			Cell cell1 = row.createCell(1);
			cell1.setCellValue(sdf.format(obj.getFeInicioContrato()));
			cell1.setCellStyle(tableBodyCS);

			Cell cell2 = row.createCell(2);
			cell2.setCellValue(obj.getDeEmpresaSupervisora());
			cell2.setCellStyle(tableBodyCS);

			if (obj.getMoImporteContrato() == null) {
				obj.setMoImporteContrato(new BigDecimal(0));
			}
			Cell cell3 = row.createCell(3);
			cell3.setCellValue(obj.getMoImporteContrato().doubleValue());
			cell3.setCellStyle(decimalDatoStyle);

			if (obj.getMoConsumoContrato() == null) {
				obj.setMoConsumoContrato(new BigDecimal(0));
			}
			Cell cell4 = row.createCell(4);
			cell4.setCellValue(obj.getMoConsumoContrato().doubleValue());
			cell4.setCellStyle(decimalDatoStyle);

			if (obj.getMoSaldo() == null) {
				obj.setMoSaldo(new BigDecimal(0));
			}
			Cell cell5 = row.createCell(5);
			cell5.setCellValue(obj.getMoSaldo().doubleValue());
			cell5.setCellStyle(decimalDatoStyle);

			if (obj.getMoActaSupervision() == null) {
				obj.setMoActaSupervision(new BigDecimal(0));
			}
			Cell cell6 = row.createCell(6);
			cell6.setCellValue(obj.getMoActaSupervision().doubleValue());
			cell6.setCellStyle(decimalDatoStyle);

			Cell cell7 = row.createCell(7);
			cell7.setCellValue(obj.getNuActaSupervision());
			cell7.setCellStyle(tableBodyCS);

			if (obj.getMoInformeSupervision() == null) {
				obj.setMoInformeSupervision(new BigDecimal(0));
			}
			Cell cell8 = row.createCell(8);
			cell8.setCellValue(obj.getMoInformeSupervision().doubleValue());
			cell8.setCellStyle(decimalDatoStyle);

			Cell cell9 = row.createCell(9);
			cell9.setCellValue(obj.getNuInformeSupervision());
			cell9.setCellStyle(tableBodyCS);

			if (obj.getMoSupervisionFallida() == null) {
				obj.setMoSupervisionFallida(new BigDecimal(0));
			}
			Cell cell10 = row.createCell(10);
			cell10.setCellValue(obj.getMoSupervisionFallida().doubleValue());
			cell10.setCellStyle(decimalDatoStyle);

			Cell cell11 = row.createCell(11);
			cell11.setCellValue(obj.getNuSupervisionFallida());
			cell11.setCellStyle(tableBodyCS);

			if (obj.getMoInformeGestion() == null) {
				obj.setMoInformeGestion(new BigDecimal(0));
			}
			Cell cell12 = row.createCell(12);
			cell12.setCellValue(obj.getMoInformeGestion().doubleValue());
			cell12.setCellStyle(decimalDatoStyle);

			Cell cell13 = row.createCell(13);
			cell13.setCellValue(obj.getNuInformeGestion());
			cell13.setCellStyle(tableBodyCS);
		}

		String[] columns = new String[14];
		// Resize a todas las columnas
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		// Resize a las columnas con merge field
		sheet.autoSizeColumn(0, true);
		sheet.autoSizeColumn(1, true);
		sheet.autoSizeColumn(2, true);
		sheet.autoSizeColumn(3, true);
		sheet.autoSizeColumn(4, true);
		sheet.autoSizeColumn(5, true);
		sheet.autoSizeColumn(6, true);
		sheet.autoSizeColumn(7, true);
		sheet.autoSizeColumn(8, true);
		sheet.autoSizeColumn(9, true);
		sheet.autoSizeColumn(10, true);
		sheet.autoSizeColumn(11, true);
		sheet.autoSizeColumn(12, true);
		sheet.autoSizeColumn(13, true);
		sheet.autoSizeColumn(14, true);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1, 1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	@Override
	public byte[] generarReportePresupuestoGastoSupervisionPDF(String ruta,
			PgimPrspstoGastoSuperDTO filtroPrspstoGastoSuperDTO, Long idTipoExtensionGen)
			throws IOException, JSONException, XmlException {
		File plantilla = new File(ruta);

		Locale locale = new Locale("en", "US");
		String pattern = "#,##0.00";
		DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		df.applyPattern(pattern);

		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");

		List<PgimPrspstoGastoSuperDTO> lPgimPrspstoGastoSuperDTO = prspstoGastoSuperRepository
				.listarReporteAdHocPreGasSupervision(filtroPrspstoGastoSuperDTO.getDeEmpresaSupervisora(),
						filtroPrspstoGastoSuperDTO.getDescNuAnio());

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		String titulo = filtroPrspstoGastoSuperDTO.getDeTituloReporte();

		try {
			this.crearHeaderPdfReporte(titulo, documento, "HORIZONTAL");
		} catch (Exception e1) {
			log.error(e1.getMessage(), e1);
			throw new PgimException("error", "DOC_GEN" + e1.getMessage());
		}

		JSONArray listReport = new JSONArray();
		JSONObject titulo_reporte = new JSONObject();
		titulo_reporte.put("mergeField", "titulo_reporte");
		titulo_reporte.put("value", titulo);
		listReport.put(titulo_reporte);

		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(new Date());

		documento = PoiWordUtil.replaceJSONArray(documento, listReport);

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		this.getFooterAlignBottomDocs(documento,fechaDeGeneracion, "HORIZONTAL", -100, 13000); //PLANTILLA_PRESUPUESTO_GASTO_SUPERVISION.docx

		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_presupuesto_gasto_supervision")) {
					paragraph.removeRun(j);

					XWPFTable tableDetalle = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 14000);

					// Primera Fila

					XWPFTableRow tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, 0, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2000, 0, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fecha de contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, 0, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Empresa supervisora", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Consumo del contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Saldo del contrato", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Acta de fiscalización", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Informe de fiscalización", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Info. fis. fallida", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Informe de cierre", 7, true);

					tDetalleRowOne = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowOne, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 0, 13, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "",
							7, true);

					// Segunda Fila

					XWPFTableRow tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, null, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1500, 1, 0, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 2000, 1, 1, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 700, 1, 2, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 3, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 4, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 5, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "", 7,
							true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 6, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 7, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Cantidad", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 8, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 9, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Cantidad", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 10, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 11, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Cantidad", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 12, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Monto", 7, true);

					tDetalleRowTwo = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowTwo, XWPFVertAlign.CENTER,
							200, "FFFFFF", 1000, 1, 13, 0, ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Cantidad", 7, true);

					int cant = 1;
					for (PgimPrspstoGastoSuperDTO obj : lPgimPrspstoGastoSuperDTO) {
						cant++;

						XWPFTableRow tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1500, cant, 0, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuContrato(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 2000, cant, 1, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, sdf.format(obj.getFeInicioContrato()), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 700, cant, 2, 0, ParagraphAlignment.LEFT,
								LineSpacingRule.EXACT, 0, 0, obj.getDeEmpresaSupervisora(), 7, false);

						if (obj.getMoImporteContrato() == null) {
							obj.setMoImporteContrato(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 3, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoImporteContrato()), 7, false);

						if (obj.getMoConsumoContrato() == null) {
							obj.setMoConsumoContrato(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 4, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoConsumoContrato()), 7, false);

						if (obj.getMoSaldo() == null) {
							obj.setMoSaldo(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 5, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoSaldo()), 7, false);

						if (obj.getMoActaSupervision() == null) {
							obj.setMoActaSupervision(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 6, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoActaSupervision()), 7, false);

						if (obj.getNuActaSupervision() == null) {
							obj.setNuActaSupervision(0L);
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 7, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuActaSupervision().toString(), 7, false);

						if (obj.getMoInformeSupervision() == null) {
							obj.setMoInformeSupervision(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 8, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoInformeSupervision()), 7, false);

						if (obj.getNuInformeSupervision() == null) {
							obj.setNuInformeSupervision(0L);
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 9, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuInformeSupervision().toString(), 7, false);

						if (obj.getMoSupervisionFallida() == null) {
							obj.setMoSupervisionFallida(new BigDecimal(0));
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 10, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoSupervisionFallida()), 7, false);

						if (obj.getNuSupervisionFallida() == null) {
							obj.setNuSupervisionFallida(0L);
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 11, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuSupervisionFallida().toString(), 7, false);

						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 12, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, df.format(obj.getMoInformeGestion()), 7, false);

						if (obj.getNuInformeGestion() == null) {
							obj.setNuInformeGestion(0L);
						}
						tDetalleRowItemLiq = PoiWordUtil.createTableCell(tableDetalle, tDetalleRowItemLiq,
								XWPFVertAlign.CENTER, 200, "FFFFFF", 1000, cant, 13, 0, ParagraphAlignment.RIGHT,
								LineSpacingRule.EXACT, 0, 0, obj.getNuInformeGestion().toString(), 7, false);

					}

					PoiWordUtil.mergeCellVertically(tableDetalle, 0, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 1, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 2, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 3, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 4, 0, 1);
					PoiWordUtil.mergeCellVertically(tableDetalle, 5, 0, 1);

					// Para los merge horizontal, realizarlos desde el ultimo hacia el primero,
					// ya que si no se hace en ese orden, no reconoce las celdas que se hicieron
					// merge como tales(celdas)
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 12, 13);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 10, 11);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 8, 9);
					PoiWordUtil.mergeCellHorizontally(tableDetalle, 0, 6, 7);

				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;
	}

	@Override
	public List<PgimDocumentoDTO> filtrarDocumentos(PgimDocumentoDTO pgimDocumentoDTO,
			List<PgimDocumentoDTO> lPgimDocumentoDTOResultado) {

		PgimFiltroDocumentoDTO pgimFiltroDocumento = pgimDocumentoDTO.getFiltroDocumento();

		if (pgimFiltroDocumento == null) {
			return lPgimDocumentoDTOResultado;
		}

		if (pgimFiltroDocumento.getPgimFiltroItemDocumento() == null) {
			return lPgimDocumentoDTOResultado;
		}

		List<PgimDocumentoDTO> lPgimDocumentoDTOFiltrada = new ArrayList<PgimDocumentoDTO>();
		Long idTabla;

		for (PgimFiltroItemDocumentoDTO pgimFiltroItemDocumentoDTO : pgimFiltroDocumento.getPgimFiltroItemDocumento()) {
			idTabla = pgimFiltroItemDocumentoDTO.getIdTabla();

			if (pgimFiltroItemDocumentoDTO.getNombreTabla().equals("PGIM_TD_ITEM_SOLICITUD_DOC")) {

				List<PgimItemRecepcionDocDTO> lPgimItemRecepcionDocDTO = this.itemRecepcionDocRepository
						.listarItemRecepcionDocxIdItemSolicitudDoc(idTabla);

				for (PgimItemRecepcionDocDTO pgimItemRecepcionDocDTO : lPgimItemRecepcionDocDTO) {
					for (PgimDocumentoDTO pgimDocumentoDTOSinFiltro : lPgimDocumentoDTOResultado) {
						if (pgimItemRecepcionDocDTO.getIdDocumento()
								.equals(pgimDocumentoDTOSinFiltro.getIdDocumento())) {
							lPgimDocumentoDTOFiltrada.add(pgimDocumentoDTOSinFiltro);
						}
					}
				}

			} else if (pgimFiltroItemDocumentoDTO.getNombreTabla().equals("PGIM_TC_INSTANCIA_PASO")) {
				// - Implementar aquí el filtrado de acuerdo con la instancia del paso.

				List<PgimInstanciaPasoDocDTO> lPgimInstanciaPasoDoDTO = this.instanciaPasoDocRepository
						.obtenerInstanciaPasosActuales(idTabla);

				for (PgimInstanciaPasoDocDTO pgimInstanciaPasoDocDTO : lPgimInstanciaPasoDoDTO) {
					for (PgimDocumentoDTO pgimDocumentoDTOSinFiltro : lPgimDocumentoDTOResultado) {
						if (pgimInstanciaPasoDocDTO.getIdDocumento()
								.equals(pgimDocumentoDTOSinFiltro.getIdDocumento())) {
							lPgimDocumentoDTOFiltrada.add(pgimDocumentoDTOSinFiltro);
						}
					}
				}

			} else if (pgimFiltroItemDocumentoDTO.getNombreTabla().equals("SOLO_DOCUMENTOS")) {

				if (lPgimDocumentoDTOFiltrada.size() > 0) {
					lPgimDocumentoDTOResultado = lPgimDocumentoDTOFiltrada;
				}

				lPgimDocumentoDTOFiltrada = lPgimDocumentoDTOResultado.stream().filter(pgimDocumentoDTOEle -> {
					return (pgimDocumentoDTOEle.getTipoRegistro().equals("D"));
				}).collect(Collectors.toList());

			} else if (pgimFiltroItemDocumentoDTO.getNombreTabla().equals("ID_DOCUMENTO_EXCLUIR")) {

				if (lPgimDocumentoDTOFiltrada.size() > 0) {
					lPgimDocumentoDTOResultado = lPgimDocumentoDTOFiltrada;
				}

				lPgimDocumentoDTOFiltrada = lPgimDocumentoDTOResultado.stream().filter(pgimDocumentoDTOEle -> {
					return (!pgimDocumentoDTOEle.getIdDocumento().equals(pgimFiltroItemDocumentoDTO.getIdTabla()));
				}).collect(Collectors.toList());

			}
		}

		return lPgimDocumentoDTOFiltrada;
	}

	public byte[] crearTablaDatosExcelReporteHistoricoUM(List<?> lstDatos,
			ArrayList<ReporteColumnDTO> columnasAExportar, String titulo, String cadenaFiltro,
			CabeceraReporteHistoricoUmDTO datosCabecera) throws Exception {

		SimpleDateFormat sdf = new SimpleDateFormat("dd'/'MM'/'yyyy");
		SimpleDateFormat sdf_hora = new SimpleDateFormat("dd'/'MM'/'yyyy HH':'mm");

		String[] columns = new String[columnasAExportar.size() + 1];
		columns[0] = "N°";

		for (int i = 0; i < columnasAExportar.size(); i++) {
			ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
			columns[i + 1] = reporteColumnDTO.getLabelColumn();
		}

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Reporte");

		CreationHelper helper = workbook.getCreationHelper();

		Font headerFont = PoiExcelUtil.createFont(workbook, true, (short) 14,
				IndexedColors.BLACK.getIndex());
		Font headerFont2 = PoiExcelUtil.createFont(workbook, true, (short) 11,
				IndexedColors.BLACK.getIndex());

		CellStyle titleCellStyle = workbook.createCellStyle();
		titleCellStyle.setFont(headerFont);
		titleCellStyle.setAlignment(HorizontalAlignment.CENTER);

		CellStyle headerCellStyle = workbook.createCellStyle();
		headerCellStyle.setFont(headerFont);
		headerCellStyle.setBorderBottom(BorderStyle.THIN);
		headerCellStyle.setBorderTop(BorderStyle.THIN);
		headerCellStyle.setBorderRight(BorderStyle.THIN);
		headerCellStyle.setBorderLeft(BorderStyle.THIN);

		CellStyle header2CellStyle = workbook.createCellStyle();
		header2CellStyle.setFont(headerFont2);
		header2CellStyle.setBorderBottom(BorderStyle.THIN);
		header2CellStyle.setBorderTop(BorderStyle.THIN);
		header2CellStyle.setBorderRight(BorderStyle.THIN);
		header2CellStyle.setBorderLeft(BorderStyle.THIN);
		header2CellStyle.setAlignment(HorizontalAlignment.LEFT);

		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10,
				IndexedColors.BLACK.getIndex());

		CellStyle bodyCellStyle = workbook.createCellStyle();
		bodyCellStyle.setFont(bodyFont);
		bodyCellStyle.setBorderBottom(BorderStyle.THIN);
		bodyCellStyle.setBorderTop(BorderStyle.THIN);
		bodyCellStyle.setBorderRight(BorderStyle.THIN);
		bodyCellStyle.setBorderLeft(BorderStyle.THIN);

		CellStyle numeroDatoStyle = workbook.createCellStyle();
		numeroDatoStyle.setFont(bodyFont);
		numeroDatoStyle.setBorderBottom(BorderStyle.THIN);
		numeroDatoStyle.setBorderTop(BorderStyle.THIN);
		numeroDatoStyle.setBorderRight(BorderStyle.THIN);
		numeroDatoStyle.setBorderLeft(BorderStyle.THIN);
		numeroDatoStyle.setAlignment(HorizontalAlignment.RIGHT);

		CellStyle decimalDatoStyle = workbook.createCellStyle();
		decimalDatoStyle.setFont(bodyFont);
		decimalDatoStyle.setBorderBottom(BorderStyle.THIN);
		decimalDatoStyle.setBorderTop(BorderStyle.THIN);
		decimalDatoStyle.setBorderRight(BorderStyle.THIN);
		decimalDatoStyle.setBorderLeft(BorderStyle.THIN);
		decimalDatoStyle.setAlignment(HorizontalAlignment.RIGHT);
		decimalDatoStyle.setDataFormat(helper.createDataFormat().getFormat("#,##0.00"));

		CellStyle fechaDatoStyle = workbook.createCellStyle();
		fechaDatoStyle.setFont(bodyFont);
		fechaDatoStyle.setBorderBottom(BorderStyle.THIN);
		fechaDatoStyle.setBorderTop(BorderStyle.THIN);
		fechaDatoStyle.setBorderRight(BorderStyle.THIN);
		fechaDatoStyle.setBorderLeft(BorderStyle.THIN);
		fechaDatoStyle.setAlignment(HorizontalAlignment.CENTER);

		CellStyle fechaStyle = workbook.createCellStyle();
		fechaStyle.setDataFormat(helper.createDataFormat().getFormat("m/d/yy h:mm"));
		fechaStyle.setFont(bodyFont);

		CellStyle filtrosStyle = workbook.createCellStyle();
		filtrosStyle.setFont(bodyFont);
		filtrosStyle.setAlignment(HorizontalAlignment.CENTER);

		// Create Row - title
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(titulo);
		titleCell.setCellStyle(titleCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, columnasAExportar.size() - 1)); // row(1,1) columnas(0,5)

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9,IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);

		Cell fechaGenCell = headerRow.createCell(columnasAExportar.size());
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Create Row - filtros
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, columnasAExportar.size() - 1));

		// Create Row - Código Unidad minera
		Row codUnidadMineraRow = sheet.createRow(6);

		Cell codUmLblCell = codUnidadMineraRow.createCell(1);
		codUmLblCell.setCellValue("Código unidad fiscalizada: ");
		codUmLblCell.setCellStyle(header2CellStyle);
		Cell codUmDatoCell = codUnidadMineraRow.createCell(2);
		codUmDatoCell.setCellValue(datosCabecera.getCoUnidadMinera());
		codUmDatoCell.setCellStyle(bodyCellStyle);

		// Create Row - Unidad minera
		Row unidadMineraRow = sheet.createRow(7);

		Cell umLblCell = unidadMineraRow.createCell(1);
		umLblCell.setCellValue("Unidad fiscalizada: ");
		umLblCell.setCellStyle(header2CellStyle);
		Cell umDatoCell = unidadMineraRow.createCell(2);
		umDatoCell.setCellValue(datosCabecera.getNoUnidadMinera());
		umDatoCell.setCellStyle(bodyCellStyle);

		// Create Row - Tipo unidad minera
		Row agenteSupervRow = sheet.createRow(8);

		Cell tipoLblCell = agenteSupervRow.createCell(1);
		tipoLblCell.setCellValue("Tipo unidad fiscalizada: ");
		tipoLblCell.setCellStyle(header2CellStyle);
		Cell tipoDatoCell = agenteSupervRow.createCell(2);
		tipoDatoCell.setCellValue(datosCabecera.getTipoUnidadMinera());
		tipoDatoCell.setCellStyle(bodyCellStyle);

		// Create Row - cabecera de tabla
		Row headerRowTable = sheet.createRow(10);
		PoiExcelUtil.createCellsInRow(headerRowTable, columns, headerCellStyle);

		// Create Other rows - Datos
		int rowNumInicial = 11;
		int rowNum = rowNumInicial;
		int index = 1;

		for (int k = 0; k < lstDatos.size(); k++) {

			ObjectMapper objectMapper = new ObjectMapper();
			String entidadJsonStr = objectMapper.writeValueAsString(lstDatos.get(k));

			JSONObject entidadJson = new JSONObject(entidadJsonStr);

			Row row = sheet.createRow(rowNum++);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(index);
			cell0.setCellStyle(bodyCellStyle);

			for (int i = 0; i < columnasAExportar.size(); i++) {
				ReporteColumnDTO reporteColumnDTO = columnasAExportar.get(i);
				String valor = entidadJson.optString(reporteColumnDTO.getNameColumn());
				CellStyle cellStyle = bodyCellStyle;

				if (valor.equals("null")) {
					valor = "";
				}

				if (reporteColumnDTO.getTypeColumn().equals("fecha")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("fechahora")) {
					if (!valor.equals("")) {
						Date fecha = new Date(Long.parseLong(entidadJson.optString(reporteColumnDTO.getNameColumn())));
						valor = sdf_hora.format(fecha);
						cellStyle = fechaDatoStyle;
					}
				}

				if (reporteColumnDTO.getTypeColumn().equals("numero")) {
					cellStyle = numeroDatoStyle;
				}

				if (reporteColumnDTO.getTypeColumn().equals("decimal")) {
					cellStyle = decimalDatoStyle;
				}

				Cell cell = row.createCell(i + 1);
				cell.setCellStyle(cellStyle);

				if (reporteColumnDTO.getTypeColumn().equals("numero")
						|| reporteColumnDTO.getTypeColumn().equals("decimal")) {
					if (!valor.equals("")) {
						cell.setCellValue(Double.parseDouble(valor));
					}
				} else {
					cell.setCellValue(valor);
				}
			}

			index++;
		}

		// Resize all columns to fit the content size
		PoiExcelUtil.resizeAllColumnsInSheet(sheet, columns);

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.addImgExcel(workbook, sheet, base64, 1,1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		//Cerrar el libro de trabajo
		workbook.close();

		return archivo;
	}

	@Override
	public byte[] generarRevisionAntecedente(String ruta, Long idSupervision, Long idTipoExtensionGen, 
			AuditoriaDTO auditoriaDTO) throws Exception {

		// fecha actual del sistema
		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = sdfg.format(fechaActual);

		PgimSupervisionDTO valoresRevisionAntecedente = supervisionService
				.obtenerSupervisionRevisionAntecedente(idSupervision);

		List<PgimAntecedenteAuxDTO> listaAntecedenteInformeSuperv = antecedenteSupervRepository
				.obtenerAntecedenteInformeSuperv(idSupervision, EValorParametro.TIANT_INFRME_FSCLZCION.toString());

		List<PgimAntecedenteAuxDTO> listaAntecedenteOtrosDocs = antecedenteSupervRepository
				.obtenerAntecedenteOtrosDocs(idSupervision, EValorParametro.TIANT_INFRME_FSCLZCION.toString());

		PgimSupervisionDTO pgimSupervisionDTO = supervisionService.obtenerSupervisionPorId(idSupervision);

		for (PgimAntecedenteAuxDTO antecedente : listaAntecedenteOtrosDocs) {

			if (antecedente.getCoDocumentoSiged() != null) {
				Archivos archivos = this.obtenerArhivosConVersionesSiged(String.valueOf(antecedente.getCoDocumentoSiged()), auditoriaDTO);

				if (archivos.getListaArchivo() != null && archivos.getListaArchivo().size() > 0) {
					antecedente.setNombreArchivo(archivos.getListaArchivo().get(0).getNombre());
				}
			}
		}

		List<PgimSupervisionDTO> listaSupervisores = new LinkedList<PgimSupervisionDTO>();
		List<PgimEqpInstanciaProDTO> listaSupervisoresOsi = eqpInstanciaProService
				.obtenerPersonalXRolOsi(valoresRevisionAntecedente.getIdInstanciaProceso(), 4L);

		List<PgimEqpInstanciaProDTO> listaSupervisoresContrato = eqpInstanciaProService
				.obtenerPersonalXRolContrato(valoresRevisionAntecedente.getIdInstanciaProceso(), 4L);

		List<PgimEqpInstanciaProDTO> listaSupervisoresContratoAbogado = eqpInstanciaProService
				.obtenerPersonalXRolContrato(valoresRevisionAntecedente.getIdInstanciaProceso(), 34L);

		List<PgimEqpInstanciaProDTO> listaEspecialistasOsi = eqpInstanciaProService.obtenerPersonalResponsableXRolOsi(
			valoresRevisionAntecedente.getIdInstanciaProceso(), ConstantesUtil.PROCESO_ROL_ESP_TECNICO);

		if(listaEspecialistasOsi.size() != 1){
			String errorMsj = "Para generar el documento se requiere que en el equipo solo exista un especialista técnico como responsable; actualmente existen "+listaEspecialistasOsi.size()+", por favor seleccione solo un responsable por rol";
			throw new PgimException(TipoResultado.WARNING, errorMsj);
		}
			
		String nombreEspecialista = "";

		String prefijo_nombre = "";

		for (PgimEqpInstanciaProDTO supeOsi : listaSupervisoresOsi) {

			PgimSupervisionDTO obj = new PgimSupervisionDTO();

			// STORY: PGIM-6163: FISC. Gen. de revisión de antecedentes con fecha generación, cargo, prefijo y firma digital
			// Permite mostrar la data el nombre completo de la persona y/o prefijo mediante condicionales
			if (supeOsi.getDescNoPersona() != null) {
				if (supeOsi.getNoPrefijoPersonaEquipo() != null) {
					prefijo_nombre = supeOsi.getNoPrefijoPersonaEquipo() + " " + supeOsi.getDescNoPersona().toUpperCase();
				} else {
					prefijo_nombre = supeOsi.getDescNoPersona().toUpperCase();
				}
			} else {
				prefijo_nombre = "";
			}

			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeOsi.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(supeOsi.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(supeOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeOsi.getNoCargoPersonaEquipo());
			obj.setDescNoRazonSocialEmpSupervisora("Osinergmin");
			listaSupervisores.add(obj);
		}

		for (PgimEqpInstanciaProDTO supeContr : listaSupervisoresContrato) {
			PgimSupervisionDTO obj = new PgimSupervisionDTO();

			// STORY: PGIM-6163: FISC. Gen. de revisión de antecedentes con fecha generación, cargo, prefijo y firma digital
				// Permite mostrar la data el nombre completo de la persona y/o prefijo mediante condicionales
				if (supeContr.getDescNoPersona() != null) {
					if (supeContr.getNoPrefijoPersonaEquipo() != null) {
						prefijo_nombre = supeContr.getNoPrefijoPersonaEquipo() + " " + supeContr.getDescNoPersona().toUpperCase();
					} else {
						prefijo_nombre = supeContr.getDescNoPersona().toUpperCase();
					}
				} else {
					prefijo_nombre = "";
				}

			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContr.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(supeContr.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(supeContr.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContr.getNoCargoPersonaEquipo());
			obj.setDescNoRazonSocialEmpSupervisora("Supervisora");
			listaSupervisores.add(obj);
		}

		for (PgimEqpInstanciaProDTO supeContrAbogado : listaSupervisoresContratoAbogado) {
			PgimSupervisionDTO obj = new PgimSupervisionDTO();

			// STORY: PGIM-6163: FISC. Gen. de revisión de antecedentes con fecha generación, cargo, prefijo y firma digital
			// Permite mostrar la data el nombre completo de la persona y/o prefijo mediante condicionales
			if (supeContrAbogado.getDescNoPersona() != null) {
				if (supeContrAbogado.getNoPrefijoPersonaEquipo() != null) {
					prefijo_nombre = supeContrAbogado.getNoPrefijoPersonaEquipo() + " " + supeContrAbogado.getDescNoPersona().toUpperCase();
				} else {
					prefijo_nombre = supeContrAbogado.getDescNoPersona().toUpperCase();
				}
			} else {
				prefijo_nombre = "";
			}

			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(supeContrAbogado.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(supeContrAbogado.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(supeContrAbogado.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(supeContrAbogado.getNoCargoPersonaEquipo());
			obj.setDescNoRazonSocialEmpSupervisora("Supervisora");
			listaSupervisores.add(obj);
		}

		// STORY: PGIM-6163: FISC. Gen. de revisión de antecedentes con fecha generación, cargo, prefijo y firma digital
		if (listaEspecialistasOsi.size() > 0) {
			PgimEqpInstanciaProDTO espOsi = listaEspecialistasOsi.get(0);
			// Permite mostrar la data el nombre completo de la persona y/o prefijo mediante condicionales
			if (espOsi.getNoPrefijoPersonaEquipo() != null) {
				prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " ";
			} else {
				prefijo_nombre = "";
			}

			nombreEspecialista = prefijo_nombre + " " + espOsi.getDescNoPersona().toUpperCase() + " " + espOsi.getDescApPaterno().toUpperCase() + " " + espOsi.getDescApMaterno().toUpperCase();

			PgimSupervisionDTO obj = new PgimSupervisionDTO();
			
			// Permite mostrar la data el nombre de la persona y/o prefijo mediante condicionales
			prefijo_nombre = "";
			if (espOsi.getNoPrefijoPersonaEquipo() != null) {
				prefijo_nombre = espOsi.getNoPrefijoPersonaEquipo() + " " + espOsi.getDescNoPersona().toUpperCase();
			} else {
				prefijo_nombre = espOsi.getDescNoPersona().toUpperCase();
			}
			

			obj.setDescNoPersona(prefijo_nombre);
			obj.setDescApPaterno(espOsi.getDescApPaterno().toUpperCase());
			obj.setDescApMaterno(espOsi.getDescApMaterno().toUpperCase());
			obj.setDescCoDocumentoIdentidad(espOsi.getDescCoDocumentoIdentidad());
			obj.setDescDeCargo(espOsi.getNoCargoPersonaEquipo());
			obj.setDescNoRazonSocialEmpSupervisora("Osinergmin");
			listaSupervisores.add(obj);
		}

		File plantilla = new File(ruta);

		Path rutaPlantilla = Paths.get(plantilla.getPath());
		XWPFDocument documento = new XWPFDocument(Files.newInputStream(rutaPlantilla));

		SimpleDateFormat sdf = new SimpleDateFormat("d'/'MM'/'yyyy");
		String fechaConsulta = sdf.format(new Date());

		JSONArray list = new JSONArray();

		JSONObject cod_fiscalizacion = new JSONObject();
		cod_fiscalizacion.put("mergeField", "cod_fiscalizacion");
		cod_fiscalizacion.put("value", pgimSupervisionDTO.getCoSupervision().toUpperCase());
		list.put(cod_fiscalizacion);

		JSONObject nro_expediente = new JSONObject();
		nro_expediente.put("mergeField", "nro_expediente");
		nro_expediente.put("value", pgimSupervisionDTO.getDescNuExpedienteSiged().toUpperCase());
		list.put(nro_expediente);

		// Creación de la línea #16 // STORY: PGIM-6162: FISC. Gen. de credencial con fecha generación, prefijo y firma digital
		// PoiWordUtil.createParagraph(documento, 0, ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, 1,
		// 		"«image:osifirma»", 8, false, false, 0, false, 0);

		///////////////////////////////////////////////////////
		// REVIEW: Uniformidad de la fecha generada por la PGIM
		// y el numero de paginas en el pie de paginas
		///////////////////////////////////////////////////////

		// PIE DE PÁGINA: Fecha de generación del documento y paginado.
		Integer alignBottom = 0;

		if(idTipoExtensionGen.equals(ConstantesUtil.PARAM_SC_DOCX)){
			alignBottom = 0;
		}else{
			alignBottom = -100;
		}
		this.getFooterAlignBottomDocs(documento, fechaDeGeneracion, "VERTICAL", alignBottom, 8000); // PLANTILLA_REVISION_ANTECEDENTE_SUPERVISION.docx

		///////////////////////////////////////////////////////
		// REVIEW: Fin
		///////////////////////////////////////////////////////

		PgimUnidadMineraDTO pgimUnidadMineraDTO = unidadMineraService
				.obtenerUnidadMinera(pgimSupervisionDTO.getIdUnidadMinera());

		documento = PoiWordUtil.replaceJSONArray(documento, list);

		// tabla general
		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_general")) {
					paragraph.removeRun(j);

					XWPFTable tableSupervision = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					// primera fila
					XWPFTableRow tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2450, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "REVISIÓN DE ANTECEDENTES", 8,
							true);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 3500, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);

					tableSupervisionRowOne = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 1000, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, fechaConsulta, 8, false);

					// segunda fila
					XWPFTableRow tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2500, 1, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Expediente de fiscalización N° ", 8,
							true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 5500, 1, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							valoresRevisionAntecedente.getDescNuExpedienteSiged(), 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowTwo,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2450, 1, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "ESPECIALISTA TÉCNICO/A - GSM ", 7,
							true);

					// tercera fila fila
					XWPFTableRow tableSupervisionRowThree = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2500, 2, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Agente fiscalizado ", 8, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 3500, 2, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							valoresRevisionAntecedente.getDescAgenteSupervisadoNoRazonSocial(), 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowThree,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 2450, 2, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, nombreEspecialista, 8, false);

					// cuarto fila
					XWPFTableRow tableSupervisionRowFour = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2500, 3, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Unidad fiscalizada ", 8, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFour,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 3500, 3, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							pgimUnidadMineraDTO.getCoUnidadMinera()+" - "+valoresRevisionAntecedente.getDescUnidadMineraNoUnidadMinera(), 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFour,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 2450, 3, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);

					// quinto fila
					XWPFTableRow tableSupervisionRowFive = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2500, 4, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Tipo unidad fiscalizada", 8, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFive,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 3500, 4, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							pgimUnidadMineraDTO.getDescIdTipoUnidadMinera(), 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowFive,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 2450, 4, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);

					//sexta fila
					if(valoresRevisionAntecedente.getDescEmpresaSupervisoraNoRazonSocial() == null)
						valoresRevisionAntecedente.setDescEmpresaSupervisoraNoRazonSocial("---");

					XWPFTableRow tableSupervisionRowSeven = PoiWordUtil.createTableCell(tableSupervision, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2500, 5, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Empresa supervisora ", 8, true);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSeven,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 3500, 5, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
							valoresRevisionAntecedente.getDescEmpresaSupervisoraNoRazonSocial(), 8, false);

					tableSupervisionRowTwo = PoiWordUtil.createTableCell(tableSupervision, tableSupervisionRowSeven,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 2450, 5, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);

					PoiWordUtil.mergeCellHorizontally(tableSupervision, 0, 0, 1);
					PoiWordUtil.mergeCellVertically(tableSupervision, 2, 2, 5);
				}
			}
		}
		
		// tabla de informes de supervision
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_informe_supervision")) {
					paragraph.removeRun(j);

					XWPFTable tableInformesSuperv = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					// primera fila
					XWPFTableRow tableInformesSupervRowOne = PoiWordUtil.createTableCell(tableInformesSuperv, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 100, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Ítem", 8, true);
					tableInformesSupervRowOne = PoiWordUtil.createTableCell(tableInformesSuperv,
							tableInformesSupervRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 1500, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Expediente de fiscalización", 8,
							true);
					tableInformesSupervRowOne = PoiWordUtil.createTableCell(tableInformesSuperv,
							tableInformesSupervRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 1500, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Fecha de fiscalización \r\n Inicio - Fin", 8, true);
					tableInformesSupervRowOne = PoiWordUtil.createTableCell(tableInformesSuperv,
							tableInformesSupervRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 1600, 0, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Tipo de fiscalización", 8, true);
					tableInformesSupervRowOne = PoiWordUtil.createTableCell(tableInformesSuperv,
							tableInformesSupervRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 6000, 0, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Aspectos revisados y que serán materia de verificación", 8, true);

					tableInformesSupervRowOne.setRepeatHeader(true);

					int cant = 0;
					if (listaAntecedenteInformeSuperv.size() == 0) {
						cant++;
						XWPFTableRow tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv, null,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 100, cant, 0, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Sin registros", 8, false);
						tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
								tableInformesSupervRow,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 1500, cant, 1, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
						tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
								tableInformesSupervRow,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 1500, cant, 2, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
						tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
								tableInformesSupervRow,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 1600, cant, 3, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
						tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
								tableInformesSupervRow,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 6000, cant, 4, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
						
						PoiWordUtil.mergeCellHorizontally(tableInformesSuperv, cant, 0, 4);

					} else {
						for (int k = 0; k < listaAntecedenteInformeSuperv.size(); k++) {
							cant++;
							XWPFTableRow tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv, null,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 100, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, String.valueOf(cant), 8,
									false);
							tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
									tableInformesSupervRow,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 1500, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAntecedenteInformeSuperv.get(k).getNuExpedienteSiged(), 8, false);
							tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
									tableInformesSupervRow,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 1500, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAntecedenteInformeSuperv.get(k).getFecha(), 8, false);
							tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
									tableInformesSupervRow,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 1600, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAntecedenteInformeSuperv.get(k).getTipoSupervision(), 8, false);
							tableInformesSupervRow = PoiWordUtil.createTableCell(tableInformesSuperv,
									tableInformesSupervRow,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 6000, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAntecedenteInformeSuperv.get(k).getDeAspectosRevisados(), 8, false);
						}
					}
				}
			}
		}

		// tabla de otros documentos
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_otros_doc")) {
					paragraph.removeRun(j);

					XWPFTable tableOtrosDoc = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					// primera fila
					XWPFTableRow tableOtrosDocRowOne = PoiWordUtil.createTableCell(tableOtrosDoc, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 100, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Ítem", 8, true);
					tableOtrosDocRowOne = PoiWordUtil.createTableCell(tableOtrosDoc, tableOtrosDocRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 2500, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre de documento", 8, true);
					tableOtrosDocRowOne = PoiWordUtil.createTableCell(tableOtrosDoc, tableOtrosDocRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 8000, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
							"Aspectos revisados y que serán materia de verificación", 8, true);

					tableOtrosDocRowOne.setRepeatHeader(true);

					int cant = 0;
					if (listaAntecedenteOtrosDocs.size() == 0) {
						cant++;
						XWPFTableRow tableOtrosDocRow = PoiWordUtil.createTableCell(tableOtrosDoc, null,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 100, cant, 0, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Sin registros", 8, false);
						tableOtrosDocRow = PoiWordUtil.createTableCell(tableOtrosDoc, tableOtrosDocRow,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 2500, cant, 1, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
						tableOtrosDocRow = PoiWordUtil.createTableCell(tableOtrosDoc, tableOtrosDocRow,
								XWPFVertAlign.CENTER, 220, "FFFFFF", 8000, cant, 2, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);

						PoiWordUtil.mergeCellHorizontally(tableOtrosDoc, cant, 0, 2);
					} else {

						for (int k = 0; k < listaAntecedenteOtrosDocs.size(); k++) {
							cant++;
							XWPFTableRow tableOtrosDocRow = PoiWordUtil.createTableCell(tableOtrosDoc, null,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 100, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, String.valueOf(cant), 8,
									false);
							tableOtrosDocRow = PoiWordUtil.createTableCell(tableOtrosDoc, tableOtrosDocRow,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 2500, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									/* listaAntecedenteOtrosDocs.get(k).getNoTipoAntecedente() + " / " */ listaAntecedenteOtrosDocs
											.get(k).getNombreArchivo(),
									8, false);
							tableOtrosDocRow = PoiWordUtil.createTableCell(tableOtrosDoc, tableOtrosDocRow,
									XWPFVertAlign.CENTER, 220, "FFFFFF", 8000, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaAntecedenteOtrosDocs.get(k).getDeAspectosRevisados(), 8, false);
						}

					}
				}
			}
		}

		// tabla de firmantes
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_firmantes")) {
					paragraph.removeRun(j);

					XWPFTable tableFirmantes = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, 9000);

					XWPFTableRow tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, null,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1200, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Documento de identidad¹", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1200, 0, 1, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Cargo", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1900, 0, 2, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Nombre y apellidos", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */3500, 0, 3, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Firma", 8, true);
					tableFirmantesRowOne = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRowOne,
							XWPFVertAlign.CENTER, 200, "D9D9D9", /* TableWidthType.PCT, */1200, 0, 4, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Entidad", 8, true);

					tableFirmantesRowOne.setRepeatHeader(true);

					int cant = 0;
					if (// (listaAgenteSupervisado != null && listaAgenteSupervisado.size() > 0) ||
					(listaSupervisores != null && listaSupervisores.size() > 0)) {
						List<PgimSupervisionDTO> listaFirmantes = new LinkedList<PgimSupervisionDTO>();

						for (PgimSupervisionDTO supervisores : listaSupervisores) {
							supervisores.setDescEntidad(supervisores.getDescNoRazonSocialEmpSupervisora());
							listaFirmantes.add(supervisores);
						}

						for (int k = 0; k < listaFirmantes.size(); k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1200, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescCoDocumentoIdentidad(), 8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1200, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescDeCargo(), 8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1900, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescNoPersona() + " "
											+ listaFirmantes.get(k).getDescApPaterno() + " "
											+ listaFirmantes.get(k).getDescApMaterno(),
									8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.TOP, 1250, "FFFFFF", /* TableWidthType.PCT, */3500, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "«image:osifirma»", 8, false);

							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 1250, "FFFFFF", /* TableWidthType.PCT, */1300, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaFirmantes.get(k).getDescEntidad(), 8, false);
						}
					} else {
						for (int k = 0; k < 5; k++) {
							cant++;
							XWPFTableRow tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, null,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 0, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */3200, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1977, cant, 3, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
							tableFirmantesRow = PoiWordUtil.createTableCell(tableFirmantes, tableFirmantesRow,
									XWPFVertAlign.CENTER, 600, "FFFFFF", /* TableWidthType.PCT, */1411, cant, 4, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, " ", 8, true);
						}
					}
				}
			}
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		documento.write(baos);

		byte[] archivo = baos.toByteArray();

		try {
			archivo = PoiWordUtil.doc2pdf(archivo, idTipoExtensionGen, this.propertiesConfig.getLicenciaAspose());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, "DOC_GEN" + e.getMessage());
		}

		return archivo;

	};

	@Override
	@Transactional(readOnly = false, timeout = 1200)
	public ResponseEntity<ResponseDTO> procesarCopiadoDocumento(PgimDocumentoDTO[] listaPgimDocumentoDTO,
																PgimInstanciaProcesDTO pgimInstanciaProcesDTO, 
																AuditoriaDTO auditoriaDTO) throws Exception {
		ResponseDTO respuesta = null;
		DescargaArchivo descargaArchivo = null;

		InputStream inputStream = null;

		for (PgimDocumentoDTO pgimDocumentoDTO : listaPgimDocumentoDTO) {

			descargaArchivo = this.documentoService.descargaArchivo_old(pgimDocumentoDTO.getIdArchivo().toString());
			inputStream = new ByteArrayInputStream(descargaArchivo.getFile().toByteArray());

			pgimDocumentoDTO.setIdProceso(pgimInstanciaProcesDTO.getIdProceso());

			PgimSubcategoriaDocDTO pgimSubcategoriaDocDTO = subcategoriaDocRepository
					.obtenerSubcategoriaDocPorId(pgimDocumentoDTO.getIdSubcatDocumento());
			if (pgimSubcategoriaDocDTO != null) {
				pgimDocumentoDTO.setDeAsuntoDocumento(pgimSubcategoriaDocDTO.getCoSubcatDocumento() + " - "
						+ pgimSubcategoriaDocDTO.getNoSubcatDocumento());
				pgimDocumentoDTO.setCoTipoDocumentoSiged(pgimSubcategoriaDocDTO.getCoTipoDocumentoSiged());
				pgimDocumentoDTO.setIdTipoOrigenDocumento(pgimSubcategoriaDocDTO.getIdTipoOrigenDocumento());
				pgimDocumentoDTO.setFlNumeradoPorSiged(pgimSubcategoriaDocDTO.getFlNumeradoPorSiged());
			}
			// Obtener correlativo
			Long correlativoArchivo = archivoService.obtenerCorrelativoCodNombre();

			// Obtener el nombre original del archivo
			String noOriginalArchivo = pgimDocumentoDTO.getNombreArchivo();

			// Obtener el nombre codificado del archivo
			String nombreCodificado = archivoService.codificarArchivoPgim(noOriginalArchivo,
					pgimDocumentoDTO.getIdSubcatDocumento(), correlativoArchivo);

			// Cambiando nombre al archivo cargado
			MultipartFile multipartFile = new MockMultipartFile(nombreCodificado, inputStream);// fileDocumento.getInputStream());

			// Obtener la instancia del proceso
			List<PgimInstanciaProcesDTO> lPgimInstanciaProcesDTO = this.instanciaProcesService
					.asegurarInstanciasProceso(
							pgimInstanciaProcesDTO.getIdProceso(), pgimInstanciaProcesDTO.getCoTablaInstancia(),
							auditoriaDTO);

			PgimInstanciaProcesDTO pgimInstanciaProcesDTOActual = lPgimInstanciaProcesDTO.get(0);
			PgimInstanciaProcesDTO pgimInstanciaProcesDTOPadre = lPgimInstanciaProcesDTO.get(1);

			String nuExpedienteSiged = null;
			ExpedienteOutRO expedienteOutRO = null;
			Long idDocumentoSiged = null;
			Long idInstanciaProcesoFinal = pgimInstanciaProcesDTOActual.getIdInstanciaProceso();
			boolean seHaCreadoExpedienteSiged = false;
			PgimPersona pgimPersonaAgenteSupervisado = null;

			if (pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_EVENTO)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_AUTORIZACION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_DENUNCIA)) {

				if (pgimInstanciaProcesDTOPadre.getNuExpedienteSiged() == null) {
					pgimPersonaAgenteSupervisado = this.obtenerPersonaJuridica(pgimInstanciaProcesDTOPadre);

					expedienteOutRO = this.crearExpedienteSiged(pgimPersonaAgenteSupervisado,
							pgimInstanciaProcesDTOActual.getIdProceso(), pgimDocumentoDTO, multipartFile, auditoriaDTO);
					nuExpedienteSiged = expedienteOutRO.getCodigoExpediente();
					pgimInstanciaProcesDTOPadre.setNuExpedienteSiged(nuExpedienteSiged);

					seHaCreadoExpedienteSiged = true;

					// Actualizar el expediente en el registro correspondiente:
					this.instanciaProcesService.persistirExpedienteSiged(pgimInstanciaProcesDTOPadre, auditoriaDTO);
					idDocumentoSiged = Long.parseLong(expedienteOutRO.getIdDocumento());
				} else {
					nuExpedienteSiged = pgimInstanciaProcesDTOPadre.getNuExpedienteSiged();
				}

			} else if (pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_CONTRATO)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_MEDIDA_ADM)) {

				if (pgimInstanciaProcesDTOActual.getNuExpedienteSiged() == null) {
					pgimPersonaAgenteSupervisado = this.obtenerPersonaJuridica(pgimInstanciaProcesDTOActual);

					expedienteOutRO = this.crearExpedienteSiged(pgimPersonaAgenteSupervisado,
							pgimInstanciaProcesDTOActual.getIdProceso(), pgimDocumentoDTO, multipartFile, auditoriaDTO);

					// Si hay un error en el consumo del servicio SIGED para crear el expediente,
					// debe enviar el error
					if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
						throw new PgimException("error", expedienteOutRO.getMessage());
					}

					seHaCreadoExpedienteSiged = true;

					nuExpedienteSiged = expedienteOutRO.getCodigoExpediente();

					pgimInstanciaProcesDTOActual.setNuExpedienteSiged(nuExpedienteSiged);

					// Actualizar el expediente en el registro correspondiente:
					this.instanciaProcesService.persistirExpedienteSiged(pgimInstanciaProcesDTOActual, auditoriaDTO);
					idDocumentoSiged = Long.parseLong(expedienteOutRO.getIdDocumento());
				} else {
					nuExpedienteSiged = pgimInstanciaProcesDTOActual.getNuExpedienteSiged();
				}
			}

			// Ya existe expediente:
			if (idDocumentoSiged == null) {

				// Validación del propietario del expediente
				ExpedienteSiged expedienteSiged = new ExpedienteSiged();
				expedienteSiged.setIdPropietario(Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
				expedienteSiged.setNumeroExpediente(nuExpedienteSiged);

				ExpedienteDocOutRO objResultado = this.validarUsuarioPropietarioExpedienteSiged(expedienteSiged,
						pgimInstanciaProcesDTOActual.getIdProceso(), "Agregar documento", auditoriaDTO);

				if (!objResultado.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
					throw new PgimException("error", objResultado.getMessage());
				}

				// HDT Inicio: Por acuerdo sostenido en reunión del 29.12.2022 con Elinana Nikaido y Carlos Calero, no se copiará el número.

				// DocumentoNuevo docNuevoSiged = new DocumentoNuevo(nuExpedienteSiged, multipartFile.getName(),
				// 		pgimDocumentoDTO.getDeAsuntoDocumento(),
				// 		String.valueOf(pgimDocumentoDTO.getCoTipoDocumentoSiged()),
				// 		pgimDocumentoDTO.getNumeroDocumento(), pgimDocumentoDTO.getFlNumeradoPorSiged(),
				// 		auditoriaDTO.getCoUsuarioSiged());

				DocumentoNuevo docNuevoSiged = new DocumentoNuevo(nuExpedienteSiged, multipartFile.getName(),
						pgimDocumentoDTO.getDeAsuntoDocumento(),
						String.valueOf(pgimDocumentoDTO.getCoTipoDocumentoSiged()),
						"", pgimDocumentoDTO.getFlNumeradoPorSiged(),
						auditoriaDTO.getCoUsuarioSiged());
				// HDT Fin.

				// Registrar documento Siged (WS)
				DocumentoOutRO documentoOutRO = this.agregarDocumentoSiged_old(docNuevoSiged, multipartFile);

				// Si hay un error en el consumo del servicio SIGED, debe enviar el error
				if (!documentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
					throw new PgimException("error", documentoOutRO.getMessage());
				}

				idDocumentoSiged = new Long(documentoOutRO.getCodigoDocumento());

			}

			if (nuExpedienteSiged == null) {
				String mensajeError = "No se ha definido un expediente Siged";
				throw new PgimException("error", mensajeError);
			}

			// Registrar documento PGIM
			pgimDocumentoDTO.setIdFaseProceso(pgimInstanciaProcesDTO.getDescIdFaseActualPas());
			pgimDocumentoDTO.setCoDocumentoSiged(idDocumentoSiged);
			pgimDocumentoDTO.setSeDocumento(correlativoArchivo);
			pgimDocumentoDTO.setIdInstanciaProceso(idInstanciaProcesoFinal);
			
			if (seHaCreadoExpedienteSiged) {
				pgimDocumentoDTO.setDescFlExpedienteCreado(1);
			}

			Long idDocumento = this.registrarDocumento(pgimDocumentoDTO, auditoriaDTO);
			pgimDocumentoDTO.setIdDocumento(idDocumento);

			// Registrar archivo PGIM (Log)
			PgimArchivoDTO archivoDTO = new PgimArchivoDTO();
			archivoDTO.setIdDocumento(idDocumento);
			archivoDTO.setNoOriginalArchivo(noOriginalArchivo);
			archivoDTO.setNoNuevoArchivo(nombreCodificado);
			archivoDTO.setSeArchivo(correlativoArchivo);

			this.archivoService.registrarArchivo(archivoDTO, auditoriaDTO);

			PgimInstanciaProces pgimInstanciaProcesActual = this.instanciaProcesRepository
					.findById(pgimInstanciaProcesDTOActual.getIdInstanciaProceso()).orElse(null);

			this.instanciaProcesService.actualizarInstProcTablaInstancia(pgimInstanciaProcesActual, auditoriaDTO);

			if (pgimDocumentoDTO.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {
				this.supervisionService.procesarAccionesAdicionales(pgimDocumentoDTO, idDocumento, auditoriaDTO);

				PgimSubcategoriaDoc pgimSubcategoriaDoc = categoriaDocService
						.obtenerSubcategoria(pgimDocumentoDTO.getIdSubcatDocumento());

				if (pgimSubcategoriaDoc.getPgimCategoriaDoc()
						.getIdCategoriaDocumento() == ConstantesUtil.PARAM_CATEGORIA_DOC_ANTECEDENTE) {

					Long idTipoAntecedente = antecedenteSupervRepository
							.tipoAntecedente(pgimDocumentoDTO.getIdSubcatDocumento());

					PgimAntecedenteSupervDTO pgimAntecedenteSupervDTO = new PgimAntecedenteSupervDTO();
					pgimAntecedenteSupervDTO.setIdDocumento(idDocumento);
					pgimAntecedenteSupervDTO.setIdSupervision(pgimInstanciaProcesDTOActual.getCoTablaInstancia());
					pgimAntecedenteSupervDTO.setIdTipoAntecedente(idTipoAntecedente);
					pgimAntecedenteSupervDTO.setIdTipoSupervision(pgimDocumentoDTO.getDescIdTipoSupervision());
					pgimAntecedenteSupervDTO
							.setFeInicioSupervisionReal(pgimDocumentoDTO.getDescFeInicioSupervisionReal());
					pgimAntecedenteSupervDTO.setFeFinSupervisionReal(pgimDocumentoDTO.getDescFeFinSupervisionReal());
					pgimAntecedenteSupervDTO.setNuExpedienteSiged(pgimDocumentoDTO.getDescNuExpedienteSiged());

					this.antecedenteSupervService.crearAntecedente(pgimAntecedenteSupervDTO, auditoriaDTO);

				}
			}
		}

		respuesta = new ResponseDTO("success", "El(Los) documento(s) ha(n) sido registrado(s)");
		return ResponseEntity.status(HttpStatus.CREATED).body(respuesta);
	}

	@Override
	public PgimPersonaDTO obtenerPersonaAgenteFiscalizado(Long idDocumento) throws Exception {
		
		PgimDocumento pgimDocumento = this.documentoRepository.findById(idDocumento).orElse(null);
		PgimInstanciaProces pgimInstanciaProces = this.instanciaProcesRepository
				.findById(pgimDocumento.getPgimInstanciaProces().getIdInstanciaProceso()).orElse(null);

		Long idProceso = pgimInstanciaProces.getPgimProceso().getIdProceso();
		PgimPersona pgimPersonaDestino = null;

		if (idProceso.equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)) {
			PgimPas pgimPas = this.pasRepository.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);
			PgimSupervision pgimSupervision = this.supervisionRepository
					.findById(pgimPas.getPgimSupervision().getIdSupervision()).orElse(null);
			PgimUnidadMinera pgimUnidadMinera = this.unidadMineraRepository
					.findById(pgimSupervision.getPgimUnidadMinera().getIdUnidadMinera()).orElse(null);
			PgimAgenteSupervisado pgimAgenteSupervisado = this.agenteSupervisadoRepository
					.findById(pgimUnidadMinera.getPgimAgenteSupervisado().getIdAgenteSupervisado()).orElse(null);
			pgimPersonaDestino = this.personaRepository.findById(pgimAgenteSupervisado.getPgimPersona().getIdPersona())
					.orElse(null);
		} else if (idProceso.equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)) {
			PgimSupervision pgimSupervision = this.supervisionRepository
					.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);
			PgimUnidadMinera pgimUnidadMinera = this.unidadMineraRepository
					.findById(pgimSupervision.getPgimUnidadMinera().getIdUnidadMinera()).orElse(null);
			PgimAgenteSupervisado pgimAgenteSupervisado = this.agenteSupervisadoRepository
					.findById(pgimUnidadMinera.getPgimAgenteSupervisado().getIdAgenteSupervisado()).orElse(null);
			pgimPersonaDestino = this.personaRepository.findById(pgimAgenteSupervisado.getPgimPersona().getIdPersona())
					.orElse(null);
		} else {
			throw new PgimException(TipoResultado.ERROR,
					"Aún no se ha implementado notificaciones para el id de proceso: " + idProceso);
		}

		PgimPersonaDTO pgimPersonaDTO = this.personaRepository
				.obtenerPersonaJuridicaPorId(pgimPersonaDestino.getIdPersona());

		return pgimPersonaDTO;
	}

	@Override
	public List<PgimSubcategoriaDocDTO> listarSubcategoriasFirmadasPorFiscalizador(Long idInstanciaProceso) {

		PgimInstanciaProces pgimInstanciaProcess = this.instanciaProcesRepository.findById(idInstanciaProceso)
				.orElse(null);

		PgimSupervision pgimSupervision = this.supervisionRepository
				.findById(pgimInstanciaProcess.getCoTablaInstancia()).orElse(null);
		PgimPrgrmSupervision pgimPrgrmSupervision = this.prgrmSupervisionRepository
				.findById(pgimSupervision.getPgimPrgrmSupervision().getIdProgramaSupervision()).orElse(null);

		return this.subcategoriaDocRepository.listarSubcategoriasFirmadasPorFiscalizador(
				pgimPrgrmSupervision.getPgimEspecialidad().getIdEspecialidad());
	}


	@Override
	@Transactional(readOnly = false)
	public String generarNumeroDocFormateado(PgimDocumentoDTO pgimDocumentoDTONumerar,
			PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) throws Exception {

		String numeroDocFormateado = null;
        Boolean enumerarDocCompuesto = false;
        String prefijo = "";
        PgimContratoDTO pgimContratoDTO = null;

		if(pgimDocumentoDTONumerar.getIdSubcatDocumento().equals(ConstantesUtil.PARAM_SC_INFORME_SUPERVISION)){
            prefijo = "IF";
            pgimContratoDTO = this.contratoRepository.obtenerContratoPorIdSupervision(pgimInstanciaProcesDTO.getCoTablaInstancia());
            enumerarDocCompuesto = true;

        }else if(pgimDocumentoDTONumerar.getIdSubcatDocumento().equals(ConstantesUtil.PARAM_SC_INFORME_GESTION)){
            prefijo = "IG";
            pgimContratoDTO = this.contratoRepository.obtenerContratoPorIdLiquidacion(pgimInstanciaProcesDTO.getCoTablaInstancia());
            enumerarDocCompuesto = true;

        }else if(pgimDocumentoDTONumerar.getIdSubcatDocumento().equals(ConstantesUtil.PARAM_SUBCAT_DOC_OIS)) {
        	PgimInstanciaSeDoc pgimInstanciaSeDoc = this.procesarCorrelativoNumDocumento(pgimDocumentoDTONumerar, pgimInstanciaProcesDTO, null, auditoriaDTO);
        	Long correlativoNuevo = pgimInstanciaSeDoc.getSeCorrelativo();
        	numeroDocFormateado = "OBS_IS-" + pgimInstanciaProcesDTO.getCoTablaInstancia() + "-" + correlativoNuevo.toString();

        }

        if(enumerarDocCompuesto) {

    		// En el marco de la instancia hijo (fiscalización ó liquidación)
        	PgimInstanciaSeDoc pgimInstancSeDocVersion = this.procesarCorrelativoNumDocumento(pgimDocumentoDTONumerar, pgimInstanciaProcesDTO, null, auditoriaDTO);
    		
        	// En el marco de la instancia padre (contrato)
    		Long correlNivelContrato = null;

    		if(pgimInstancSeDocVersion.getSeCorrelativo() > 1L) {    			
    			correlNivelContrato = pgimInstancSeDocVersion.getSeCorrelativoInstancPadre();    			
    		}

    		if(correlNivelContrato == null) {
    			PgimInstanciaProcesDTO pgimInstanciaProcesDTOContrato = new PgimInstanciaProcesDTO();
    			pgimInstanciaProcesDTOContrato.setIdInstanciaProceso(pgimContratoDTO.getIdInstanciaProceso());

    			PgimInstanciaSeDoc pgimInstanciaSeDocDTOCont = this.procesarCorrelativoNumDocumento(pgimDocumentoDTONumerar, pgimInstanciaProcesDTOContrato, pgimInstancSeDocVersion, auditoriaDTO);
    			correlNivelContrato = pgimInstanciaSeDocDTOCont.getSeCorrelativo();
    		}

    		// Formato: <Prefijo>-<Correlativo>.<Versión>-<N°Contrato>
    		numeroDocFormateado = prefijo + "-"
    								+ CommonsUtil.fillWithZero(correlNivelContrato.toString(), 3, "L")
    								+ "." + pgimInstancSeDocVersion.getSeCorrelativo().toString()
    								+ "-" + pgimContratoDTO.getNuContrato();
        }
        
        return numeroDocFormateado;
    }
	
	/**
	 * Permite crear o actualizar un correlativo para la numeración propia de determinado documento,
     * en el marco de una intancia de proceso.
     * Retorna el nuevo correlativo para usarlo como parte del número formateado.
     *
	 * @param pgimDocumentoDTO
	 * @param pgimInstanciaProcesDTO
	 * @param pgimInstanciaSeDocHijo
	 * @param auditoriaDTO
	 */
	@Transactional(readOnly = false)
	public PgimInstanciaSeDoc procesarCorrelativoNumDocumento(PgimDocumentoDTO pgimDocumentoDTO, PgimInstanciaProcesDTO pgimInstanciaProcesDTO,
			PgimInstanciaSeDoc pgimInstanciaSeDocHijo, AuditoriaDTO auditoriaDTO) throws Exception {

		if(pgimInstanciaProcesDTO.getIdInstanciaProceso() == null) {
			// Obtener la instancia del proceso
			List<PgimInstanciaProcesDTO> lPgimInstanciaProcesDTO = this.instanciaProcesService.asegurarInstanciasProceso(
					pgimInstanciaProcesDTO.getIdProceso(), pgimInstanciaProcesDTO.getCoTablaInstancia(), auditoriaDTO);

			pgimInstanciaProcesDTO = lPgimInstanciaProcesDTO.get(0);
		}

		PgimInstanciaSeDocDTO pgimInstanciaSeDocDTOActual = this.instanciaSeDocRepository.obtenerSeCorrelativoPorInstanciaYSubcat(
				pgimInstanciaProcesDTO.getIdInstanciaProceso(), pgimDocumentoDTO.getIdSubcatDocumento());

		Long ultimoCorrelativo = (pgimInstanciaSeDocDTOActual == null) ? null : pgimInstanciaSeDocDTOActual.getSeCorrelativo();

		PgimInstanciaSeDoc pgimInstanciaSeDoc = null;

		if(ultimoCorrelativo == null) { // 1° porque al nivel de contrato habrán algunos (los antiguos) que no tienen su registro
			// Crear SE
			ultimoCorrelativo = 1L;

			pgimInstanciaSeDoc = new PgimInstanciaSeDoc();

			PgimInstanciaProces pgimInstanciaProces = new PgimInstanciaProces();
			pgimInstanciaProces.setIdInstanciaProceso(pgimInstanciaProcesDTO.getIdInstanciaProceso());
			pgimInstanciaSeDoc.setPgimInstanciaProces(pgimInstanciaProces);

			PgimSubcategoriaDoc subcategoriaDoc = new PgimSubcategoriaDoc();
			subcategoriaDoc.setIdSubcatDocumento(pgimDocumentoDTO.getIdSubcatDocumento());
			pgimInstanciaSeDoc.setPgimSubcategoriaDoc(subcategoriaDoc);

			pgimInstanciaSeDoc.setEsRegistro(ConstantesUtil.IND_ACTIVO);
			pgimInstanciaSeDoc.setFeCreacion(auditoriaDTO.getFecha());
			pgimInstanciaSeDoc.setUsCreacion(auditoriaDTO.getUsername());
			pgimInstanciaSeDoc.setIpCreacion(auditoriaDTO.getTerminal());

		}else {
			// Actualizar SE
			ultimoCorrelativo = ultimoCorrelativo + 1L;

			pgimInstanciaSeDoc = this.instanciaSeDocRepository.findById(pgimInstanciaSeDocDTOActual.getIdInstanciaSeDoc()).orElse(null);

			pgimInstanciaSeDoc.setFeActualizacion(auditoriaDTO.getFecha());
			pgimInstanciaSeDoc.setUsActualizacion(auditoriaDTO.getUsername());
			pgimInstanciaSeDoc.setIpActualizacion(auditoriaDTO.getTerminal());						
		}

		pgimInstanciaSeDoc.setSeCorrelativo(ultimoCorrelativo);
		PgimInstanciaSeDoc pgimInstanciaSeDocCU = this.instanciaSeDocRepository.save(pgimInstanciaSeDoc);
		
		// Actualizamos el correlativo padre (contrato) en el registro del correlativo de la instancia hijo (fiscalización ó liquidación)
		if(pgimInstanciaSeDocHijo != null) {
			pgimInstanciaSeDocHijo.setSeCorrelativoInstancPadre(ultimoCorrelativo); 			
			pgimInstanciaSeDocHijo.setFeActualizacion(auditoriaDTO.getFecha());
			pgimInstanciaSeDocHijo.setUsActualizacion(auditoriaDTO.getUsername());
			pgimInstanciaSeDocHijo.setIpActualizacion(auditoriaDTO.getTerminal());
			
			this.instanciaSeDocRepository.save(pgimInstanciaSeDocHijo);			
		}

		return pgimInstanciaSeDocCU;
	}


	@Override
	@Transactional(readOnly = false)
    public void enumerarDocumentoSigedEnFlujo(PgimInstanciaProces pgimInstanciaProces,
            PgimInstanciaPaso pgimInstanciaPaso, AuditoriaDTO auditoriaDTO) throws Exception {

        Long idRelacionPaso = pgimInstanciaPaso.getPgimRelacionPaso().getIdRelacionPaso();
        Long idSubcategoriaDoc = null;
        Boolean enumerarDoc = false;

        if (idRelacionPaso.equals(ConstantesUtil.PARAM_RELACION_ELABORAR_INFOR_ELAB_MCAF_OCAF)) {
            idSubcategoriaDoc = ConstantesUtil.PARAM_SC_INFORME_SUPERVISION_PROPIA; // Informe de fiscalización propia
            enumerarDoc = true;
        }

        if(enumerarDoc) {
        	// Enumerar último documento de determinada subcategoría de la instancia

        	List<PgimDocumentoDTO> lPgimDocumentoDTO = this.documentoRepository.listarDocPorInstanciaYSubCategoria(
        			pgimInstanciaProces.getIdInstanciaProceso(), idSubcategoriaDoc);

        	if(lPgimDocumentoDTO.size() > 0) {
        		// tomamos el primer item ya que está ordenado descendentemente
        		PgimDocumentoDTO pgimDocumentoDTO = lPgimDocumentoDTO.get(0);

						Documentos documentosYArchivosSiged = new Documentos();

						// Llamar al servicio Siged para completar datos de los documentos
						documentosYArchivosSiged = this.obtenerExpedienteDocumentoSiged(pgimInstanciaProces.getNuExpedienteSiged(), "0", auditoriaDTO);

						if (documentosYArchivosSiged.getListaDocumento() != null
								|| documentosYArchivosSiged.getListaDocumento().size() != 0) {

							for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {

								if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {

									if(docSiged.getNroDocumento().equalsIgnoreCase(".s/n")){
										this.enumeraDocumentoSiged(pgimDocumentoDTO.getCoDocumentoSiged(), auditoriaDTO);
									}

									break;
								}
							}

						}

        	}
        }

    }

	@Override
	@Transactional(readOnly = false)
	public void archivarExpedienteEnFlujo(PgimInstanciaProces pgimInstanciaProces,
            PgimInstanciaPaso pgimInstanciaPaso, AuditoriaDTO auditoriaDTO) throws Exception {

        Long idRelacionPaso = pgimInstanciaPaso.getPgimRelacionPaso().getIdRelacionPaso();
        Boolean archivarExp = false;
        String mensaje = "";
        Boolean archivarPasRelacionado = false;
        String metodoExcepcion = "";

        if (idRelacionPaso.equals(ConstantesUtil.PARAM_RP_COMPLETAR_FISC_ARCH__FISC_ARCHIVADA)) {
        	archivarExp = true;
        	mensaje = "Expediente archivado debido a que se finalizó transitando desde 'Completar fiscalización archivándola' hacia 'Fiscalización archivada'";
        	archivarPasRelacionado = true;
        	metodoExcepcion = ConstantesUtil.METODO_ARCHIVAR_EXP_SIGED;

        }else if(idRelacionPaso.equals(ConstantesUtil.PARAM_RP_FISC_COMPL_INICIO_PAS__FISC_COMPLETADA_PAS)) {
        	archivarExp = true;
        	mensaje = "Expediente archivado debido a que se finalizó transitando desde 'Fiscalización completada con inicio de PAS' hacia 'Fiscalización completada con PAS'";
        	metodoExcepcion = ConstantesUtil.METODO_ARCHIVAR_FISC_RELACIONADO;        			
        }

        if (archivarExp) {

        	// Archivamos el expediente Siged de la fiscalización

    		try {

    			Expediente expediente = new Expediente();
    			expediente.setNroExpediente(pgimInstanciaProces.getNuExpedienteSiged());
    			expediente.setObservacionArchivar(mensaje);

    			ExpedienteOutRO expedienteOutRO = this.archivarExpedienteSiged_old(expediente, auditoriaDTO);

    			if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
					final String msjExcepcionControlada = String.format(
							"Ha ocurrido un problema al archivar el expediente Siged N° %s (Error: %s, Descripción: %s)",
							expediente.getNroExpediente(), expedienteOutRO.getErrorCode(), expedienteOutRO.getMessage());
					
					DetalleExcepcionDTO detalleExcepcionDTO = this.flujoTrabajoService.obtenerDetalleExcepcion(pgimInstanciaProces, expedienteOutRO.getDetalleExcepcionDTO(), 
							metodoExcepcion, "", null);
					
					throw new PgimException(TipoResultado.ERROR, msjExcepcionControlada, detalleExcepcionDTO);
				}

    		} catch (final PgimException e) {
				log.error(e.getMessage(), e);
				throw e;

			} catch (final Exception e) {
				final String msjExcepcionNoControlada = String.format(
						"Ha ocurrido un problema al archivar el expediente Siged de la fiscalización (Error: %s)", e.getMessage());
				log.error(e.getMessage(), e);
				throw new PgimException(TipoResultado.ERROR, msjExcepcionNoControlada);
			}

    		// Archivamos el expediente Siged del PAS relacionado, de corresponder

    		if(archivarPasRelacionado) {

	    		try {

    				PgimPasDTO pgimPasDTO = this.pasRepository.obtenerPasPorIdSupervision(pgimInstanciaProces.getCoTablaInstancia());

    				if(pgimPasDTO != null && pgimPasDTO.getDescNuExpedienteSiged() != null) {

	    				Expediente expedientePas = new Expediente();
	        			expedientePas.setNroExpediente(pgimPasDTO.getDescNuExpedienteSiged());
	        			expedientePas.setObservacionArchivar(mensaje);

	        			ExpedienteOutRO expedienteOutROPas = this.archivarExpedienteSiged_old(expedientePas, auditoriaDTO);

	        			if (!expedienteOutROPas.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
	    					final String msjExcepcionControlada = String.format(
	    							"Ha ocurrido un problema al archivar el expediente Siged N° %s, del PAS relacionado (Error: %s, Descripción: %s)",
	    							expedientePas.getNroExpediente(), expedienteOutROPas.getErrorCode(), expedienteOutROPas.getMessage());
	    					
	    					PgimInstanciaProces pgimInstanciaProcesPas = this.instanciaProcesService.obtenerInstanciaProceso(pgimPasDTO.getIdInstanciaProceso());
	    					
	    					DetalleExcepcionDTO detalleExcepcionDTO = this.flujoTrabajoService.obtenerDetalleExcepcion(pgimInstanciaProcesPas, expedienteOutROPas.getDetalleExcepcionDTO(), 
	    							ConstantesUtil.METODO_ARCHIVAR_PAS_RELACIONADO, "", null);
	    					
	    					throw new PgimException(TipoResultado.ERROR, msjExcepcionControlada, detalleExcepcionDTO);
	    				}
    				}

	    		} catch (final PgimException e) {
					log.error(e.getMessage(), e);
					// En caso de fallar el archivado del expediente PAS relacionado, Reabrimos el expediente de la fiscalización
					this.procesarReabrirExpedienteSiged(pgimInstanciaProces.getNuExpedienteSiged(), pgimInstanciaProces, auditoriaDTO);

					throw e;

				} catch (final Exception e) {
					final String msjExcepcionNoControlada = String.format(
							"Ha ocurrido un problema al archivar el expediente Siged del PAS relacionado (Error: %s)", e.getMessage());
					log.error(e.getMessage(), e);
					// En caso de fallar el archivado del expediente PAS relacionado, Reabrimos el expediente de la fiscalización
					this.procesarReabrirExpedienteSiged(pgimInstanciaProces.getNuExpedienteSiged(), pgimInstanciaProces,  auditoriaDTO);

					throw new PgimException(TipoResultado.ERROR, msjExcepcionNoControlada);
				}
    		}

        }
    }

	@Transactional(readOnly = false)
    public void procesarReabrirExpedienteSiged(String nroExpediente, PgimInstanciaProces pgimInstanciaProces,
    		AuditoriaDTO auditoriaDTO) throws Exception {

		try {

			ExpedienteOutRO expedienteOutRO = this.reabrirExpedienteSiged_old(nroExpediente, auditoriaDTO);

			if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
				final String msjExcepcionControlada = String.format(
						"Ha ocurrido un problema al reabrir el expediente Siged N° %s (Error: %s, Descripción: %s)",
						nroExpediente, expedienteOutRO.getErrorCode(), expedienteOutRO.getMessage());
				
				DetalleExcepcionDTO detalleExcepcionDTO = this.flujoTrabajoService.obtenerDetalleExcepcion(pgimInstanciaProces, expedienteOutRO.getDetalleExcepcionDTO(), 
						ConstantesUtil.METODO_REABRIR_EXP_SIGED, "", null);
				
				throw new PgimException(TipoResultado.ERROR, msjExcepcionControlada, detalleExcepcionDTO);
			}

		} catch (final PgimException e) {
			log.error(e.getMessage(), e);
			throw e;

		} catch (final Exception e) {
			final String msjExcepcionNoControlada = String.format(
					"Ha ocurrido un problema al reabrir el expediente Siged (Error: %s)", e.getMessage());
			log.error(e.getMessage(), e);
			throw new PgimException(TipoResultado.ERROR, msjExcepcionNoControlada);
		}

    }

	public String validarCantidadDocumentosPermitidos(PgimDocumentoDTO pgimDocumentoDTO, PgimInstanciaProcesDTO pgimInstanciaProcesDTO,
			AuditoriaDTO auditoriaDTO) throws Exception {

		String sValidacion = null;

		Integer cantDocsCargados = 0;

		PgimInstanciaPasoDTO pgimInstanciaPasoDTOActual = this.flujoTrabajoService
                .obtenerInstanciaPasoActualPorIdInstanciaPaso(pgimDocumentoDTO.getDescIdInstanciaPasoActual());
		
		PgimPasoSubcatDTO pgimPasoSubcatDTO = this.pasoSubcatRepository.obtenerConfigPasoSubcat(pgimDocumentoDTO.getIdSubcatDocumento(), 
				pgimInstanciaPasoDTOActual.getIdPasoProcesoDestino());

		Integer cantDocsPermitidos = pgimPasoSubcatDTO != null ? pgimPasoSubcatDTO.getCaDocsAdjuntar() : null;

		if(pgimPasoSubcatDTO != null && cantDocsPermitidos != null) {

			String nuExpedienteSiged = pgimInstanciaProcesDTO.getNuExpedienteSiged();

			List<PgimDocumentoDTO> lPgimDocumentoDTO = this.documentoRepository.listarDocPorInstanciaYSubcatYFase(pgimInstanciaProcesDTO.getIdInstanciaProceso(),
					pgimDocumentoDTO.getIdSubcatDocumento(), pgimDocumentoDTO.getIdFaseProceso());

			if (nuExpedienteSiged != null && !nuExpedienteSiged.equals("")) {

				Documentos documentosSiged = new Documentos();

				// Llamar a la lista de documentos Siged
				documentosSiged = this.obtenerExpedienteDocumentoSiged(nuExpedienteSiged, "0", auditoriaDTO);

				if (documentosSiged.getListaDocumento() != null	&& documentosSiged.getListaDocumento().size() > 0) {

					Integer contador = 0;

					// Iterando la lista de documentos PGIM en busca de los documentos Siged.
					for (PgimDocumentoDTO pgimDocumentoDTOItem : lPgimDocumentoDTO) {

						if (pgimDocumentoDTOItem.getCoDocumentoSiged() == null ||
							(pgimPasoSubcatDTO.getFlValidaSoloNuevos().equals(ConstantesUtil.FL_IND_SI) && pgimDocumentoDTOItem.getFeEnvioDocumento() != null)){
								continue; //ignora los enviados, si el flag lo indica
						}

						for (Documento docSiged : documentosSiged.getListaDocumento()) {

							if (pgimDocumentoDTOItem.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {
								contador++;
								break;
							}
						}
					}

					cantDocsCargados = contador;
				}

			} else {
				// Si no hay expediente, no hay documentos cargados
				cantDocsCargados = 0;
			}

			if ((cantDocsCargados+1) > cantDocsPermitidos) {
				sValidacion = String.format("No se puede adjuntar un documento adicional de esta subcategoría, la cantidad máxima permitida es %d. "
						+ "Por favor, elimine los documentos innecesarios y vuelva a intentarlo", cantDocsPermitidos);
			}
		}

		return sValidacion;
	}

	/**
	 * Crea un párrafo con un texto y un campo de número de página.
	 *
	 * @param documento El documento con el que estás trabajando.
	 * @param fechaDeGeneracion La fecha en que se generó el documento.
	 * @param espacioAdicional Este es el espacio que quiero agregar al pie de página.
	 * @param orientacion "VERTICALES" u "HORIZONTALES"
	 */
	@Override
	public void getPieDePagina(XWPFDocument documento, String fechaDeGeneracion, Integer espacioAdicional, String orientacion) throws IOException, XmlException{

		CTP ctp = CTP.Factory.newInstance();

		XWPFParagraph codePara = new XWPFParagraph(ctp, documento);
		XWPFParagraph[] XWPF_Paragraph = new XWPFParagraph[1];
		XWPF_Paragraph[0] = codePara;

		String fechGenr = "Generado por la PGIM el: " + fechaDeGeneracion;
		String separador="";

		if(orientacion == "VERTICAL"){
			separador = CommonsUtil.repetir(150, ConstantesUtil.TEXT_BLANK_DOC);
		}else if(orientacion == "HORIZONTAL"){
			separador = CommonsUtil.repetir(306, ConstantesUtil.TEXT_BLANK_DOC);
		}

		XWPFRun fechRun = codePara.createRun();
		fechRun.setBold(true);
		fechRun.setText(fechGenr + separador + CommonsUtil.repetir(espacioAdicional, ConstantesUtil.TEXT_BLANK_DOC));
		fechRun.setFontSize(7);
		fechRun.setItalic(true);
		fechRun.setColor("989898");
		fechRun = PoiWordUtil.createRunFldCharTypeBegin(codePara);

		XWPFRun run2 = codePara.createRun();
		run2 = codePara.createRun();

		run2.setText("Página ");
		run2.setFontSize(8);
		run2.setColor("2E2E2E");
		run2 = PoiWordUtil.createRunFldCharTypeBegin(codePara);

		run2 = PoiWordUtil.createRunInstrText(codePara, "PAGE \\* MERGEFORMAT");
		run2.setFontSize(8);
		run2.setColor("2E2E2E");
		run2 = PoiWordUtil.createRunFldCharTypeEnd(codePara);

		// run2 = codePara.createRun();
		run2.setText(" de ");
		run2.setFontSize(8);
		run2.setColor("2E2E2E");
		run2 = PoiWordUtil.createRunFldCharTypeBegin(codePara);

		run2 = PoiWordUtil.createRunInstrText(codePara, "NUMPAGES \\* MERGEFORMAT");
		run2.setFontSize(8);
		run2.setColor("2E2E2E");
		run2 = PoiWordUtil.createRunFldCharTypeEnd(codePara);

		codePara.setSpacingAfter(0);

		CTSectPr sectPr = documento.getDocument().getBody().addNewSectPr();

		XWPFHeaderFooterPolicy headerFooterPolicy = new XWPFHeaderFooterPolicy(documento, sectPr);
		headerFooterPolicy.createFooter(STHdrFtr.DEFAULT, XWPF_Paragraph);
	}

	/**
	 * Esta función crea un pie de página con un texto alineado a la izquierda y otro alineado a la
	 * derecha. El texto alineado a la izquierda es la fecha de generación del documento y el texto
	 * alineado a la derecha es el número de página y el número total de páginas
	 *
	 * @param documento el documento al que desea agregar el pie de página
	 * @param fechaDeGeneracion La fecha en que se generó el documento.
	 * @param orientacion "retrato" o "paisaje"
	 * @param alignBottom La distancia desde la parte inferior de la página hasta la parte inferior del
	 * pie de página.
	 * @param separador Esta es la distancia entre los márgenes izquierdo y derecho.
	 */
	@Override
	public void getFooterAlignBottomDocs(XWPFDocument documento, String fechaDeGeneracion, String orientacion, Integer alignBottom, Integer separador) throws IOException, XmlException{

		String fechGenr = "Generado por la PGIM el: " + fechaDeGeneracion;

		CTSectPr sectPr = documento.getDocument().getBody().addNewSectPr();
		// XWPFHeaderFooterPolicy headerFooterPolicy = new XWPFHeaderFooterPolicy(documento, sectPr);
		// XWPFFooter footer = headerFooterPolicy.createFooter(STHdrFtr.DEFAULT);

		// XWPFFooter footer = documento.createFooter(HeaderFooterType.DEFAULT);

		// XWPFHeaderFooterPolicy headerFooterPolicy = documento.getHeaderFooterPolicy();
		// if (headerFooterPolicy == null)
		// 		headerFooterPolicy = documento.createHeaderFooterPolicy();

		// XWPFHeaderFooter footer = headerFooterPolicy.createFooter(XWPFHeaderFooterPolicy.DEFAULT);
		XWPFFooter footer = documento.createFooter(HeaderFooterType.DEFAULT);

		XWPFParagraph paragraphFooter = footer.getParagraphArray(0);

		if(paragraphFooter == null){
			paragraphFooter = footer.createParagraph();
		}

		XWPFRun runFooter = paragraphFooter.createRun();

		XmlCursor cursor = paragraphFooter.getCTP().newCursor();

		XWPFTable tableFooter = footer.insertNewTbl(cursor);

		// fila
		XWPFTableRow rowOne = tableFooter.getRow(0);
		if (rowOne == null)
			rowOne = tableFooter.createRow();

		XWPFTableCell cell = rowOne.getCell(0);
		if (cell == null)
			cell = rowOne.createCell();

		// CTTc ctTc = cell.getCTTc();
		// CTTcPr tcPr = ctTc.addNewTcPr();
		// CTHMerge hMerge = tcPr.addNewHMerge();
		// hMerge.setVal(STMerge.RESTART);

		// CTTcBorders tblBorders = tcPr.addNewTcBorders();

		// Para eliminar todos los bordes de la tabla:
		// tblBorders.addNewBottom().setVal(STBorder.NONE);
		// tblBorders.addNewLeft().setVal(STBorder.NONE);
		// tblBorders.addNewRight().setVal(STBorder.NONE);
		// tblBorders.addNewTop().setVal(STBorder.NONE);
		//also inner borders
		// tblBorders.addNewInsideH().setVal(STBorder.NONE);
		// tblBorders.addNewInsideV().setVal(STBorder.NONE);
		// cell.getCTTc().getTcPr().getTcBorders().addNewLeft().setVal(STBorder.NIL);
		// cell.getCTTc().getTcPr().getTcBorders().addNewRight().setVal(STBorder.NIL);
		// cell.getCTTc().getTcPr().getTcBorders().addNewTop().setVal(STBorder.NIL);
		// cell.getCTTc().getTcPr().getTcBorders().addNewBottom().setVal(STBorder.NIL);

		// Ajusta el alineamiento en la posición inferior del documento pie de página
		// alignBottom =1;
		CTPageMar pageMar = sectPr.getPgMar();
		if (pageMar == null)
			pageMar = sectPr.addNewPgMar();
		pageMar.setBottom(BigInteger.valueOf(0));
		pageMar.setFooter(BigInteger.valueOf(alignBottom)); // 28.4 pt * 20 = 568 = 28.4 pt footer from bottom

		cell.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(separador)); // 13000 8800
		paragraphFooter = cell.getParagraphs().get(0);
		paragraphFooter.setAlignment(ParagraphAlignment.LEFT);
		runFooter = paragraphFooter.createRun();
		runFooter.setText(fechGenr);
		runFooter.setFontSize(7);
		runFooter.setItalic(true);
		runFooter.setColor("989898");
		runFooter.setFontFamily("Arial");
		runFooter.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		paragraphFooter.setSpacingAfter(0);

		XWPFTableCell cell01 = rowOne.getCell(1);
		if (cell01 == null)
			cell01 = rowOne.createCell();
		cell01.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(3500));
		paragraphFooter = cell01.getParagraphs().get(0);
		paragraphFooter.setAlignment(ParagraphAlignment.RIGHT);

		runFooter = paragraphFooter.createRun();

		runFooter.setText("Página ");
		runFooter.setFontSize(8);
		runFooter.setColor("2E2E2E");
		runFooter.setFontFamily("Arial");
		runFooter.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		runFooter = PoiWordUtil.createRunFldCharTypeBegin(paragraphFooter);

		runFooter = PoiWordUtil.createRunInstrText(paragraphFooter, "PAGE \\* MERGEFORMAT");
		runFooter.setFontSize(8);
		runFooter.setColor("2E2E2E");
		runFooter.setFontFamily("Arial");
		runFooter.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		runFooter = PoiWordUtil.createRunFldCharTypeEnd(paragraphFooter);

		runFooter = paragraphFooter.createRun();

		runFooter.setText(" de ");
		runFooter.setFontSize(8);
		runFooter.setColor("2E2E2E");
		runFooter.setFontFamily("Arial");
		runFooter.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		runFooter = PoiWordUtil.createRunFldCharTypeBegin(paragraphFooter);

		runFooter = PoiWordUtil.createRunInstrText(paragraphFooter, "NUMPAGES \\* MERGEFORMAT");
		runFooter.setFontSize(8);
		runFooter.setColor("2E2E2E");
		runFooter.setFontFamily("Arial");
		runFooter.getCTR().getRPr().getRFontsArray(0).setHAnsi("Arial");
		runFooter = PoiWordUtil.createRunFldCharTypeEnd(paragraphFooter);

	}

	@Override
	public Page<PgimIndicadorGeotecnicoAuxDTO> listarIndicadorGeotecnico(PgimIndicadorGeotecnicoAuxDTO filtroIndicadorGeotecnicoAuxDTO, Pageable paginador) throws Exception {
		Page<PgimIndicadorGeotecnicoAuxDTO> lPgimIndicadorGeotecnicoAuxDTO = this.indicadorGeotecnicoRepository.listarIndicadorGeotecnico(
			filtroIndicadorGeotecnicoAuxDTO.getDescNoUnidadMinera(),
			filtroIndicadorGeotecnicoAuxDTO.getDescFeInicio(),
			filtroIndicadorGeotecnicoAuxDTO.getDescFeFin(),
			paginador);

        return lPgimIndicadorGeotecnicoAuxDTO;
	}

	@Override
	public byte[] generarReporteIndicadorGeotecnicoEXCEL(PgimIndicadorGeotecnicoAuxDTO filtroIndicadorGeotecnicoAuxDTO) throws Exception {
			int pageNo = 0; 
			int pageSize = (Integer) filtroIndicadorGeotecnicoAuxDTO.getCantidadRegistros();

			Pageable paging = PageRequest.of(pageNo, pageSize);
			Page<PgimIndicadorGeotecnicoAuxDTO> pagedResult = this.documentoService.listarIndicadorGeotecnico(filtroIndicadorGeotecnicoAuxDTO, paging);

			List<PgimIndicadorGeotecnicoAuxDTO> pgimIndicadorGeotecnicoAuxDTO = pagedResult.getContent();

			// Crear una nueva instancia de SXSSFWorkbook
			SXSSFWorkbook workbook = new SXSSFWorkbook(-1);

			SXSSFSheet sheet = workbook.createSheet("MV_OSIN_INDICADOR_GEOTEC");
    
            // Crea las fuentes para los estilos
            Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14, IndexedColors.BLACK.getIndex());
            Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12, IndexedColors.BLACK.getIndex());
            Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10, IndexedColors.BLACK.getIndex());
    
            // Creando los estilos para las celdas
            CellStyle titleCS = workbook.createCellStyle();
            titleCS.setFont(titleFont);
            titleCS.setAlignment(HorizontalAlignment.CENTER);
    
            CellStyle subTitleCS = workbook.createCellStyle();
            subTitleCS.setFont(tableHeaderFont);
            subTitleCS.setAlignment(HorizontalAlignment.LEFT);
    
            CellStyle subTitleCS2 = workbook.createCellStyle();
            subTitleCS2.setFont(bodyFont);
            subTitleCS2.setAlignment(HorizontalAlignment.LEFT);
    
            CellStyle tableHeaderCS = workbook.createCellStyle();
            tableHeaderCS.setFont(tableHeaderFont);
            tableHeaderCS.setBorderBottom(BorderStyle.THIN);
            tableHeaderCS.setBorderTop(BorderStyle.THIN);
            tableHeaderCS.setBorderRight(BorderStyle.THIN);
            tableHeaderCS.setBorderLeft(BorderStyle.THIN);
            tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
            tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
            tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
    
            CellStyle tableBodyCS = workbook.createCellStyle();
            tableBodyCS.setFont(bodyFont);
            tableBodyCS.setBorderBottom(BorderStyle.THIN);
            tableBodyCS.setBorderTop(BorderStyle.THIN);
            tableBodyCS.setBorderRight(BorderStyle.THIN);
            tableBodyCS.setBorderLeft(BorderStyle.THIN);
    
            // Crea el titulo
            Row headerRow = sheet.createRow(4);
            Cell titleCell = headerRow.createCell(0);
            titleCell.setCellValue(filtroIndicadorGeotecnicoAuxDTO.getDeTituloReporte());
            titleCell.setCellStyle(titleCS);
            sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 6));
    
            // Fecha de generación
            Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9, IndexedColors.BLACK.getIndex());
            CellStyle fechaGeneracionStyle = workbook.createCellStyle();
            fechaGeneracionStyle.setFont(fechaGeneracionFont);
            fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);
    
            java.util.Date fechaActual = new Date();
            SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
            String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);
            
            Cell fechaGenCell = headerRow.createCell(7);
            fechaGenCell.setCellValue(fechaDeGeneracion);
            fechaGenCell.setCellStyle(fechaGeneracionStyle);
    
            // Crea un espacio en blanco
            Row emptyRow = sheet.createRow(6);
            Cell emptyCell = emptyRow.createCell(0);
            emptyCell.setCellValue("");
            sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));
    
            // Creamos las cabeceras de la tabla
            Row tablaCabecera1 = sheet.createRow(7);
            
            Cell tc1Cell0 = tablaCabecera1.createCell(0);
            tc1Cell0.setCellValue("ANOPRO");
            tc1Cell0.setCellStyle(tableHeaderCS);
            CellRangeAddress mrAnoPro = new CellRangeAddress(7, 8, 0, 0);
            sheet.addMergedRegion(mrAnoPro);
            
            Cell tc1Cell1 = tablaCabecera1.createCell(1);
            tc1Cell1.setCellValue("MES");
            tc1Cell1.setCellStyle(tableHeaderCS);
            CellRangeAddress mrMes = new CellRangeAddress(7, 8, 1, 1);
            sheet.addMergedRegion(mrMes);
            
            Cell tc1Cell2 = tablaCabecera1.createCell(2);
            tc1Cell2.setCellValue("ID_CLIENTE");
            tc1Cell2.setCellStyle(tableHeaderCS);
            CellRangeAddress mrIdCliente = new CellRangeAddress(7, 8, 2, 2);
            sheet.addMergedRegion(mrIdCliente);
    
            Cell tc1Cell3 = tablaCabecera1.createCell(3);
            tc1Cell3.setCellValue("RUC");
            tc1Cell3.setCellStyle(tableHeaderCS);
            CellRangeAddress mrRuc = new CellRangeAddress(7, 8, 3, 3);
            sheet.addMergedRegion(mrRuc);
    
            Cell tc1Cell4 = tablaCabecera1.createCell(4);
            tc1Cell4.setCellValue("TITULAR_MINERO");
            tc1Cell4.setCellStyle(tableHeaderCS);
            CellRangeAddress mrTitularMinero = new CellRangeAddress(7, 8, 4, 4);
            sheet.addMergedRegion(mrTitularMinero);
     
            Cell tc1Cell5 = tablaCabecera1.createCell(5);
            tc1Cell5.setCellValue("ESTRATO");
            tc1Cell5.setCellStyle(tableHeaderCS);
            CellRangeAddress mrEstrato = new CellRangeAddress(7, 8, 5, 5);
            sheet.addMergedRegion(mrEstrato);
    
            Cell tc1Cell6 = tablaCabecera1.createCell(6);
            tc1Cell6.setCellValue("CODIGO");
            tc1Cell6.setCellStyle(tableHeaderCS);
            CellRangeAddress mrCodigo = new CellRangeAddress(7, 8, 6, 6);
            sheet.addMergedRegion(mrCodigo);
    
            Cell tc1Cell7 = tablaCabecera1.createCell(7);
            tc1Cell7.setCellValue("UNIDAD");
            tc1Cell7.setCellStyle(tableHeaderCS);
            CellRangeAddress mrUnidad = new CellRangeAddress(7, 8, 7, 7);
            sheet.addMergedRegion(mrUnidad);
    
            Cell tc1Cell8 = tablaCabecera1.createCell(8);
            tc1Cell8.setCellValue("GRUPO");
            tc1Cell8.setCellStyle(tableHeaderCS);
            CellRangeAddress mrGrupo = new CellRangeAddress(7, 8, 8, 8);
            sheet.addMergedRegion(mrGrupo);
    
            Cell tc1Cell9 = tablaCabecera1.createCell(9);
            tc1Cell9.setCellValue("INDICADOR");
            tc1Cell9.setCellStyle(tableHeaderCS);
            CellRangeAddress mrIndicador = new CellRangeAddress(7, 8, 9, 9);
            sheet.addMergedRegion(mrIndicador);
    
            Cell tc1Cell10 = tablaCabecera1.createCell(10);
            tc1Cell10.setCellValue("VALOR");
            tc1Cell10.setCellStyle(tableHeaderCS);
            CellRangeAddress mrValor = new CellRangeAddress(7, 8, 10, 10);
            sheet.addMergedRegion(mrValor);
    
            Cell tc1Cell11 = tablaCabecera1.createCell(11);
            tc1Cell11.setCellValue("UNIDAD_MEDIDA");
            tc1Cell11.setCellStyle(tableHeaderCS);
            CellRangeAddress mrUnidadMedida = new CellRangeAddress(7, 8, 11, 11);
            sheet.addMergedRegion(mrUnidadMedida);
    
    
            // Aplicamos los bordes a las celdas fusionadas
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrAnoPro, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrMes, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrIdCliente, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrRuc, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrTitularMinero, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrEstrato, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrCodigo, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrUnidad, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrGrupo, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrIndicador, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrValor, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrUnidadMedida, sheet, workbook);
    
            // Creamos el detalle de la tabla
            int rowNum = 8;
            for (PgimIndicadorGeotecnicoAuxDTO obj : pgimIndicadorGeotecnicoAuxDTO) {
                Row row = sheet.createRow(rowNum+1);
    
                Cell cell0 = row.createCell(0);
                cell0.setCellValue(obj.getAnioPro());
                cell0.setCellStyle(tableBodyCS);
                
                Cell cell1 = row.createCell(1);
                cell1.setCellValue(obj.getMes());
                cell1.setCellStyle(tableBodyCS);
                
                Cell cell2 = row.createCell(2);
                cell2.setCellValue(obj.getIdCliente());
                cell2.setCellStyle(tableBodyCS);

                Cell cell3 = row.createCell(3);
                cell3.setCellValue(obj.getRuc());
                cell3.setCellStyle(tableBodyCS);
    
                Cell cell4 = row.createCell(4);
                cell4.setCellValue(obj.getTitularMinero());
                cell4.setCellStyle(tableBodyCS);
    
                Cell cell5 = row.createCell(5);
                cell5.setCellValue(obj.getEstrato());
                cell5.setCellStyle(tableBodyCS);
    
                Cell cell6 = row.createCell(6);
                cell6.setCellValue(obj.getCodigo());
                cell6.setCellStyle(tableBodyCS);
    
                Cell cell7 = row.createCell(7);
                cell7.setCellValue(obj.getUnidad());
                cell7.setCellStyle(tableBodyCS);
    
                Cell cell8 = row.createCell(8);
                cell8.setCellValue(obj.getGrupo());
                cell8.setCellStyle(tableBodyCS);
    
                Cell cell9 = row.createCell(9);
                cell9.setCellValue(obj.getIndicador());
                cell9.setCellStyle(tableBodyCS);
    
                Cell cell10 = row.createCell(10);
                cell10.setCellValue(obj.getValor());
                cell10.setCellStyle(tableBodyCS);
    
                Cell cell11 = row.createCell(11);
                cell11.setCellValue(obj.getUnidadMedida());
                cell11.setCellStyle(tableBodyCS);
                
				// controlar manualmente cómo se vacían las filas en el disco
				if (rowNum % 200 == 0) {
					// retener 100 últimas filas y eliminar todas las demás
					((SXSSFSheet) sheet).flushRows(200);
				}

				rowNum++;
			}

			sheet.trackAllColumnsForAutoSizing();
			String[] columns = new String[11];
            // Resize a todas las columnas
            PoiExcelUtil.resizeAllColumnsInXSSFSheet(sheet, columns);
    
            // Resize a las columnas con merge field
            sheet.setColumnWidth(0, 3000);
            sheet.setColumnWidth(1, 2000);
            sheet.setColumnWidth(2, 3000);
            sheet.setColumnWidth(3, 4000);
            sheet.setColumnWidth(4, 18000);
            sheet.setColumnWidth(5, 11000);
            sheet.setColumnWidth(6, 3000);
            sheet.setColumnWidth(7, 11000);
            sheet.setColumnWidth(8, 11000);
            sheet.setColumnWidth(9, 15000);
            sheet.setColumnWidth(10, 15000);
            sheet.setColumnWidth(11, 5000);

            // obtener la imagen y convertirlo a base64
            String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
            InputStream iSteamReader = new FileInputStream(ruta);
            byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
            String base64 = Base64.getEncoder().encodeToString(imageBytes);
    
            // Insertar imagen logotipo
            this.estaminService.addImgExcelSXSSF(workbook, sheet, base64, 1, 1, 0.22, 1);
    
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            workbook.write(baos);
    
            byte[] archivo = baos.toByteArray();
    
			// cerrar el InputStream y ByteArrayOutputStream
			iSteamReader.close();
			baos.close();

			// Cerrar el libro de trabajo
			workbook.dispose();

            return archivo;
	}

	@Override
	@Transactional(readOnly = false, timeout = 1200)
	public void procesarCopiadoDocumento_old(PgimDocumentoDTO[] listaPgimDocumentoDTO,
	PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) {
		
		// numero de expediente de los documentos a copiar
		String nroExpediente = listaPgimDocumentoDTO[0].getNuExpedienteSiged();
		
		Documentos documentosYArchivosSiged = new Documentos();
		
		// Llamar al servicio Siged para completar datos de los documentos a copiar
		try {
			documentosYArchivosSiged = this.documentoService.obtenerExpedienteDocumentoSiged(nroExpediente,
					"1", auditoriaDTO);
		} catch (Exception e1) {
			log.error(e1.getMessage(), e1);
			throw new PgimException(TipoResultado.ERROR,
					"Ocurrió un error al obtener los documentos del expediente Siged: "
							+ pgimInstanciaProcesDTO.getNuExpedienteSiged());
		}
		
		Long idFaseProcesoActual = pgimInstanciaProcesDTO.getDescIdFaseActualPas();
		Long idProceso = pgimInstanciaProcesDTO.getIdProceso();
		Long idInstanciaProceso = null;
		Long idDocumentoSiged = null;
		Long idDocumento = null;
		String nuExpedienteSiged = null;
		Boolean seHaCreadoExpedienteSiged = false;
		DescargaArchivo descargaArchivo = null;
		InputStream inputStream = null;
		int cantDocs = 0;
		PgimDocumentoDTO pgimDocumentoDTOCopiado = null; 
		
		// Agregar documentos al expediente siged del objeto de trabajo en donde se va copiar los documentos
		for (PgimDocumentoDTO pgimDocumentoDTO : listaPgimDocumentoDTO) {
			for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {
				if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {
					pgimDocumentoDTOCopiado = pgimDocumentoDTO; 
					
					if (pgimDocumentoDTO.getFlNumeradoPorSiged().equals("0"))
						pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("N");
					else
						pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("S");
					
					cantDocs++; 	
					int cantArchivos = 0;
					for (Archivo archivoSiged : docSiged.getArchivos()) {
						cantArchivos ++;
						try {
							descargaArchivo = this.documentoService.descargaArchivo_old(archivoSiged.getIdArchivo().toString());
						} catch (IOException e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, "Ocurrió un error al descargar el archivo "
									+ archivoSiged.getIdArchivo().toString());
						}
						inputStream = new ByteArrayInputStream(descargaArchivo.getFile().toByteArray());

						// Obtener correlativo
						Long correlativoArchivo = archivoService.obtenerCorrelativoCodNombre(); 

						// Obtener el nombre original del archivo
						String noOriginalArchivo = archivoSiged.getNombre();

						// Obtener el nombre codificado del archivo
						String nombreCodificado = archivoService.codificarArchivoPgim(noOriginalArchivo,
						pgimDocumentoDTOCopiado.getIdSubcatDocumento(), correlativoArchivo);

						// Cambiando nombre al archivo cargado
						MultipartFile multipartFile = null;
						try {
							multipartFile = new MockMultipartFile(nombreCodificado, inputStream);
						} catch (PgimException e) {

							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, e.getMensaje());
						} catch (IOException e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, e.getMessage());
						} catch (Exception e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, e.getMessage());
						}

						String asunto = pgimDocumentoDTOCopiado.getDeAsuntoDocumento();
						if(pgimDocumentoDTOCopiado.getNumeroDocumento() != null){
							if(!pgimDocumentoDTOCopiado.getNumeroDocumento().equalsIgnoreCase(".s/n") ){
								asunto = pgimDocumentoDTOCopiado.getNumeroDocumento() + ": " + pgimDocumentoDTOCopiado.getDeAsuntoDocumento(); 
								pgimDocumentoDTOCopiado.setDeAsuntoDocumento(asunto);
							}
						}

						//  verificar si existe expediente o no	para el primer docuemnto 						
						if(cantArchivos == 1 && cantDocs == 1){
							PgimDocumentoDTO pgimDocumento = pgimDocumentoDTOCopiado;
							pgimDocumento.setDeAsuntoDocumento(asunto);
							pgimDocumento.setNumeroDocumento(null);
							Map<String, Object> datosExp = verificarCrearExpediente(idProceso, pgimInstanciaProcesDTO.getCoTablaInstancia(),
								pgimDocumento, multipartFile,  auditoriaDTO); 
								nuExpedienteSiged = (String) datosExp.get("nuExpedienteSiged");
								seHaCreadoExpedienteSiged = (Boolean) datosExp.get("seHaCreadoExpedienteSiged");
								idInstanciaProceso = (Long) datosExp.get("idInstanciaProceso");
							
							if( datosExp.get("idDocumentoSiged") != null && !datosExp.get("idDocumentoSiged").equals("")){
								idDocumentoSiged = (Long) datosExp.get("idDocumentoSiged");
							}
							
						}			

						// Validación del propietario del expediente
						ExpedienteSiged expedienteSiged = new ExpedienteSiged();
						expedienteSiged.setIdPropietario( Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
						expedienteSiged.setNumeroExpediente(nuExpedienteSiged);

						ExpedienteDocOutRO objResultado = null;
						try {
							objResultado = this.documentoService
									.validarUsuarioPropietarioExpedienteSiged( expedienteSiged, idProceso, "Agregar documento", auditoriaDTO);
						} catch (PgimException e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, e.getMensaje());
						} catch (Exception e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, e.getMessage());
						}

						if (objResultado != null) {
							if (!objResultado.getResultCode().equals(
									ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
									throw new PgimException(TipoResultado.ERROR, objResultado.getMessage());
							}
						}
						
						DocumentoNuevo docNuevoSiged = new DocumentoNuevo(
							nuExpedienteSiged, 
							multipartFile.getName(),
							asunto,
							String.valueOf(pgimDocumentoDTOCopiado.getCoTipoDocumentoSiged()), 
							"",
							pgimDocumentoDTOCopiado.getFlNumeradoPorSiged(),
							auditoriaDTO.getCoUsuarioSiged());

						// Registrar documento Siged (WS)
						DocumentoOutRO documentoOutRO;
						String mensaje = "La operación ha fallado, pero es posible que algunos documentos ya se hayan copiado. De ser el caso, por favor, eliminarlos desde el Siged. Puede verificarlo desde la opción \"Todos documentos\", pestaña \" Expediente\" \n";

						try {									

								if(cantArchivos == 1){

									if(seHaCreadoExpedienteSiged){
										documentoOutRO = this.documentoService
												.agregarReemplazoDocumentoSiged_old(docNuevoSiged, multipartFile);
									}else{
										documentoOutRO = this.documentoService
											.agregarDocumentoSiged_old(docNuevoSiged, multipartFile);
										idDocumentoSiged = Long.parseLong(documentoOutRO.getCodigoDocumento());
									}

									// Si hay un error en el consumo del servicio SIGED, debe enviar el error
									if (!documentoOutRO.getResultCode()
											.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
										throw new PgimException(TipoResultado.ERROR, documentoOutRO.getMessage());
									}

									// Registrar documento PGIM
									pgimDocumentoDTOCopiado.setIdFaseProceso(idFaseProcesoActual);
									pgimDocumentoDTOCopiado.setCoDocumentoSiged(idDocumentoSiged);
									pgimDocumentoDTOCopiado.setSeDocumento(correlativoArchivo);
									pgimDocumentoDTOCopiado.setIdInstanciaProceso(idInstanciaProceso);
									
									if (seHaCreadoExpedienteSiged) {
										pgimDocumentoDTOCopiado.setDescFlExpedienteCreado(1);
										seHaCreadoExpedienteSiged = false;
									}

									idDocumento = this.registrarDocumento(pgimDocumentoDTOCopiado, auditoriaDTO);
									pgimDocumentoDTOCopiado.setIdDocumento(idDocumento);

								}else{

										Documento documento = new Documento();
										documento.setIdDocumento(pgimDocumentoDTOCopiado.getCoDocumentoSiged().toString());
										documento.setUsuarioCreador(auditoriaDTO.getCoUsuarioSiged());
										String versionar = "0";
										Archivos archivos = this.documentoService.agregarArchivoSiged_old(documento, versionar, multipartFile,
												nuExpedienteSiged, idProceso, auditoriaDTO);

										if (!archivos.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
												String servicio = ConstantesUtil.PARAM_SIGED_AGREGAR_ARCHIVO.replace("{versionar}", versionar);
												String mensaje2 = String.format("El servicio %s generó el siguiente error: %s", servicio, archivos.getMessage());
												log.error(mensaje2);
												throw new PgimException(TipoResultado.ERROR, mensaje);
										}

								}

								// Registrar archivo PGIM (Log)
								PgimArchivoDTO archivoDTO = new PgimArchivoDTO();
								archivoDTO.setIdDocumento(idDocumento);
								archivoDTO.setNoOriginalArchivo(noOriginalArchivo);
								archivoDTO.setNoNuevoArchivo(nombreCodificado);
								archivoDTO.setSeArchivo(correlativoArchivo);

								this.archivoService.registrarArchivo(archivoDTO, auditoriaDTO);
								
						} catch (PgimException e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, mensaje);
						} catch (Exception e) {
							log.error(e.getMessage(), e);
							throw new PgimException(TipoResultado.ERROR, mensaje);
						}							

					}
				}
			}
		}
	}

	@Transactional(readOnly = false, timeout = 1200)
	public void procesarCopiadoDocumento_liquidacion(List<List<PgimDocumentoDTO>> listaPgimDocumentoDTOSuperv,
	PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) {
		
		String nroExpedienteSupev = "";
		for(List<PgimDocumentoDTO> listaPgimDocumentoDTO : listaPgimDocumentoDTOSuperv){	
			// Agregar documentos al expediente siged del objeto de trabajo en donde se va copiar los documentos
			Documentos documentosYArchivosSiged = new Documentos();
			for (PgimDocumentoDTO pgimDocumentoDTO : listaPgimDocumentoDTO) {
				// numero de expediente de los documentos a copiar
				String nroExpediente = pgimDocumentoDTO.getNuExpedienteSiged();				

				if (!nroExpedienteSupev.equals(nroExpediente)) {					
					// Llamar al servicio Siged para completar datos de los documentos a copiar
					try {
						documentosYArchivosSiged = this.documentoService.obtenerExpedienteDocumentoSiged(nroExpediente,
								"1", auditoriaDTO);
					} catch (Exception e1) {
						log.error(e1.getMessage(), e1);
						throw new PgimException(TipoResultado.ERROR,
								"Ocurrió un error al obtener los documentos del expediente Siged: "
										+ pgimInstanciaProcesDTO.getNuExpedienteSiged());
					}

					nroExpedienteSupev = nroExpediente;
				}
				
				Long idFaseProcesoActual = ConstantesUtil.PARAM_LIQUI_SOLICITUD;
				Long idProceso = pgimInstanciaProcesDTO.getIdProceso();
				Long idInstanciaProceso = null;
				Long idDocumentoSiged = null;
				Long idDocumento = null;
				String nuExpedienteSiged = null;
				Boolean seHaCreadoExpedienteSiged = false;
				DescargaArchivo descargaArchivo = null;
				InputStream inputStream = null;
				int cantDocs = 0;
				PgimDocumentoDTO pgimDocumentoDTOCopiado = null; 
				
				for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {
					if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {
						pgimDocumentoDTOCopiado = pgimDocumentoDTO; 
						
						if (pgimDocumentoDTO.getFlNumeradoPorSiged().equals("0"))
							pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("N");
						else
							pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("S");
						
						cantDocs++; 	
						int cantArchivos = 0;
						for (Archivo archivoSiged : docSiged.getArchivos()) {
							cantArchivos ++;
							try {
								descargaArchivo = this.documentoService.descargaArchivo_old(archivoSiged.getIdArchivo().toString());
							} catch (IOException e) {
								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, "Ocurrió un error al descargar el archivo "
										+ archivoSiged.getIdArchivo().toString());
							}
							
							if (descargaArchivo.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								inputStream = new ByteArrayInputStream(descargaArchivo.getFile().toByteArray());
							} else {
								log.error(descargaArchivo.getMessage());
								throw new PgimException(TipoResultado.ERROR, "Ocurrió un error al descargar el archivo "
										+ archivoSiged.getIdArchivo().toString());
							}

							// Obtener correlativo
							Long correlativoArchivo = archivoService.obtenerCorrelativoCodNombre(); 

							// Obtener el nombre original del archivo
							String noOriginalArchivo = archivoSiged.getNombre();

							// Obtener el nombre codificado del archivo
							String nombreCodificado = archivoService.codificarArchivoPgim(noOriginalArchivo,
							pgimDocumentoDTOCopiado.getIdSubcatDocumento(), correlativoArchivo);

							// Cambiando nombre al archivo cargado
							MultipartFile multipartFile = null;
							try {
								multipartFile = new MockMultipartFile(nombreCodificado, inputStream);
							} catch (PgimException e) {

								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, e.getMensaje());
							} catch (IOException e) {
								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, e.getMessage());
							} catch (Exception e) {
								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, e.getMessage());
							}

							String asunto = pgimDocumentoDTOCopiado.getDeAsuntoDocumento();
							if(pgimDocumentoDTOCopiado.getNumeroDocumento() != null){
								if(!pgimDocumentoDTOCopiado.getNumeroDocumento().equalsIgnoreCase(".s/n") ){
									asunto = pgimDocumentoDTOCopiado.getNumeroDocumento() + ": " + pgimDocumentoDTOCopiado.getDeAsuntoDocumento(); 
									pgimDocumentoDTOCopiado.setDeAsuntoDocumento(asunto);
								}
							}

							//  verificar si existe expediente o no	para el primer docuemnto 						
							if(cantArchivos == 1 && cantDocs == 1){
								PgimDocumentoDTO pgimDocumento = pgimDocumentoDTOCopiado;
								pgimDocumento.setDeAsuntoDocumento(asunto);
								pgimDocumento.setNumeroDocumento(null);
								Map<String, Object> datosExp = verificarCrearExpediente(idProceso, pgimInstanciaProcesDTO.getCoTablaInstancia(),
									pgimDocumento, multipartFile,  auditoriaDTO); 
									nuExpedienteSiged = (String) datosExp.get("nuExpedienteSiged");
									seHaCreadoExpedienteSiged = (Boolean) datosExp.get("seHaCreadoExpedienteSiged");
									idInstanciaProceso = (Long) datosExp.get("idInstanciaProceso");
								
								if( datosExp.get("idDocumentoSiged") != null && !datosExp.get("idDocumentoSiged").equals("")){
									idDocumentoSiged = (Long) datosExp.get("idDocumentoSiged");
								}
								
							}			

							
							DocumentoNuevo docNuevoSiged = new DocumentoNuevo(
								nuExpedienteSiged, 
								multipartFile.getName(),
								asunto,
								String.valueOf(pgimDocumentoDTOCopiado.getCoTipoDocumentoSiged()), 
								"",
								pgimDocumentoDTOCopiado.getFlNumeradoPorSiged(),
								auditoriaDTO.getCoUsuarioSiged());

							// Registrar documento Siged (WS)
							DocumentoOutRO documentoOutRO;
							String mensaje = "La operación ha fallado, pero es posible que algunos documentos ya se hayan copiado. De ser el caso, por favor, eliminarlos desde el Siged. Puede verificarlo desde la opción \"Todos documentos\", pestaña \" Expediente\" \n";

							try {									

									if(cantArchivos == 1){

										if(seHaCreadoExpedienteSiged){
											documentoOutRO = this.documentoService
													.agregarReemplazoDocumentoSiged_old(docNuevoSiged, multipartFile);
										}else{
											documentoOutRO = this.documentoService
												.agregarDocumentoSiged_old(docNuevoSiged, multipartFile);
											idDocumentoSiged = Long.parseLong(documentoOutRO.getCodigoDocumento());
										}

										// Si hay un error en el consumo del servicio SIGED, debe enviar el error
										if (!documentoOutRO.getResultCode()
												.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
											throw new PgimException(TipoResultado.ERROR, documentoOutRO.getMessage());
										}
	
										// Registrar documento PGIM
										pgimDocumentoDTOCopiado.setIdFaseProceso(idFaseProcesoActual);
										pgimDocumentoDTOCopiado.setCoDocumentoSiged(idDocumentoSiged);
										pgimDocumentoDTOCopiado.setSeDocumento(correlativoArchivo);
										pgimDocumentoDTOCopiado.setIdInstanciaProceso(idInstanciaProceso);
										
										if (seHaCreadoExpedienteSiged) {
											pgimDocumentoDTOCopiado.setDescFlExpedienteCreado(1);
											seHaCreadoExpedienteSiged = false;
										}
	
										idDocumento = this.registrarDocumento(pgimDocumentoDTOCopiado, auditoriaDTO);
										pgimDocumentoDTOCopiado.setIdDocumento(idDocumento);

									}else{

											Documento documento = new Documento();
											documento.setIdDocumento(pgimDocumentoDTOCopiado.getCoDocumentoSiged().toString());
											documento.setUsuarioCreador(auditoriaDTO.getCoUsuarioSiged());
											String versionar = "0";
											Archivos archivos = this.documentoService.agregarArchivoSiged_old(documento, versionar, multipartFile,
													nuExpedienteSiged, idProceso, auditoriaDTO);

											if (!archivos.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
													String servicio = ConstantesUtil.PARAM_SIGED_AGREGAR_ARCHIVO.replace("{versionar}", versionar);
													String mensaje2 = String.format("El servicio %s generó el siguiente error: %s", servicio, archivos.getMessage());
													log.error(mensaje2);
													throw new PgimException(TipoResultado.ERROR, mensaje2);
											}

									}

									// Registrar archivo PGIM (Log)
									PgimArchivoDTO archivoDTO = new PgimArchivoDTO();
									archivoDTO.setIdDocumento(idDocumento);
									archivoDTO.setNoOriginalArchivo(noOriginalArchivo);
									archivoDTO.setNoNuevoArchivo(nombreCodificado);
									archivoDTO.setSeArchivo(correlativoArchivo);

									this.archivoService.registrarArchivo(archivoDTO, auditoriaDTO);
									
							} catch (PgimException e) {
								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, mensaje);
							} catch (Exception e) {
								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, mensaje);
							}							

						}
					}
				}
			}
		}
	}

	@Override
	@Transactional(readOnly = false, timeout = 1800)
	public void procesarCopiadoDocumentoAntecedenteSiged(PgimDocumentoDTO pgimDocumentoDTOACopiar, PgimDocumentoDTO pgimDocumentoDTO,
		PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) {
		
		//validación de que documento no haya sido copiado anteriormente
		Long countAntecedenteCopiado = this.documentoRepository.validarCopiadoAntecedente(pgimInstanciaProcesDTO.getIdInstanciaProceso(),  pgimDocumentoDTO.getCoDocumentoSiged());
		
		if(countAntecedenteCopiado > 0) {
			throw new PgimException(TipoResultado.WARNING, "Lo sentidmos, el documento que intenta copiar, ya fue copiado anteriormente. Por favor intente con otro documento.");
		}		
				
		Long idFaseProcesoActual = pgimDocumentoDTO.getIdFaseProceso();
		Long idProceso = pgimInstanciaProcesDTO.getIdProceso();
		Long idInstanciaProceso = null;
		Long idDocumentoSiged = null;
		Long idDocumentoPgim = null;
		String nroExpedienteSigedActual = null;
		Boolean seHaCreadoExpedienteSiged = false;
		DescargaArchivo descargaArchivo = null;
		InputStream inputStream = null;
		PgimDocumentoDTO pgimDocumentoDTOCopiado = null; 
		
		String mensaje = "La operación ha fallado, pero es posible que algunos documentos ya se hayan copiado. De ser el caso, por favor, eliminarlos desde el Siged. Puede verificarlo desde la opción \"Todos documentos\", pestaña \" Expediente\" \n";
		// Agregar documento al expediente siged del objeto de trabajo en donde se va copiar los documentos
			try {

				pgimDocumentoDTOCopiado = pgimDocumentoDTO;
				
				if (pgimDocumentoDTO.getFlNumeradoPorSiged().equals("0") || 
						pgimDocumentoDTO.getFlNumeradoPorSiged().equals("N") )
					pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("N");
				else
					pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("S");
				
				int cantArchivos = 0;
				Archivos archivos;
				try {
					archivos = this.obtenerArhivosConVersionesSiged(String.valueOf(pgimDocumentoDTO.getCoDocumentoSiged()), auditoriaDTO);
				} catch (Exception e) {
					log.error(e.getMessage(), e);
					throw new PgimException(TipoResultado.ERROR, "Ocurrió un error al obtener los archivos a copiar desde el la opción de copiar antecedente "
						+ pgimDocumentoDTO.getCoDocumentoSiged().toString());
				}

				// Ordenar archivos siged por su Id desc
				List<Archivo> lArchivosSiged = archivos.getListaArchivo().stream()
				    .sorted(Comparator.comparing(Archivo::getIdArchivo).reversed())
				    .collect(Collectors.toList());
				for (Archivo archivoSiged : lArchivosSiged) {
					cantArchivos ++;
					try {
						descargaArchivo = this.descargaArchivo_old(archivoSiged.getIdArchivo().toString());
						
						// Si hay un error en el consumo del servicio SIGED, debe enviar el error
						if (!descargaArchivo.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
							throw new PgimException(TipoResultado.ERROR, descargaArchivo.getMessage());
						}
						
					} catch (IOException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, "Ocurrió un error al descargar el archivo desde el la opción de copiar antecedente "
								+ archivoSiged.getIdArchivo().toString());
					}

					inputStream = new ByteArrayInputStream(descargaArchivo.getFile().toByteArray());

					// Obtener correlativo
					Long correlativoArchivo = archivoService.obtenerCorrelativoCodNombre(); 

					// Obtener el nombre original del archivo
					String noOriginalArchivo = archivoSiged.getNombre();

					// Obtener el nombre codificado del archivo
					String nombreCodificado = archivoService.codificarArchivoPgim(noOriginalArchivo,
						pgimDocumentoDTOCopiado.getIdSubcatDocumento(), correlativoArchivo);
					
					// validar que el nombre de archivo no supere los 160 carácteres.
					if (noOriginalArchivo.length() > 163) {
						nombreCodificado = noOriginalArchivo;
						log.info("El documento no a sido codificado debido a la extension de su nombre");
					}

					// Cambiando nombre al archivo cargado
					MultipartFile multipartFile = null;
					try {
						multipartFile = new MockMultipartFile(nombreCodificado, inputStream);
					} catch (PgimException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMensaje());
					} catch (IOException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMessage());
					} catch (Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMessage());
					}

					String asunto = pgimDocumentoDTOCopiado.getDeAsuntoDocumento();
					
					//  verificar si existe expediente para el primer documento 						
					if(cantArchivos == 1 ){
						PgimDocumentoDTO pgimDocumento = pgimDocumentoDTOCopiado;
						Map<String, Object> datosExp = this.verificarCrearExpediente(idProceso, pgimInstanciaProcesDTO.getCoTablaInstancia(),
							pgimDocumento, multipartFile,  auditoriaDTO); 
						nroExpedienteSigedActual = (String) datosExp.get("nuExpedienteSiged");
						seHaCreadoExpedienteSiged = (Boolean) datosExp.get("seHaCreadoExpedienteSiged");
						idInstanciaProceso = (Long) datosExp.get("idInstanciaProceso");
						
						if( datosExp.get("idDocumentoSiged") != null && !datosExp.get("idDocumentoSiged").equals("")){
							idDocumentoSiged = (Long) datosExp.get("idDocumentoSiged");
						}
						
					}

					// Validación del propietario del expediente
					ExpedienteSiged expedienteSiged = new ExpedienteSiged();
					expedienteSiged.setIdPropietario( Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
					expedienteSiged.setNumeroExpediente(nroExpedienteSigedActual);

					ExpedienteDocOutRO objResultado = null;
					try {
						if(!seHaCreadoExpedienteSiged && cantArchivos == 1)
							objResultado = this.validarUsuarioPropietarioExpedienteSiged( expedienteSiged, idProceso, "Agregar documento", auditoriaDTO);
					} catch (PgimException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMensaje());
					} catch (Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMessage());
					}

					if (objResultado != null) {
						if (!objResultado.getResultCode().equals(
								ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								throw new PgimException(TipoResultado.ERROR, objResultado.getMessage());
						}
					}

					// Registrar documento Siged (WS)
					DocumentoNuevo docNuevoSiged = new DocumentoNuevo(
						nroExpedienteSigedActual, 
						multipartFile.getName(),
						asunto,
						String.valueOf(pgimDocumentoDTOCopiado.getCoTipoDocumentoSiged()), 
						pgimDocumentoDTOCopiado.getNumeroDocumento(),
						pgimDocumentoDTOCopiado.getFlNumeradoPorSiged(),
						auditoriaDTO.getCoUsuarioSiged());

					DocumentoOutRO documentoOutRO;
					
					try {									

						if(cantArchivos == 1){

							if(seHaCreadoExpedienteSiged){
								documentoOutRO = new DocumentoOutRO();
								documentoOutRO.setResultCode(ConstantesUtil.PARAM_RESULTADO_SUCCESS);
								// documentoOutRO = this.agregarReemplazoDocumentoSiged_old(docNuevoSiged, multipartFile);
							}else{
								documentoOutRO = this.agregarDocumentoSiged_old(docNuevoSiged, multipartFile);
								idDocumentoSiged = Long.parseLong(documentoOutRO.getCodigoDocumento());
							}

							// Si hay un error en el consumo del servicio SIGED, debe enviar el error
							if (!documentoOutRO.getResultCode()
									.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								throw new PgimException(TipoResultado.ERROR, documentoOutRO.getMessage());
							}

							// Registrar documento PGIM
							pgimDocumentoDTOCopiado.setIdFaseProceso(idFaseProcesoActual);
							pgimDocumentoDTOCopiado.setCoDocumentoSiged(idDocumentoSiged);
							pgimDocumentoDTOCopiado.setSeDocumento(correlativoArchivo);
							pgimDocumentoDTOCopiado.setIdInstanciaProceso(idInstanciaProceso);
							pgimDocumentoDTOCopiado.setCoDocumentoSigedPCopia(pgimDocumentoDTOACopiar.getCoDocumentoSiged());
							
							if (seHaCreadoExpedienteSiged) {
								pgimDocumentoDTOCopiado.setDescFlExpedienteCreado(1);
								seHaCreadoExpedienteSiged = false;
							}

							idDocumentoPgim = this.registrarDocumento(pgimDocumentoDTOCopiado, auditoriaDTO);

						}else{

							Documento documento = new Documento();
							documento.setIdDocumento(pgimDocumentoDTOCopiado.getCoDocumentoSiged().toString());
							documento.setUsuarioCreador(auditoriaDTO.getCoUsuarioSiged());
							String versionar = "0";
							Archivos archivosCopiados = this.agregarArchivoSiged_old(documento, versionar, multipartFile,
								nroExpedienteSigedActual, idProceso, auditoriaDTO);

							if (!archivosCopiados.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								log.info("Error al adjuntar un archivo desde la opción de copiado de antecedente");
								String servicio = ConstantesUtil.PARAM_SIGED_AGREGAR_ARCHIVO.replace("{versionar}", versionar);
								String mensaje2 = String.format("El servicio %s generó el siguiente error: %s", servicio, archivosCopiados.getMessage());
								log.error(mensaje2);
								throw new PgimException(TipoResultado.ERROR, mensaje);
							}

						}

						// Registrar archivo PGIM (Log)
						PgimArchivoDTO archivoDTO = new PgimArchivoDTO();
						archivoDTO.setIdDocumento(idDocumentoPgim);
						archivoDTO.setNoOriginalArchivo(noOriginalArchivo);
						archivoDTO.setNoNuevoArchivo(nombreCodificado);
						archivoDTO.setSeArchivo(correlativoArchivo);

						this.archivoService.registrarArchivo(archivoDTO, auditoriaDTO);
							
					} catch (PgimException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, mensaje);
					} catch (Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, mensaje);
					}							

				}
			
			}catch (PgimException e) {
				log.error(e.getMessage(), e);
				throw new PgimException(TipoResultado.ERROR, mensaje);
			} catch (Exception e) {
				log.error(e.getMessage(), e);
				throw new PgimException(TipoResultado.ERROR, mensaje);
			}
		
		Long idTipoAntecedente = antecedenteSupervRepository
				.tipoAntecedente(pgimDocumentoDTO.getIdSubcatDocumento());

		PgimAntecedenteSupervDTO pgimAntecedenteSupervDTO = new PgimAntecedenteSupervDTO();
		pgimAntecedenteSupervDTO.setIdDocumento(idDocumentoPgim);
		pgimAntecedenteSupervDTO.setIdSupervision(pgimInstanciaProcesDTO.getCoTablaInstancia());
		pgimAntecedenteSupervDTO.setIdTipoAntecedente(idTipoAntecedente);
		pgimAntecedenteSupervDTO.setIdTipoSupervision(pgimDocumentoDTO.getDescIdTipoSupervision());
		pgimAntecedenteSupervDTO.setFeInicioSupervisionReal(pgimDocumentoDTO.getDescFeInicioSupervisionReal());
		pgimAntecedenteSupervDTO.setFeFinSupervisionReal(pgimDocumentoDTO.getDescFeFinSupervisionReal());
		pgimAntecedenteSupervDTO.setNuExpedienteSiged(pgimDocumentoDTO.getDescNuExpedienteSiged());

		this.antecedenteSupervService.crearAntecedente(pgimAntecedenteSupervDTO, auditoriaDTO);
		
	}

	
	@Transactional(readOnly = false, timeout = 1200)
	public void procesarCopiadoDocumentoAntecedenteSiged2(PgimDocumentoDTO pgimDocumentoDTOACopiar, PgimDocumentoDTO pgimDocumentoDTO,
		PgimInstanciaProcesDTO pgimInstanciaProcesDTO, AuditoriaDTO auditoriaDTO) {
		
		//validación de que documento no haya sido copiado anteriormente
		Long countAntecedenteCopiado = this.documentoRepository.validarCopiadoAntecedente(pgimInstanciaProcesDTO.getIdInstanciaProceso(),  pgimDocumentoDTO.getCoDocumentoSiged());
		
		if(countAntecedenteCopiado > 0) {
			throw new PgimException(TipoResultado.WARNING, "Lo sentidmos, el documento que intenta copiar, ya fue copiado anteriormente. Por favor intente con otro documento.");
		}		
		
		// número de expediente del documento a copiar
		String nroExpedienteOrigen = pgimDocumentoDTOACopiar.getNuExpedienteSiged();
		
		// listado de documentos perteneciente al expediente del documento a copiar
		Documentos documentosYArchivosSiged = new Documentos();
		
		// Llamar al servicio Siged para completar datos del documento a copiar
		try {
			documentosYArchivosSiged = this.obtenerExpedienteDocumentoSiged(nroExpedienteOrigen,
					"1", auditoriaDTO);
		} catch (Exception e1) {
			log.error(e1.getMessage(), e1);
			throw new PgimException(TipoResultado.ERROR,
					"Ocurrió un error al obtener los documentos del expediente Siged: " + nroExpedienteOrigen);
		}
		
		Long idFaseProcesoActual = pgimDocumentoDTO.getIdFaseProceso();
		Long idProceso = pgimInstanciaProcesDTO.getIdProceso();
		Long idInstanciaProceso = null;
		Long idDocumentoSiged = null;
		Long idDocumentoPgim = null;
		String nroExpedienteSiged = null;
		Boolean seHaCreadoExpedienteSiged = false;
		DescargaArchivo descargaArchivo = null;
		InputStream inputStream = null;
		int cantDocs = 0;
		PgimDocumentoDTO pgimDocumentoDTOCopiado = null; 
		
		// Agregar documento al expediente siged del objeto de trabajo en donde se va copiar los documentos
		for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {
			if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {
				pgimDocumentoDTOCopiado = pgimDocumentoDTO;
				
				if (pgimDocumentoDTO.getFlNumeradoPorSiged().equals("0") || 
						pgimDocumentoDTO.getFlNumeradoPorSiged().equals("N") )
					pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("N");
				else
					pgimDocumentoDTOCopiado.setFlNumeradoPorSiged("S");
				
				cantDocs++; 	
				int cantArchivos = 0;
				
				// Ordenar archivos siged por su Id desc
				List<Archivo> lArchivosSiged = docSiged.getArchivos().stream()
						.sorted(Comparator.comparing(Archivo::getIdArchivo).reversed())
						.collect(Collectors.toList());
				for (Archivo archivoSiged : lArchivosSiged) {
					cantArchivos ++;
					try {
						descargaArchivo = this.descargaArchivo_old(archivoSiged.getIdArchivo().toString());
						
						// Si hay un error en el consumo del servicio SIGED, debe enviar el error
						if (!descargaArchivo.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
							throw new PgimException(TipoResultado.ERROR, descargaArchivo.getMessage());
						}
						
					} catch (IOException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, "Ocurrió un error al descargar el archivo "
								+ archivoSiged.getIdArchivo().toString());
					}

					inputStream = new ByteArrayInputStream(descargaArchivo.getFile().toByteArray());

					// Obtener correlativo
					Long correlativoArchivo = archivoService.obtenerCorrelativoCodNombre(); 

					// Obtener el nombre original del archivo
					String noOriginalArchivo = archivoSiged.getNombre();

					// Obtener el nombre codificado del archivo
					String nombreCodificado = archivoService.codificarArchivoPgim(noOriginalArchivo,
						pgimDocumentoDTOCopiado.getIdSubcatDocumento(), correlativoArchivo);
					
					// validar que el nombre de archivo no supere los 160 carácteres.
					if (noOriginalArchivo.length() > 163) {
						nombreCodificado = noOriginalArchivo;
						log.info("El documento no a sido codificado debido a la extension de su nombre");
					}

					// Cambiando nombre al archivo cargado
					MultipartFile multipartFile = null;
					try {
						multipartFile = new MockMultipartFile(nombreCodificado, inputStream);
					} catch (PgimException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMensaje());
					} catch (IOException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMessage());
					} catch (Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMessage());
					}

					String asunto = pgimDocumentoDTOCopiado.getDeAsuntoDocumento();
					
					//  verificar si existe expediente para el primer documento 						
					if(cantArchivos == 1 && cantDocs == 1){
						PgimDocumentoDTO pgimDocumento = pgimDocumentoDTOCopiado;
						Map<String, Object> datosExp = this.verificarCrearExpediente(idProceso, pgimInstanciaProcesDTO.getCoTablaInstancia(),
							pgimDocumento, multipartFile,  auditoriaDTO); 
						nroExpedienteSiged = (String) datosExp.get("nuExpedienteSiged");
						seHaCreadoExpedienteSiged = (Boolean) datosExp.get("seHaCreadoExpedienteSiged");
						idInstanciaProceso = (Long) datosExp.get("idInstanciaProceso");
						
						if( datosExp.get("idDocumentoSiged") != null && !datosExp.get("idDocumentoSiged").equals("")){
							idDocumentoSiged = (Long) datosExp.get("idDocumentoSiged");
						}
						
					}			

					// Validación del propietario del expediente
					ExpedienteSiged expedienteSiged = new ExpedienteSiged();
					expedienteSiged.setIdPropietario( Long.parseLong(auditoriaDTO.getCoUsuarioSiged()));
					expedienteSiged.setNumeroExpediente(nroExpedienteSiged);

					ExpedienteDocOutRO objResultado = null;
					try {
						objResultado = this.validarUsuarioPropietarioExpedienteSiged( expedienteSiged, idProceso, "Agregar documento", auditoriaDTO);
					} catch (PgimException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMensaje());
					} catch (Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMessage());
					}

					if (objResultado != null) {
						if (!objResultado.getResultCode().equals(
								ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								throw new PgimException(TipoResultado.ERROR, objResultado.getMessage());
						}
					}

					// Registrar documento Siged (WS)
					DocumentoNuevo docNuevoSiged = new DocumentoNuevo(
						nroExpedienteSiged, 
						multipartFile.getName(),
						asunto,
						String.valueOf(pgimDocumentoDTOCopiado.getCoTipoDocumentoSiged()), 
						pgimDocumentoDTOCopiado.getNumeroDocumento(),
						pgimDocumentoDTOCopiado.getFlNumeradoPorSiged(),
						auditoriaDTO.getCoUsuarioSiged());

					DocumentoOutRO documentoOutRO;
					String mensaje = "La operación ha fallado, pero es posible que algunos documentos ya se hayan copiado. De ser el caso, por favor, eliminarlos desde el Siged. Puede verificarlo desde la opción \"Todos documentos\", pestaña \" Expediente\" \n";

					try {									

						if(cantArchivos == 1){

							if(seHaCreadoExpedienteSiged){
								documentoOutRO = this.agregarReemplazoDocumentoSiged_old(docNuevoSiged, multipartFile);
							}else{
								documentoOutRO = this.agregarDocumentoSiged_old(docNuevoSiged, multipartFile);
								idDocumentoSiged = Long.parseLong(documentoOutRO.getCodigoDocumento());
							}

							// Si hay un error en el consumo del servicio SIGED, debe enviar el error
							if (!documentoOutRO.getResultCode()
									.equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								throw new PgimException(TipoResultado.ERROR, documentoOutRO.getMessage());
							}

							// Registrar documento PGIM
							pgimDocumentoDTOCopiado.setIdFaseProceso(idFaseProcesoActual);
							pgimDocumentoDTOCopiado.setCoDocumentoSiged(idDocumentoSiged);
							pgimDocumentoDTOCopiado.setSeDocumento(correlativoArchivo);
							pgimDocumentoDTOCopiado.setIdInstanciaProceso(idInstanciaProceso);
							pgimDocumentoDTOCopiado.setCoDocumentoSigedPCopia(pgimDocumentoDTOACopiar.getCoDocumentoSiged());
							
							if (seHaCreadoExpedienteSiged) {
								pgimDocumentoDTOCopiado.setDescFlExpedienteCreado(1);
								seHaCreadoExpedienteSiged = false;
							}

							idDocumentoPgim = this.registrarDocumento(pgimDocumentoDTOCopiado, auditoriaDTO);

						}else{

							Documento documento = new Documento();
							documento.setIdDocumento(pgimDocumentoDTOCopiado.getCoDocumentoSiged().toString());
							documento.setUsuarioCreador(auditoriaDTO.getCoUsuarioSiged());
							String versionar = "0";
							Archivos archivos = this.agregarArchivoSiged_old(documento, versionar, multipartFile,
								nroExpedienteSiged, idProceso, auditoriaDTO);

							if (!archivos.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								String servicio = ConstantesUtil.PARAM_SIGED_AGREGAR_ARCHIVO.replace("{versionar}", versionar);
								String mensaje2 = String.format("El servicio %s generó el siguiente error: %s", servicio, archivos.getMessage());
								log.error(mensaje2);
								throw new PgimException(TipoResultado.ERROR, mensaje);
							}

						}

						// Registrar archivo PGIM (Log)
						PgimArchivoDTO archivoDTO = new PgimArchivoDTO();
						archivoDTO.setIdDocumento(idDocumentoPgim);
						archivoDTO.setNoOriginalArchivo(noOriginalArchivo);
						archivoDTO.setNoNuevoArchivo(nombreCodificado);
						archivoDTO.setSeArchivo(correlativoArchivo);

						this.archivoService.registrarArchivo(archivoDTO, auditoriaDTO);
							
					} catch (PgimException e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, mensaje);
					} catch (Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, mensaje);
					}							

				}
				
				break;
			}
						
		}
		
		Long idTipoAntecedente = antecedenteSupervRepository
				.tipoAntecedente(pgimDocumentoDTO.getIdSubcatDocumento());

		PgimAntecedenteSupervDTO pgimAntecedenteSupervDTO = new PgimAntecedenteSupervDTO();
		pgimAntecedenteSupervDTO.setIdDocumento(idDocumentoPgim);
		pgimAntecedenteSupervDTO.setIdSupervision(pgimInstanciaProcesDTO.getCoTablaInstancia());
		pgimAntecedenteSupervDTO.setIdTipoAntecedente(idTipoAntecedente);
		pgimAntecedenteSupervDTO.setIdTipoSupervision(pgimDocumentoDTO.getDescIdTipoSupervision());
		pgimAntecedenteSupervDTO.setFeInicioSupervisionReal(pgimDocumentoDTO.getDescFeInicioSupervisionReal());
		pgimAntecedenteSupervDTO.setFeFinSupervisionReal(pgimDocumentoDTO.getDescFeFinSupervisionReal());
		pgimAntecedenteSupervDTO.setNuExpedienteSiged(pgimDocumentoDTO.getDescNuExpedienteSiged());

		this.antecedenteSupervService.crearAntecedente(pgimAntecedenteSupervDTO, auditoriaDTO);
		
	}



		public Map<String, Object> verificarCrearExpediente(Long idProceso, Long coTablaInstancia, PgimDocumentoDTO pgimDocumentoDTO, MultipartFile multipartFile,  AuditoriaDTO auditoriaDTO){

			// Obtener la instancia del proceso
			List<PgimInstanciaProcesDTO> lPgimInstanciaProcesDTO = this.instanciaProcesService
					.asegurarInstanciasProceso( idProceso, coTablaInstancia, auditoriaDTO);

			PgimInstanciaProcesDTO pgimInstanciaProcesDTOActual = lPgimInstanciaProcesDTO.get(0);
			PgimInstanciaProcesDTO pgimInstanciaProcesDTOPadre = lPgimInstanciaProcesDTO.get(1);
			
			ExpedienteOutRO expedienteOutRO = null;
			PgimPersona pgimPersonaAgenteSupervisado = null;
			boolean seHaCreadoExpedienteSiged = false;
			Long idDocumentoSiged = null;
			String nuExpedienteSiged = null;
			
				if (pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_EVENTO)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_AUTORIZACION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_DENUNCIA)) {

				if (pgimInstanciaProcesDTOPadre.getNuExpedienteSiged() == null) {
					pgimPersonaAgenteSupervisado = this.obtenerPersonaJuridica(pgimInstanciaProcesDTOPadre);

					expedienteOutRO = this.crearExpedienteSiged(pgimPersonaAgenteSupervisado,
							pgimInstanciaProcesDTOActual.getIdProceso(), pgimDocumentoDTO, multipartFile, auditoriaDTO);
					nuExpedienteSiged = expedienteOutRO.getCodigoExpediente();
					pgimInstanciaProcesDTOPadre.setNuExpedienteSiged(nuExpedienteSiged);

					seHaCreadoExpedienteSiged = true;

					// Actualizar el expediente en el registro correspondiente:
					this.instanciaProcesService.persistirExpedienteSiged(pgimInstanciaProcesDTOPadre, auditoriaDTO);
							idDocumentoSiged = Long.parseLong(expedienteOutRO.getIdDocumento());
				} else {
					nuExpedienteSiged = pgimInstanciaProcesDTOPadre.getNuExpedienteSiged();
				}

			} else if (pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_SUPERVISION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_LIQUIDACION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_CONTRATO)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_FISCALIZACION)
					|| pgimInstanciaProcesDTOActual.getIdProceso().equals(ConstantesUtil.PARAM_PROCESO_MEDIDA_ADM)) {

				if (pgimInstanciaProcesDTOActual.getNuExpedienteSiged() == null) {
					pgimPersonaAgenteSupervisado = this.obtenerPersonaJuridica(pgimInstanciaProcesDTOActual);

					expedienteOutRO = this.crearExpedienteSiged(pgimPersonaAgenteSupervisado,
							pgimInstanciaProcesDTOActual.getIdProceso(), pgimDocumentoDTO, multipartFile, auditoriaDTO);

					// Si hay un error en el consumo del servicio SIGED para crear el expediente,
					// debe enviar el error
					if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
						throw new PgimException(TipoResultado.ERROR, expedienteOutRO.getMessage());
					}

					seHaCreadoExpedienteSiged = true;

					nuExpedienteSiged = expedienteOutRO.getCodigoExpediente();

					pgimInstanciaProcesDTOActual.setNuExpedienteSiged(nuExpedienteSiged);

					// Actualizar el expediente en el registro correspondiente:
					this.instanciaProcesService.persistirExpedienteSiged(pgimInstanciaProcesDTOActual, auditoriaDTO);
					idDocumentoSiged = Long.parseLong(expedienteOutRO.getIdDocumento());
				} else {
					nuExpedienteSiged = pgimInstanciaProcesDTOActual.getNuExpedienteSiged();
				}
			}

			Map<String, Object> datos = new HashMap<>();
			datos.put("nuExpedienteSiged", nuExpedienteSiged);
			datos.put("idDocumentoSiged", idDocumentoSiged);
			datos.put("seHaCreadoExpedienteSiged", seHaCreadoExpedienteSiged);
			datos.put("idInstanciaProceso", pgimInstanciaProcesDTOActual.getIdInstanciaProceso());

			return datos;

		}

		public String obtenerNuSiged(String nuExpedienteSiged, Long coDocumentoSiged, AuditoriaDTO auditoriaDTO) throws Exception{
			Documentos documentosYArchivosSiged = documentoService
					.obtenerExpedienteDocumentoSiged(nuExpedienteSiged, "0", auditoriaDTO);

			String nuDocSiged = "";
			if (documentosYArchivosSiged.getListaDocumento() != null
					|| documentosYArchivosSiged.getListaDocumento().size() != 0) {

				for (Documento documentoSiged : documentosYArchivosSiged.getListaDocumento()) {
					if (coDocumentoSiged.toString().equals(documentoSiged.getIdDocumento())) {
						nuDocSiged = documentoSiged.getNroDocumento();	
						break;
					}
				}
			}
			return nuDocSiged;
		}
	public void tablaUMAsociadas(XWPFDocument documento, Long idUnidadMinera, int ancho){
		List<PgimUnidadMineraDTO> listaUmAsociadas = this.unidadMineraRepository.listarUmAsociadas(idUnidadMinera);
		List<XWPFParagraph> paragraphs = documento.getParagraphs();
		for (int i = 0; i < paragraphs.size(); i++) {
			XWPFParagraph paragraph = paragraphs.get(i);
			List<XWPFRun> runs = paragraph.getRuns();
			for (int j = 0; j < runs.size(); j++) {
				XWPFRun run = runs.get(j);
				String text = run.getText(run.getTextPosition());
				if (text != null && text.contains("tabla_UMAsociadas")) {
					paragraph.removeRun(j);

					XWPFTable tableUMAsociadas = PoiWordUtil.createTableInSpecificPosition(paragraph, documento, ancho);

					// Primera fila					
					XWPFTableRow tableUMAsociadasHeader = PoiWordUtil.createTableCell(tableUMAsociadas, null,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 4764, 0, 0, 0,
							ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, "Unidades fiscalizables asociadas", 8, false);
					tableUMAsociadasHeader = PoiWordUtil.createTableCell(tableUMAsociadas, tableUMAsociadasHeader,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 4764, 0, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
					tableUMAsociadasHeader = PoiWordUtil.createTableCell(tableUMAsociadas, tableUMAsociadasHeader,
							XWPFVertAlign.CENTER, 220, "FFFFFF", 4764, 0, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "", 8, false);
					
					// Segunda Fila
					XWPFTableRow tableUMAsociadasRowOne = PoiWordUtil.createTableCell(tableUMAsociadas, null,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 4764, 1, 0, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Código de la unidad fiscalizable", 8, true);

					tableUMAsociadasRowOne = PoiWordUtil.createTableCell(tableUMAsociadas, tableUMAsociadasRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 4764, 1, 1, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Nombre de la unidad fiscalizable", 8, true);

					tableUMAsociadasRowOne = PoiWordUtil.createTableCell(tableUMAsociadas, tableUMAsociadasRowOne,
							XWPFVertAlign.CENTER, 220, "D9D9D9", 4764, 1, 2, 0,
							ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0, "Tipo de unidad fiscalizable", 8, true);

					int cant = 1;
					if (listaUmAsociadas != null && listaUmAsociadas.size() > 0) {
						for (int k = 0; k < listaUmAsociadas.size(); k++) {
							cant++;

							XWPFTableRow tableHechosRow = PoiWordUtil.createTableCell(tableUMAsociadas, null,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4764, cant, 0, 0,
									ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
									listaUmAsociadas.get(k).getCoUnidadMinera(), 8, false);
							tableHechosRow = PoiWordUtil.createTableCell(tableUMAsociadas, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4764, cant, 1, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaUmAsociadas.get(k).getNoUnidadMinera(), 8, false);
							tableHechosRow = PoiWordUtil.createTableCell(tableUMAsociadas, tableHechosRow,
									XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4764, cant, 2, 0,
									ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
									listaUmAsociadas.get(k).getDescIdTipoUnidadMinera(), 8, false);
						
						}
								// PoiWordUtil.mergeCellVertically(tableHechos, 4, 1, cant);

					}else{
						XWPFTableRow tableHechosRowVacio = PoiWordUtil.createTableCell(tableUMAsociadas, null,
								XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4764, 2, 0, 0,
								ParagraphAlignment.CENTER, LineSpacingRule.EXACT, 0, 0, 
								"Sin registros", 8, false);
						tableHechosRowVacio = PoiWordUtil.createTableCell(tableUMAsociadas, tableHechosRowVacio,
								XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4764, 2, 1, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
								"", 8, false);
						tableHechosRowVacio = PoiWordUtil.createTableCell(tableUMAsociadas, tableHechosRowVacio,
								XWPFVertAlign.CENTER, 200, "FFFFFF", /* TableWidthType.PCT, */4764, 2, 2, 0,
								ParagraphAlignment.LEFT, LineSpacingRule.EXACT, 0, 0,
								"", 8, false);

						PoiWordUtil.mergeCellHorizontally(tableUMAsociadas, 2, 0, 2);
					}

					PoiWordUtil.mergeCellHorizontally(tableUMAsociadas, 0, 0, 2);

				}
			}
		}
	}

	@Override
	public PgimPasoProcesoDTO etiquetarNotificacion(Long idInstanciaPasoActual) {
		return this.pasoProcesoRepository.obtenerpgimPasoProcesoDTOetiquetar(idInstanciaPasoActual);
	}

	@Override
	public PgimDocEtiquetaNotif obtenerEtiquetaDocNotif(Long idDocEtiquetaNotif) {
		return this.docEtiquetaNotifRepository.findById(idDocEtiquetaNotif).orElse(null);
	}
	
	@Override
	@Transactional(readOnly = false)
	public PgimDocEtiquetaNotifDTO etiquetaDocNotif(PgimDocEtiquetaNotifDTO pgimDocEtiquetaNotifDTO, PgimDocEtiquetaNotif pgimDocEtiquetaNotifActual, AuditoriaDTO auditoriaDTO) {
		
		PgimDocEtiquetaNotif pgimDocEtiquetaNotif = new PgimDocEtiquetaNotif();

		pgimDocEtiquetaNotif.setDocumentoEtiquetado( new PgimDocumento());
			pgimDocEtiquetaNotif.getDocumentoEtiquetado().setIdDocumento(pgimDocEtiquetaNotifDTO.getIdDocumentoEtiquetado());

		pgimDocEtiquetaNotif.setInstanciaPaso(new PgimInstanciaPaso());
		pgimDocEtiquetaNotif.getInstanciaPaso().setIdInstanciaPaso(pgimDocEtiquetaNotifDTO.getIdInstanciaPaso());

		pgimDocEtiquetaNotif.setFlEtiquetaNotifActiva(ConstantesUtil.IND_ACTIVO);

		pgimDocEtiquetaNotif.setEsRegistro(ConstantesUtil.IND_ACTIVO);
		pgimDocEtiquetaNotif.setFeCreacion(auditoriaDTO.getFecha());
		pgimDocEtiquetaNotif.setUsCreacion(auditoriaDTO.getUsername());
		pgimDocEtiquetaNotif.setIpCreacion(auditoriaDTO.getTerminal());

		PgimDocEtiquetaNotif pgimDocEtiquetaNotifActiva = this.docEtiquetaNotifRepository.save(pgimDocEtiquetaNotif);
		PgimDocEtiquetaNotifDTO rpta = this.docEtiquetaNotifRepository.pgimDocEtiquetaNotifById(pgimDocEtiquetaNotifActiva.getIdDocEtiquetaNotif()) ;
		
		return rpta;
	}

	@Override
	@Transactional(readOnly = false)
	public PgimDocEtiquetaNotifDTO quitarEtiquetaDocNotif(PgimDocEtiquetaNotifDTO pgimDocEtiquetaNotifDTO, PgimDocEtiquetaNotif pgimDocEtiquetaNotifActual, AuditoriaDTO auditoriaDTO) {
		
			pgimDocEtiquetaNotifActual.setFlEtiquetaNotifActiva(ConstantesUtil.IND_INACTIVO);
			pgimDocEtiquetaNotifActual.setFeActualizacion(auditoriaDTO.getFecha());
			pgimDocEtiquetaNotifActual.setUsActualizacion(auditoriaDTO.getUsername());
			pgimDocEtiquetaNotifActual.setIpActualizacion(auditoriaDTO.getTerminal());

			PgimDocEtiquetaNotif pgimDocEtiquetaActualIna = this.docEtiquetaNotifRepository.save(pgimDocEtiquetaNotifActual);
			PgimDocEtiquetaNotifDTO rpta = this.docEtiquetaNotifRepository.pgimDocEtiquetaNotifById(pgimDocEtiquetaActualIna.getIdDocEtiquetaNotif()) ;


		return rpta;
	}

	@Override
	public String verificarUOrganicaYNumerar(PgimDocumentoDTO pgimDocumentoDTO, AuditoriaDTO auditoriaDTO) throws Exception {
		
		PgimInstanPasoAuxDTO pgimInstanPasoAuxDTO = this.flujoTrabajoService.obtenerInstanciaPasoAuxPorId(pgimDocumentoDTO.getDescIdInstanciaPasoActual());
		PgimInstanciaPasoDTO pgimInstanPasoDTO = this.instanciaPasoRepository.obtenerInstanciaPasoPorId(pgimInstanPasoAuxDTO.getIdInstanciaPaso());
		PgimInstanciaProces pgimInstanciaProces = instanciaProcesService.obtenerInstanciaProcesoPorId(pgimInstanPasoAuxDTO.getIdInstanciaProceso());
		PgimRolProcesoDTO pgimRolProcesoDTO = this.rolProcesoRepository.obtenerRolPorID(pgimInstanPasoAuxDTO.getIdRolProcesoDestino());

		Long idProceso = pgimRolProcesoDTO.getIdProceso();
		Long idUnidadOrganica = 0L;
		String coUnidadOrganica = "";
		Long coUsuarioSigedNumerador = 0L;
		String noUsuarioSigedNumerador = "";
		String flgEnumerado = "0"; //valores posibles 0: No, 1: Sí
		String mensajeError = "";
		boolean ctrlError = false;

		if(pgimRolProcesoDTO.getIdUnidadOrganica() != null){
			idUnidadOrganica = pgimRolProcesoDTO.getIdUnidadOrganica();
		}else{				

			if(idProceso.equals(ConstProceso.FISCALIZACION)){
				PgimSupervision pgimSupervision = this.supervisionRepository.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);
				coUnidadOrganica = pgimSupervision.getPgimPrgrmSupervision().getDivisionSupervisora().getCoClaveTexto();

			}else if(idProceso.equals(ConstProceso.PAS)){
				PgimPas pgimPas = this.pasRepository.findById(pgimInstanciaProces.getCoTablaInstancia()).orElse(null);
				coUnidadOrganica = pgimPas.getPgimSupervision().getPgimPrgrmSupervision().getDivisionSupervisora().getCoClaveTexto();

			}

			PgimUnidadOrganicaDTO pgimUnidadOrganicaDTO = this.unidadOrganicaRepository.obtenerUnidadOrganicaPorCod(coUnidadOrganica);
			idUnidadOrganica = pgimUnidadOrganicaDTO.getIdUnidadOrganica();
		}

		PgimUnidadOrganica pgimUnidadOrganica = this.unidadOrganicaRepository.findById(idUnidadOrganica).orElse(null);
		coUsuarioSigedNumerador = pgimUnidadOrganica.getCoUsuarioSigedNumerador();
		noUsuarioSigedNumerador = pgimUnidadOrganica.getNoUsuarioSigedNumerador();

		//AuditoriaTemp para la enumeración con usuarios virtuales
		AuditoriaDTO auditoriaDTOTemp = new AuditoriaDTO();
		auditoriaDTOTemp.setUsername(noUsuarioSigedNumerador);
		auditoriaDTOTemp.setCoUsuarioSiged(coUsuarioSigedNumerador.toString());
		auditoriaDTOTemp.setIdRolSiged(ConstantesUtil.PARAM_ID_ROL_USUARIO_FINAL);

		List<PgimPersonalOsiCargoDTO> lPgimPersonalOsiCargoDTO = this.personalOsiCargoRepository.listarPersonalOsiEncargaturas(pgimInstanPasoAuxDTO.getIdPersonaDestino(), idUnidadOrganica);
		if(lPgimPersonalOsiCargoDTO.size() > 0 ){
			
			if(!lPgimPersonalOsiCargoDTO.get(0).getFlPrincipal().equals(ConstantesUtil.IND_ACTIVO)){
				
				String mensajeAsunto = String.format("PGIM: %s ---> %s", pgimInstanPasoAuxDTO.getNoPasoProcesoDestino(), "Enumerar con usuario ficticio");
				String mensajeContenido = "Enviado solamente para enumerar documento debido a que el usuario no corresponde a la unidad orgánica";
				
				final String noUsuarioRemitente =  auditoriaDTO.getUsername();;
				final String coUsuarioSigedOrigen = this.flujoTrabajoService.obtenerCoUsuarioSigedPorNombreUsuario(noUsuarioRemitente);
				final Long coUsuarioSigedRemitente = new Long(coUsuarioSigedOrigen);

				if(idProceso.equals(ConstProceso.FISCALIZACION)){
					
					try {
						// reenviar el expediente al usuario ficticio
						ExpedienteOutRO expedienteOutRO = this.sigedSoapService.reenviarExpediente(mensajeAsunto, mensajeContenido, coUsuarioSigedNumerador, pgimDocumentoDTO.getNuExpedienteSiged(),
								Integer.parseInt(ConstantesUtil.IND_REQ_APROBACION_NO), coUsuarioSigedRemitente.intValue(), Integer.parseInt(auditoriaDTO.getIdRolSiged()));
						
						if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
							final String mensajeExcepcionControlada = String.format(
									"Ha ocurrido un problema al reenviar el expediente Siged al usuario ficticio (Error: %s, Descripción: %s)",
									expedienteOutRO.getErrorCode(), expedienteOutRO.getMessage());
							throw new PgimException(TipoResultado.ERROR, mensajeExcepcionControlada);
						}

						// enumerar documento
						EnumerarDocumentoOutRO enumerarDocumentoOutRO = this.enumeraDocumentoSiged( pgimDocumentoDTO.getCoDocumentoSiged(), auditoriaDTOTemp);

						if (!enumerarDocumentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
							ctrlError = true;
							flgEnumerado = "0";
							mensajeError = enumerarDocumentoOutRO.getMessage();		
							log.error("Error al enumerar documento " +pgimDocumentoDTO.getCoDocumentoSiged() + ": " + mensajeError);
						}

						// reenviar el expediente del usuario ficticio hacia usuario origen 
						mensajeAsunto = String.format("PGIM: %s ---> %s", "Enumerar con usuario ficticios", pgimInstanPasoAuxDTO.getNoPasoProcesoDestino());
						mensajeContenido = "Devolución del expediente por el usuario ficticio";
						expedienteOutRO = this.sigedSoapService.reenviarExpediente(mensajeAsunto, mensajeContenido, coUsuarioSigedRemitente, pgimDocumentoDTO.getNuExpedienteSiged(),
								Integer.parseInt(ConstantesUtil.IND_REQ_APROBACION_NO), coUsuarioSigedNumerador.intValue(), Integer.parseInt(auditoriaDTO.getIdRolSiged()));
						
						if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
							final String mensajeExcepcionControlada = String.format(
									"Ha ocurrido un problema al reenviar el expediente Siged desde el usuario ficticio hacias el usuario origen (Error: %s, Descripción: %s)",
									expedienteOutRO.getErrorCode(), expedienteOutRO.getMessage());
							throw new PgimException(TipoResultado.ERROR, mensajeExcepcionControlada);
						}

						if(ctrlError == true)
							throw new PgimException(TipoResultado.ERROR, mensajeError);

						flgEnumerado = "1";

					} catch (final PgimException e) {
						log.error(e.getMensaje(), e);
						throw new PgimException(TipoResultado.ERROR, e.getMensaje());
						
					} catch (final Exception e) {
						log.error(e.getMessage(), e);
						throw new PgimException(TipoResultado.ERROR, "Ha ocurrido un problema al reenviar el expediente Siged");
					}
				}else if(idProceso.equals(ConstProceso.PAS)){

					if(pgimInstanPasoDTO.getIdTipoSubflujo() != null && 
							pgimInstanPasoDTO.getIdTipoSubflujo().equals(ConstantesUtil.PARAM_TIPO_SUBFLUJO_SECUNDARIO)){
						
							// Tomamos el usuario principal actual de la instancia de proceso
							String noUsuarioDestinatario = pgimInstanciaProces.getNoUsuarioPrincipal();
							String noUsuarioDestinatarioAdicional = noUsuarioSigedNumerador;
							List<String> lUsuarioDestinatario = new ArrayList<String>();
									
							// Seguimos enviando en subflujo al expediente SIGED
							lUsuarioDestinatario.add(noUsuarioDestinatarioAdicional);
							
							if (noUsuarioDestinatario == null) {
								throw new PgimException(TipoResultado.ERROR, "No se ha obtenido el usuario principal para envío del subflujo");
							}

							// reenviar el expediente al usuario ficticio
							this.flujoTrabajoService.reenviarSubflujoExpediente(pgimDocumentoDTO.getNuExpedienteSiged(), noUsuarioRemitente,
									noUsuarioDestinatario, lUsuarioDestinatario,
									mensajeAsunto, mensajeContenido,
									auditoriaDTO);

							// enumerar documento
							EnumerarDocumentoOutRO enumerarDocumentoOutRO = this.enumeraDocumentoSiged( pgimDocumentoDTO.getCoDocumentoSiged(), auditoriaDTOTemp);	

							if (!enumerarDocumentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
								ctrlError = true;
								flgEnumerado = "0";
								mensajeError = enumerarDocumentoOutRO.getMessage();	
								log.error("Error al enumerar documento " +pgimDocumentoDTO.getCoDocumentoSiged() + ": " + mensajeError);
							}

							// reenviar el expediente del usuario ficticio hacias usuario origen 
							mensajeAsunto = String.format("PGIM: %s ---> %s", "Enumerar con usuario ficticios", pgimInstanPasoAuxDTO.getNoPasoProcesoDestino());
							mensajeContenido = "Devolución del expediente por el usuario ficticio";
							lUsuarioDestinatario = new ArrayList<String>(); 
							lUsuarioDestinatario.add(noUsuarioRemitente); 
							this.flujoTrabajoService.reenviarSubflujoExpediente(pgimDocumentoDTO.getNuExpedienteSiged(), noUsuarioSigedNumerador,
									noUsuarioDestinatario, lUsuarioDestinatario,
									mensajeAsunto, mensajeContenido,
									auditoriaDTO);

							if(ctrlError == true)
								throw new PgimException(TipoResultado.ERROR, mensajeError);

							flgEnumerado = "1";
					}else{

							try {

								// reenviar el expediente al usuario ficticio
								ExpedienteOutRO expedienteOutRO = this.sigedSoapService.reenviarExpediente(mensajeAsunto, mensajeContenido, coUsuarioSigedNumerador, pgimDocumentoDTO.getNuExpedienteSiged(),
										Integer.parseInt(ConstantesUtil.IND_REQ_APROBACION_NO), coUsuarioSigedRemitente.intValue(), Integer.parseInt(auditoriaDTO.getIdRolSiged()));
								
								if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
									final String mensajeExcepcionControlada = String.format(
											"Ha ocurrido un problema al reenviar el expediente Siged al usuario ficticio (Error: %s, Descripción: %s)",
											expedienteOutRO.getErrorCode(), expedienteOutRO.getMessage());
									throw new PgimException(TipoResultado.ERROR, mensajeExcepcionControlada);
								}
							
								EnumerarDocumentoOutRO enumerarDocumentoOutRO = this.enumeraDocumentoSiged( pgimDocumentoDTO.getCoDocumentoSiged(), auditoriaDTOTemp);
								
								if (!enumerarDocumentoOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
									ctrlError = true;
									flgEnumerado = "0";
									mensajeError = enumerarDocumentoOutRO.getMessage();	
									log.error("Error al enumerar documento " +pgimDocumentoDTO.getCoDocumentoSiged() + ": " + mensajeError);
								}

								// reenviar el expediente del usuario ficticio hacias usuario origen 
								mensajeAsunto = String.format("PGIM: %s ---> %s", "Enumerar con usuario ficticio", pgimInstanPasoAuxDTO.getNoPasoProcesoDestino());
								mensajeContenido = "Devolución del expediente por el usuario ficticio";
								expedienteOutRO = this.sigedSoapService.reenviarExpediente(mensajeAsunto, mensajeContenido, coUsuarioSigedRemitente, pgimDocumentoDTO.getNuExpedienteSiged(),
										Integer.parseInt(ConstantesUtil.IND_REQ_APROBACION_NO), coUsuarioSigedNumerador.intValue(), Integer.parseInt(auditoriaDTO.getIdRolSiged()));
								
								if (!expedienteOutRO.getResultCode().equals(ConstantesUtil.PARAM_RESULTADO_SUCCESS)) {
									final String mensajeExcepcionControlada = String.format(
											"Ha ocurrido un problema al reenviar el expediente Siged al usuario ficticio (Error: %s, Descripción: %s)",
											expedienteOutRO.getErrorCode(), expedienteOutRO.getMessage());
									throw new PgimException(TipoResultado.ERROR, mensajeExcepcionControlada);
								}

								if(ctrlError == true)
									throw new PgimException(TipoResultado.ERROR, mensajeError);

								flgEnumerado = "1";

							} catch (final PgimException e) {
								log.error(e.getMensaje(), e);
								throw new PgimException(TipoResultado.ERROR, e.getMensaje());
								
							} catch (final Exception e) {
								log.error(e.getMessage(), e);
								throw new PgimException(TipoResultado.ERROR, "Ha ocurrido un problema al reenviar el expediente Siged");
							}
					}
				}

			}

		}else{
			String mensaje = "No es posible enumerar el documento/archivo debido a que usted no pertenece a la unidad orgánica esperada, a saber: "+pgimUnidadOrganica.getNoUnidadOrganica()+". Por favor verifique si debe contar con una encargatura en esta unidad, si no es así, entonces solicite al administrador del personal del Osinergmin en la PGIM que registre su encargatura";
			log.error(mensaje);
			throw new PgimException(TipoResultado.WARNING, mensaje);
		}

		return flgEnumerado;
	}

	
	public byte[] generarReporteIndicadorGeotecnicoEXCEL_v2(PgimIndicadorGeotecnicoAuxDTO filtroIndicadorGeotecnicoAuxDTO) throws Exception {

			int pageNo = 0; 
			
			int pageSize = (Integer) filtroIndicadorGeotecnicoAuxDTO.getCantidadRegistros();

			Pageable paging = PageRequest.of(pageNo, pageSize);
			Page<PgimIndicadorGeotecnicoAuxDTO> pagedResult = this.documentoService.listarIndicadorGeotecnico(filtroIndicadorGeotecnicoAuxDTO, paging);

			List<PgimIndicadorGeotecnicoAuxDTO> pgimIndicadorGeotecnicoAuxDTO = pagedResult.getContent();

			// Crear una nueva instancia de SXSSFWorkbook
			SXSSFWorkbook workbook = new SXSSFWorkbook(-1);

			SXSSFSheet sheet = workbook.createSheet("MV_OSIN_INDICADOR_GEOTEC");
    
            // Crea las fuentes para los estilos
            Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14, IndexedColors.BLACK.getIndex());
            Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12, IndexedColors.BLACK.getIndex());
            Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10, IndexedColors.BLACK.getIndex());
    
            // Creando los estilos para las celdas
            CellStyle titleCS = workbook.createCellStyle();
            titleCS.setFont(titleFont);
            titleCS.setAlignment(HorizontalAlignment.CENTER);
    
            CellStyle subTitleCS = workbook.createCellStyle();
            subTitleCS.setFont(tableHeaderFont);
            subTitleCS.setAlignment(HorizontalAlignment.LEFT);
    
            CellStyle subTitleCS2 = workbook.createCellStyle();
            subTitleCS2.setFont(bodyFont);
            subTitleCS2.setAlignment(HorizontalAlignment.LEFT);
    
            CellStyle tableHeaderCS = workbook.createCellStyle();
            tableHeaderCS.setFont(tableHeaderFont);
            tableHeaderCS.setBorderBottom(BorderStyle.THIN);
            tableHeaderCS.setBorderTop(BorderStyle.THIN);
            tableHeaderCS.setBorderRight(BorderStyle.THIN);
            tableHeaderCS.setBorderLeft(BorderStyle.THIN);
            tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
            tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
            tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
    
            CellStyle tableBodyCS = workbook.createCellStyle();
            tableBodyCS.setFont(bodyFont);
            tableBodyCS.setBorderBottom(BorderStyle.THIN);
            tableBodyCS.setBorderTop(BorderStyle.THIN);
            tableBodyCS.setBorderRight(BorderStyle.THIN);
            tableBodyCS.setBorderLeft(BorderStyle.THIN);
    
            // Crea el titulo
            Row headerRow = sheet.createRow(4);
            Cell titleCell = headerRow.createCell(0);
            titleCell.setCellValue(filtroIndicadorGeotecnicoAuxDTO.getDeTituloReporte());
            titleCell.setCellStyle(titleCS);
            sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 6));
    
			// Subtitulo de los periodos iniciales y finales
			Row headerRowPeriodos = sheet.createRow(5);
			Cell subTitleCell = headerRowPeriodos.createCell(0);
			subTitleCell.setCellValue("Criterios de filtro aplicado: Periodo inicial: " + filtroIndicadorGeotecnicoAuxDTO.getDescFeInicio() + " - Periodo final: " + filtroIndicadorGeotecnicoAuxDTO.getDescFeFin());
			sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, 6));

            // Fecha de generación
            Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9, IndexedColors.BLACK.getIndex());
            CellStyle fechaGeneracionStyle = workbook.createCellStyle();
            fechaGeneracionStyle.setFont(fechaGeneracionFont);
            fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);
    
            java.util.Date fechaActual = new Date();
            SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
            String fechaDeGeneracion = "Generado por la PGIM el: "+ sdfg.format(fechaActual);
            
            Cell fechaGenCell = headerRow.createCell(7);
            fechaGenCell.setCellValue(fechaDeGeneracion);
            fechaGenCell.setCellStyle(fechaGeneracionStyle);
			subTitleCell.setCellStyle(fechaGeneracionStyle);

            // Crea un espacio en blanco
            Row emptyRow = sheet.createRow(6);
            Cell emptyCell = emptyRow.createCell(0);
            emptyCell.setCellValue("");
            sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));
    
            // Creamos las cabeceras de la tabla
            Row tablaCabecera1 = sheet.createRow(7);
            
            Cell tc1Cell0 = tablaCabecera1.createCell(0);
            tc1Cell0.setCellValue("ANOPRO");
            tc1Cell0.setCellStyle(tableHeaderCS);
            CellRangeAddress mrAnoPro = new CellRangeAddress(7, 8, 0, 0);
            sheet.addMergedRegion(mrAnoPro);
            
            Cell tc1Cell1 = tablaCabecera1.createCell(1);
            tc1Cell1.setCellValue("MES");
            tc1Cell1.setCellStyle(tableHeaderCS);
            CellRangeAddress mrMes = new CellRangeAddress(7, 8, 1, 1);
            sheet.addMergedRegion(mrMes);
            
            Cell tc1Cell2 = tablaCabecera1.createCell(2);
            tc1Cell2.setCellValue("ID_CLIENTE");
            tc1Cell2.setCellStyle(tableHeaderCS);
            CellRangeAddress mrIdCliente = new CellRangeAddress(7, 8, 2, 2);
            sheet.addMergedRegion(mrIdCliente);
    
            Cell tc1Cell3 = tablaCabecera1.createCell(3);
            tc1Cell3.setCellValue("RUC");
            tc1Cell3.setCellStyle(tableHeaderCS);
            CellRangeAddress mrRuc = new CellRangeAddress(7, 8, 3, 3);
            sheet.addMergedRegion(mrRuc);
    
            Cell tc1Cell4 = tablaCabecera1.createCell(4);
            tc1Cell4.setCellValue("TITULAR_MINERO");
            tc1Cell4.setCellStyle(tableHeaderCS);
            CellRangeAddress mrTitularMinero = new CellRangeAddress(7, 8, 4, 4);
            sheet.addMergedRegion(mrTitularMinero);
     
            Cell tc1Cell5 = tablaCabecera1.createCell(5);
            tc1Cell5.setCellValue("ESTRATO");
            tc1Cell5.setCellStyle(tableHeaderCS);
            CellRangeAddress mrEstrato = new CellRangeAddress(7, 8, 5, 5);
            sheet.addMergedRegion(mrEstrato);
    
            Cell tc1Cell6 = tablaCabecera1.createCell(6);
            tc1Cell6.setCellValue("CODIGO");
            tc1Cell6.setCellStyle(tableHeaderCS);
            CellRangeAddress mrCodigo = new CellRangeAddress(7, 8, 6, 6);
            sheet.addMergedRegion(mrCodigo);
    
            Cell tc1Cell7 = tablaCabecera1.createCell(7);
            tc1Cell7.setCellValue("UNIDAD");
            tc1Cell7.setCellStyle(tableHeaderCS);
            CellRangeAddress mrUnidad = new CellRangeAddress(7, 8, 7, 7);
            sheet.addMergedRegion(mrUnidad);
    
            Cell tc1Cell8 = tablaCabecera1.createCell(8);
            tc1Cell8.setCellValue("GRUPO");
            tc1Cell8.setCellStyle(tableHeaderCS);
            CellRangeAddress mrGrupo = new CellRangeAddress(7, 8, 8, 8);
            sheet.addMergedRegion(mrGrupo);
    
            Cell tc1Cell9 = tablaCabecera1.createCell(9);
            tc1Cell9.setCellValue("INDICADOR");
            tc1Cell9.setCellStyle(tableHeaderCS);
            CellRangeAddress mrIndicador = new CellRangeAddress(7, 8, 9, 9);
            sheet.addMergedRegion(mrIndicador);
    
            Cell tc1Cell10 = tablaCabecera1.createCell(10);
            tc1Cell10.setCellValue("VALOR");
            tc1Cell10.setCellStyle(tableHeaderCS);
            CellRangeAddress mrValor = new CellRangeAddress(7, 8, 10, 10);
            sheet.addMergedRegion(mrValor);
    
            Cell tc1Cell11 = tablaCabecera1.createCell(11);
            tc1Cell11.setCellValue("UNIDAD_MEDIDA");
            tc1Cell11.setCellStyle(tableHeaderCS);
            CellRangeAddress mrUnidadMedida = new CellRangeAddress(7, 8, 11, 11);
            sheet.addMergedRegion(mrUnidadMedida);
    
    
            // Aplicamos los bordes a las celdas fusionadas
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrAnoPro, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrMes, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrIdCliente, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrRuc, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrTitularMinero, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrEstrato, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrCodigo, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrUnidad, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrGrupo, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrIndicador, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrValor, sheet, workbook);
            PoiExcelUtil.setBorderToMergeCell_v2(BorderStyle.THIN, mrUnidadMedida, sheet, workbook);
    
            // Creamos el detalle de la tabla
            int rowNum = 8;
            for (PgimIndicadorGeotecnicoAuxDTO obj : pgimIndicadorGeotecnicoAuxDTO) {
                Row row = sheet.createRow(rowNum+1);
    
                Cell cell0 = row.createCell(0);
                cell0.setCellValue(obj.getAnioPro());
                cell0.setCellStyle(tableBodyCS);
                
                Cell cell1 = row.createCell(1);
                cell1.setCellValue(obj.getMes());
                cell1.setCellStyle(tableBodyCS);
                
                Cell cell2 = row.createCell(2);
                cell2.setCellValue(obj.getIdCliente());
                cell2.setCellStyle(tableBodyCS);

                Cell cell3 = row.createCell(3);
                cell3.setCellValue(obj.getRuc());
                cell3.setCellStyle(tableBodyCS);
    
                Cell cell4 = row.createCell(4);
                cell4.setCellValue(obj.getTitularMinero());
                cell4.setCellStyle(tableBodyCS);
    
                Cell cell5 = row.createCell(5);
                cell5.setCellValue(obj.getEstrato());
                cell5.setCellStyle(tableBodyCS);
    
                Cell cell6 = row.createCell(6);
                cell6.setCellValue(obj.getCodigo());
                cell6.setCellStyle(tableBodyCS);
    
                Cell cell7 = row.createCell(7);
                cell7.setCellValue(obj.getUnidad());
                cell7.setCellStyle(tableBodyCS);
    
                Cell cell8 = row.createCell(8);
                cell8.setCellValue(obj.getGrupo());
                cell8.setCellStyle(tableBodyCS);
    
                Cell cell9 = row.createCell(9);
                cell9.setCellValue(obj.getIndicador());
                cell9.setCellStyle(tableBodyCS);
    
                Cell cell10 = row.createCell(10);
                cell10.setCellValue(obj.getValor());
                cell10.setCellStyle(tableBodyCS);
    
                Cell cell11 = row.createCell(11);
                cell11.setCellValue(obj.getUnidadMedida());
                cell11.setCellStyle(tableBodyCS);
                
				// controlar manualmente cómo se vacían las filas en el disco
				if (rowNum % 200 == 0) {
					// retener 100 últimas filas y eliminar todas las demás
					((SXSSFSheet) sheet).flushRows(200);
				}

				rowNum++;
			}

			sheet.trackAllColumnsForAutoSizing();
			String[] columns = new String[11];
            // Resize a todas las columnas
            PoiExcelUtil.resizeAllColumnsInXSSFSheet(sheet, columns);
    
            // Resize a las columnas con merge field
            sheet.setColumnWidth(0, 3000);
            sheet.setColumnWidth(1, 2000);
            sheet.setColumnWidth(2, 3000);
            sheet.setColumnWidth(3, 4000);
            sheet.setColumnWidth(4, 18000);
            sheet.setColumnWidth(5, 11000);
            sheet.setColumnWidth(6, 3000);
            sheet.setColumnWidth(7, 11000);
            sheet.setColumnWidth(8, 11000);
            sheet.setColumnWidth(9, 15000);
            sheet.setColumnWidth(10, 15000);
            sheet.setColumnWidth(11, 5000);

            // obtener la imagen y convertirlo a base64
            String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
            InputStream iSteamReader = new FileInputStream(ruta);
            byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
            String base64 = Base64.getEncoder().encodeToString(imageBytes);
    
            // Insertar imagen logotipo
            this.estaminService.addImgExcelSXSSF(workbook, sheet, base64, 1, 1, 0.22, 1);
    
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            workbook.write(baos);
    
            byte[] archivo = baos.toByteArray();
    
			// cerrar el InputStream y ByteArrayOutputStream
			iSteamReader.close();
			baos.close();

			// Cerrar el libro de trabajo
			workbook.dispose();

            return archivo;
	}

	@Override
	public Page<PgimFiscaDetalleAuxDTO> listarDetalleFiscalizaciones(PgimFiscaDetalleAuxDTO pgimFiscaDetalleAuxDTO, Pageable paginador) throws Exception {
		
		/* SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
		String fechaFormateada = format.format(pgimFiscaDetalleAuxDTO.getFeInicioPrevistaFisca());

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		LocalDate feInicioPrevistaFisca = LocalDate.parse(fechaFormateada, formatter); */

		Page<PgimFiscaDetalleAuxDTO> lPgimFiscaDetalleAuxDTO = this.fiscaDetalleAuxRepository.listarDetalleFiscalizaciones(
			pgimFiscaDetalleAuxDTO.getNuAnioPlan(), 
			pgimFiscaDetalleAuxDTO.getIdDivisionSupervisora(), 
			pgimFiscaDetalleAuxDTO.getIdEspecialidad(), 
			pgimFiscaDetalleAuxDTO.getNuContrato(), 
			pgimFiscaDetalleAuxDTO.getIdTipoFiscaliza(), 
			pgimFiscaDetalleAuxDTO.getEsPropia(),
			pgimFiscaDetalleAuxDTO.getFeInicioPrevistaFisca(),
			pgimFiscaDetalleAuxDTO.getFeFinPrevistaFisca(), 
			pgimFiscaDetalleAuxDTO.getFeInicioRealFisca(), 
			pgimFiscaDetalleAuxDTO.getFeFinRealFisca(), 
			pgimFiscaDetalleAuxDTO.getNoPersonaDestino(), 
			paginador
			);

		return lPgimFiscaDetalleAuxDTO;
	}

	@Override
	public byte[] generarReporteDetalleFiscalizaciones(PgimFiscaDetalleAuxDTO filtro) throws Exception {

		int pageNo = 0;

		int pageSize = (Integer) filtro.getCantidadRegistros();

		Pageable paging = PageRequest.of(pageNo, pageSize);

		Page<PgimFiscaDetalleAuxDTO> pagedResult = this.fiscaDetalleAuxRepository.listarDetalleFiscalizaciones(
			filtro.getNuAnioPlan(), 
			filtro.getIdDivisionSupervisora(), 
			filtro.getIdEspecialidad(), 
			filtro.getNuContrato(), 
			filtro.getIdTipoFiscaliza(), 
			filtro.getEsPropia(), 
			filtro.getFeInicioPrevistaFisca(), 
			filtro.getFeFinPrevistaFisca(), 
			filtro.getFeInicioRealFisca(), 
			filtro.getFeFinRealFisca(), 
			filtro.getNoPersonaDestino(), 
			paging
			);

		List<PgimFiscaDetalleAuxDTO> lPgimFiscaDetalleAuxDTO = pagedResult.getContent();

		// Crear una nueva instancia de SXSSFWorkbook
		SXSSFWorkbook workbook = new SXSSFWorkbook(-1);

		SXSSFSheet sheet = workbook.createSheet("PGIM_VC_FISCA_DETALLE");

		// Crea las fuentes para los estilos
		Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14, IndexedColors.BLACK.getIndex());
		Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12, IndexedColors.BLACK.getIndex());
		Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10, IndexedColors.BLACK.getIndex());

		// Creando los estilos para las celdas
		CellStyle titleCS = workbook.createCellStyle();
		titleCS.setFont(titleFont);
		titleCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle subTitleCS = workbook.createCellStyle();
		subTitleCS.setFont(tableHeaderFont);
		subTitleCS.setAlignment(HorizontalAlignment.LEFT);

		CellStyle subTitleCS2 = workbook.createCellStyle();
		subTitleCS2.setFont(bodyFont);
		subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

		CellStyle tableHeaderCS = workbook.createCellStyle();
		tableHeaderCS.setFont(tableHeaderFont);
		tableHeaderCS.setBorderBottom(BorderStyle.THIN);
		tableHeaderCS.setBorderTop(BorderStyle.THIN);
		tableHeaderCS.setBorderRight(BorderStyle.THIN);
		tableHeaderCS.setBorderLeft(BorderStyle.THIN);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
		tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
		tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

		CellStyle tableBodyCS = workbook.createCellStyle();
		tableBodyCS.setFont(bodyFont);
		tableBodyCS.setBorderBottom(BorderStyle.THIN);
		tableBodyCS.setBorderTop(BorderStyle.THIN);
		tableBodyCS.setBorderRight(BorderStyle.THIN);
		tableBodyCS.setBorderLeft(BorderStyle.THIN);

		// Crea el titulo
		Row headerRow = sheet.createRow(4);
		Cell titleCell = headerRow.createCell(0);
		titleCell.setCellValue(filtro.getDeTituloReporte());
		titleCell.setCellStyle(titleCS);
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 6));

		// Fecha de generación
		Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9, IndexedColors.BLACK.getIndex());
		CellStyle fechaGeneracionStyle = workbook.createCellStyle();
		fechaGeneracionStyle.setFont(fechaGeneracionFont);
		fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

		java.util.Date fechaActual = new Date();
		SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
		String fechaDeGeneracion = "Generado por la PGIM el: " + sdfg.format(fechaActual);

		SimpleDateFormat transformarFechaPre = new SimpleDateFormat("dd'/'MM'/'yyyy");
		SimpleDateFormat transformarFechaReal = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm");

		Cell fechaGenCell = headerRow.createCell(7);
		fechaGenCell.setCellValue(fechaDeGeneracion);
		fechaGenCell.setCellStyle(fechaGeneracionStyle);

		// Crea un espacio en blanco
		Row emptyRow = sheet.createRow(6);
		Cell emptyCell = emptyRow.createCell(0);
		emptyCell.setCellValue("");
		sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));

		// Creamos las cabeceras de la tabla
		Row tablaCabecera1 = sheet.createRow(7);

		Cell tc1Cell0 = tablaCabecera1.createCell(0);
		tc1Cell0.setCellValue("AÑO DEL PLAN");
		tc1Cell0.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNuAnioPlan = new CellRangeAddress(7, 8, 0, 0);
		sheet.addMergedRegion(mrNuAnioPlan);

		Cell tc1Cell1 = tablaCabecera1.createCell(1);
		tc1Cell1.setCellValue("ESPECIALIDAD");
		tc1Cell1.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoEspecialidad = new CellRangeAddress(7, 8, 1, 1);
		sheet.addMergedRegion(mrNoEspecialidad);

		Cell tc1Cell2 = tablaCabecera1.createCell(2);
		tc1Cell2.setCellValue("DIVISIÓN SUPERVISORA");
		tc1Cell2.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoDivisionSupervisora = new CellRangeAddress(7, 8, 2, 2);
		sheet.addMergedRegion(mrNoDivisionSupervisora);

		Cell tc1Cell3 = tablaCabecera1.createCell(3);
		tc1Cell3.setCellValue("CÓDIGO DE FISCALIZACIÓN");
		tc1Cell3.setCellStyle(tableHeaderCS);
		CellRangeAddress mrCoFiscalizacion = new CellRangeAddress(7, 8, 3, 3);
		sheet.addMergedRegion(mrCoFiscalizacion);

		Cell tc1Cell4 = tablaCabecera1.createCell(4);
		tc1Cell4.setCellValue("EXPEDIENTE");
		tc1Cell4.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNuExpedienteFisca = new CellRangeAddress(7, 8, 4, 4);
		sheet.addMergedRegion(mrNuExpedienteFisca);

		Cell tc1Cell5 = tablaCabecera1.createCell(5);
		tc1Cell5.setCellValue("FECHA DE INICIO PREVISTA");
		tc1Cell5.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFeInicioPrevistaFisca = new CellRangeAddress(7, 8, 5, 5);
		sheet.addMergedRegion(mrFeInicioPrevistaFisca);

		Cell tc1Cell6 = tablaCabecera1.createCell(6);
		tc1Cell6.setCellValue("FECHA FIN PREVISTA");
		tc1Cell6.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFeFinPrevistaFisca = new CellRangeAddress(7, 8, 6, 6);
		sheet.addMergedRegion(mrFeFinPrevistaFisca);

		Cell tc1Cell7 = tablaCabecera1.createCell(7);
		tc1Cell7.setCellValue("FECHA DE INICIO REAL");
		tc1Cell7.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFeInicioRealFisca = new CellRangeAddress(7, 8, 7, 7);
		sheet.addMergedRegion(mrFeInicioRealFisca);

		Cell tc1Cell8 = tablaCabecera1.createCell(8);
		tc1Cell8.setCellValue("FECHA FIN REAL");
		tc1Cell8.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFeFinRealFisca = new CellRangeAddress(7, 8, 8, 8);
		sheet.addMergedRegion(mrFeFinRealFisca);

		Cell tc1Cell9 = tablaCabecera1.createCell(9);
		tc1Cell9.setCellValue("¿ES PROPIA?");
		tc1Cell9.setCellStyle(tableHeaderCS);
		CellRangeAddress mrEsPropia = new CellRangeAddress(7, 8, 9, 9);
		sheet.addMergedRegion(mrEsPropia);

		Cell tc1Cell10 = tablaCabecera1.createCell(10);
		tc1Cell10.setCellValue("TIPO DE FISCALIZACIÓN");
		tc1Cell10.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoTipoFiscaliza = new CellRangeAddress(7, 8, 10, 10);
		sheet.addMergedRegion(mrNoTipoFiscaliza);

		Cell tc1Cell11 = tablaCabecera1.createCell(11);
		tc1Cell11.setCellValue("SUBTIPO DE FISCALIZACIÓN");
		tc1Cell11.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoSubtipoFiscaliza = new CellRangeAddress(7, 8, 11, 11);
		sheet.addMergedRegion(mrNoSubtipoFiscaliza);

		Cell tc1Cell12 = tablaCabecera1.createCell(12);
		tc1Cell12.setCellValue("MOTIVO DE FISCALIZACIÓN");
		tc1Cell12.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoMotivoFiscaliza = new CellRangeAddress(7, 8, 12, 12);
		sheet.addMergedRegion(mrNoMotivoFiscaliza);

		Cell tc1Cell13 = tablaCabecera1.createCell(13);
		tc1Cell13.setCellValue("CÓDIGO UNIDAD FISCALIZABLE");
		tc1Cell13.setCellStyle(tableHeaderCS);
		CellRangeAddress mrCoUnidadFiscalizable = new CellRangeAddress(7, 8, 13, 13);
		sheet.addMergedRegion(mrCoUnidadFiscalizable);

		Cell tc1Cell14 = tablaCabecera1.createCell(14);
		tc1Cell14.setCellValue("UNIDAD FISCALIZABLE");
		tc1Cell14.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoUnidadFiscalizable = new CellRangeAddress(7, 8, 14, 14);
		sheet.addMergedRegion(mrNoUnidadFiscalizable);

		Cell tc1Cell15 = tablaCabecera1.createCell(15);
		tc1Cell15.setCellValue("RUC AGENTE FISCALIZADO");
		tc1Cell15.setCellStyle(tableHeaderCS);
		CellRangeAddress mrRucAgenteFiscalizado = new CellRangeAddress(7, 8, 15, 15);
		sheet.addMergedRegion(mrRucAgenteFiscalizado);

		Cell tc1Cell16 = tablaCabecera1.createCell(16);
		tc1Cell16.setCellValue("AGENTE FISCALIZADO");
		tc1Cell16.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoAgenteFiscalizado = new CellRangeAddress(7, 8, 16, 16);
		sheet.addMergedRegion(mrNoAgenteFiscalizado);

		Cell tc1Cell17 = tablaCabecera1.createCell(17);
		tc1Cell17.setCellValue("FASE DE ORIGEN");
		tc1Cell17.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoFaseOrigen = new CellRangeAddress(7, 8, 17, 17);
		sheet.addMergedRegion(mrNoFaseOrigen);

		Cell tc1Cell18 = tablaCabecera1.createCell(18);
		tc1Cell18.setCellValue("TAREA DE ORIGEN");
		tc1Cell18.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoTareaOrigen = new CellRangeAddress(7, 8, 18, 18);
		sheet.addMergedRegion(mrNoTareaOrigen);

		Cell tc1Cell19 = tablaCabecera1.createCell(19);
		tc1Cell19.setCellValue("FASE DESTINO");
		tc1Cell19.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoFaseDestino = new CellRangeAddress(7, 8, 19, 19);
		sheet.addMergedRegion(mrNoFaseDestino);

		Cell tc1Cell20 = tablaCabecera1.createCell(20);
		tc1Cell20.setCellValue("TAREA DESTINO");
		tc1Cell20.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoTareaDestino = new CellRangeAddress(7, 8, 20, 20);
		sheet.addMergedRegion(mrNoTareaDestino);

		Cell tc1Cell21 = tablaCabecera1.createCell(21);
		tc1Cell21.setCellValue("FECHA DE ASIGNACIÓN TAREA");
		tc1Cell21.setCellStyle(tableHeaderCS);
		CellRangeAddress mrFeAsignaTarea = new CellRangeAddress(7, 8, 21, 21);
		sheet.addMergedRegion(mrFeAsignaTarea);

		Cell tc1Cell22 = tablaCabecera1.createCell(22);
		tc1Cell22.setCellValue("MENSAJE TAREA");
		tc1Cell22.setCellStyle(tableHeaderCS);
		CellRangeAddress mrDeMensajeTarea = new CellRangeAddress(7, 8, 22, 22);
		sheet.addMergedRegion(mrDeMensajeTarea);

		Cell tc1Cell23 = tablaCabecera1.createCell(23);
		tc1Cell23.setCellValue("TIPO DE TRANSICIÓN");
		tc1Cell23.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoTipoTransicion = new CellRangeAddress(7, 8, 23, 23);
		sheet.addMergedRegion(mrNoTipoTransicion);

		Cell tc1Cell24 = tablaCabecera1.createCell(24);
		tc1Cell24.setCellValue("TIPO PERSONA ORIGEN");
		tc1Cell24.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoTipoPersonaOrigen = new CellRangeAddress(7, 8, 24, 24);
		sheet.addMergedRegion(mrNoTipoPersonaOrigen);

		Cell tc1Cell25 = tablaCabecera1.createCell(25);
		tc1Cell25.setCellValue("PERSONA ORIGEN");
		tc1Cell25.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNnoPersonaOrigen = new CellRangeAddress(7, 8, 25, 25);
		sheet.addMergedRegion(mrNnoPersonaOrigen);

		Cell tc1Cell26 = tablaCabecera1.createCell(26);
		tc1Cell26.setCellValue("TIPO PERSONA DESTINO");
		tc1Cell26.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoTipoPersonaDestino = new CellRangeAddress(7, 8, 26, 26);
		sheet.addMergedRegion(mrNoTipoPersonaDestino);

		Cell tc1Cell27 = tablaCabecera1.createCell(27);
		tc1Cell27.setCellValue("PERSONA DESTINO");
		tc1Cell27.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoPersonaDestino = new CellRangeAddress(7, 8, 27, 27);
		sheet.addMergedRegion(mrNoPersonaDestino);

		Cell tc1Cell28 = tablaCabecera1.createCell(28);
		tc1Cell28.setCellValue("NRO DE CONTRATO");
		tc1Cell28.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNuContrato = new CellRangeAddress(7, 8, 28, 28);
		sheet.addMergedRegion(mrNuContrato);

		Cell tc1Cell29 = tablaCabecera1.createCell(29);
		tc1Cell29.setCellValue("RUC DE EMPRESA SUPERVISORA");
		tc1Cell29.setCellStyle(tableHeaderCS);
		CellRangeAddress mrRucEmpresaSupervisora = new CellRangeAddress(7, 8, 29, 29);
		sheet.addMergedRegion(mrRucEmpresaSupervisora);

		Cell tc1Cell30 = tablaCabecera1.createCell(30);
		tc1Cell30.setCellValue("EMPRESA SUPERVISORA");
		tc1Cell30.setCellStyle(tableHeaderCS);
		CellRangeAddress mrNoEmpresaSupervisora = new CellRangeAddress(7, 8, 30, 30);
		sheet.addMergedRegion(mrNoEmpresaSupervisora);

		// Aplicamos los bordes a las celdas fusionadas
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNuAnioPlan, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoEspecialidad, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoDivisionSupervisora, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrCoFiscalizacion, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNuExpedienteFisca, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrFeInicioPrevistaFisca, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrFeFinPrevistaFisca, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrFeInicioRealFisca, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrFeFinRealFisca, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrEsPropia, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoTipoFiscaliza, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoSubtipoFiscaliza, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoMotivoFiscaliza, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrCoUnidadFiscalizable, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoUnidadFiscalizable, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrRucAgenteFiscalizado, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoAgenteFiscalizado, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoFaseOrigen, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoTareaOrigen, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoFaseDestino, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoTareaDestino, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrFeAsignaTarea, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrDeMensajeTarea, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoTipoTransicion, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoTipoPersonaOrigen, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNnoPersonaOrigen, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoTipoPersonaDestino, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoPersonaDestino, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNuContrato, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrRucEmpresaSupervisora, sheet, workbook);
		PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrNoEmpresaSupervisora, sheet, workbook);

		// Creamos el detalle de la tabla
		int rowNum = 8;
		for (PgimFiscaDetalleAuxDTO obj : lPgimFiscaDetalleAuxDTO) {
			Row row = sheet.createRow(rowNum + 1);

			Cell cell0 = row.createCell(0);
			cell0.setCellValue(obj.getNuAnioPlan());
			cell0.setCellStyle(tableBodyCS);

			Cell cell1 = row.createCell(1);
			cell1.setCellValue(obj.getNoEspecialidad());
			cell1.setCellStyle(tableBodyCS);

			Cell cell2 = row.createCell(2);
			cell2.setCellValue(obj.getNoDivisionSupervisora());
			cell2.setCellStyle(tableBodyCS);

			Cell cell3 = row.createCell(3);
			cell3.setCellValue(obj.getCoFiscalizacion());
			cell3.setCellStyle(tableBodyCS);

			Cell cell4 = row.createCell(4);
			cell4.setCellValue(obj.getNuExpedienteFisca());
			cell4.setCellStyle(tableBodyCS);

			String feInicioPrevistaFisca = null;
			if(obj.getFeInicioPrevistaFisca() != null){
				feInicioPrevistaFisca = transformarFechaPre.format(obj.getFeInicioPrevistaFisca());
			} else {
				feInicioPrevistaFisca = "";
			}
			Cell cell5 = row.createCell(5);
			cell5.setCellValue(feInicioPrevistaFisca);
			cell5.setCellStyle(tableBodyCS);

			String feFinPrevistaFisca = null;
			if(obj.getFeFinPrevistaFisca() != null){
				feFinPrevistaFisca = transformarFechaPre.format(obj.getFeFinPrevistaFisca());
			} else {
				feFinPrevistaFisca = "";
			}
			Cell cell6 = row.createCell(6);
			cell6.setCellValue(feFinPrevistaFisca);
			cell6.setCellStyle(tableBodyCS);

			String feInicioRealFisca = null;
			if(obj.getFeInicioRealFisca() != null){
				feInicioRealFisca = transformarFechaReal.format(obj.getFeInicioRealFisca());
			} else {
				feInicioRealFisca = "";
			}
			Cell cell7 = row.createCell(7);
			cell7.setCellValue(feInicioRealFisca);
			cell7.setCellStyle(tableBodyCS);

			String feFinRealFisca = null;

			if(obj.getFeFinRealFisca() != null){
				feFinRealFisca = transformarFechaReal.format(obj.getFeFinRealFisca());
			} else {
				feFinRealFisca = "";
			}
			Cell cell8 = row.createCell(8);
			cell8.setCellValue(feFinRealFisca);
			cell8.setCellStyle(tableBodyCS);

			Cell cell9 = row.createCell(9);
			cell9.setCellValue(obj.getEsPropia());
			cell9.setCellStyle(tableBodyCS);

			Cell cell10 = row.createCell(10);
			cell10.setCellValue(obj.getNoTipoFiscaliza());
			cell10.setCellStyle(tableBodyCS);

			Cell cell11 = row.createCell(11);
			cell11.setCellValue(obj.getNoSubtipoFiscaliza());
			cell11.setCellStyle(tableBodyCS);

			Cell cell12 = row.createCell(12);
			cell12.setCellValue(obj.getNoMotivoFiscaliza());
			cell12.setCellStyle(tableBodyCS);

			Cell cell13 = row.createCell(13);
			cell13.setCellValue(obj.getCoUnidadFiscalizable());
			cell13.setCellStyle(tableBodyCS);

			Cell cell14 = row.createCell(14);
			cell14.setCellValue(obj.getNoUnidadFiscalizable());
			cell14.setCellStyle(tableBodyCS);

			Cell cell15 = row.createCell(15);
			cell15.setCellValue(obj.getRucAgenteFiscalizado());
			cell15.setCellStyle(tableBodyCS);

			Cell cell16 = row.createCell(16);
			cell16.setCellValue(obj.getNoAgenteFiscalizado());
			cell16.setCellStyle(tableBodyCS);

			Cell cell17 = row.createCell(17);
			cell17.setCellValue(obj.getNoFaseOrigen());
			cell17.setCellStyle(tableBodyCS);

			Cell cell18 = row.createCell(18);
			cell18.setCellValue(obj.getNoTareaOrigen());
			cell18.setCellStyle(tableBodyCS);

			Cell cell19 = row.createCell(19);
			cell19.setCellValue(obj.getNoFaseDestino());
			cell19.setCellStyle(tableBodyCS);

			Cell cell20 = row.createCell(20);
			cell20.setCellValue(obj.getNoTareaDestino());
			cell20.setCellStyle(tableBodyCS);

			String feAsignaTarea = null;

			if(obj.getFeFinRealFisca() != null){
				feAsignaTarea = transformarFechaPre.format(obj.getFeAsignaTarea());
			} else {
				feAsignaTarea = "";
			}
			Cell cell21 = row.createCell(21);
			cell21.setCellValue(feAsignaTarea);
			cell21.setCellStyle(tableBodyCS);

			Cell cell22 = row.createCell(22);
			cell22.setCellValue(obj.getDeMensajeTarea());
			cell22.setCellStyle(tableBodyCS);

			Cell cell23 = row.createCell(23);
			cell23.setCellValue(obj.getNoTipoTransicion());
			cell23.setCellStyle(tableBodyCS);

			Cell cell24 = row.createCell(24);
			cell24.setCellValue(obj.getNoTipoPersonaOrigen());
			cell24.setCellStyle(tableBodyCS);

			Cell cell25 = row.createCell(25);
			cell25.setCellValue(obj.getNoPersonaOrigen());
			cell25.setCellStyle(tableBodyCS);

			Cell cell26 = row.createCell(26);
			cell26.setCellValue(obj.getNoTipoPersonaDestino());
			cell26.setCellStyle(tableBodyCS);

			Cell cell27 = row.createCell(27);
			cell27.setCellValue(obj.getNoPersonaDestino());
			cell27.setCellStyle(tableBodyCS);

			Cell cell28 = row.createCell(28);
			cell28.setCellValue(obj.getNuContrato());
			cell28.setCellStyle(tableBodyCS);

			Cell cell29 = row.createCell(29);
			cell29.setCellValue(obj.getRucEmpresaSupervisora());
			cell29.setCellStyle(tableBodyCS);

			Cell cell30 = row.createCell(30);
			cell30.setCellValue(obj.getNoEmpresaSupervisora());
			cell30.setCellStyle(tableBodyCS);

			// controlar manualmente cómo se vacían las filas en el disco
			if (rowNum % 200 == 0) {
				// retener 100 últimas filas y eliminar todas las demás
				((SXSSFSheet) sheet).flushRows(200);
			}

			rowNum++;
		}

		sheet.trackAllColumnsForAutoSizing();
		String[] columns = new String[31];
		// Resize a todas las columnas
		PoiExcelUtil.resizeAllColumnsInXSSFSheet(sheet, columns);

		// Resize a las columnas con merge field
		sheet.setColumnWidth(0, 5000); //AÑO PLAN
		sheet.setColumnWidth(1, 8000); //ESPECIALIDAD
		sheet.setColumnWidth(2, 8000); //DIVISIÓN SUPERVISORA
		sheet.setColumnWidth(3, 8000); //CÓDIGO FISCALIZACIÓN
		sheet.setColumnWidth(4, 10000); //NÚMERO DE EXPEDIENTE
		sheet.setColumnWidth(5, 8000); //FECHA DE INICIO PREVISTA
		sheet.setColumnWidth(6, 8000); //FECHA FIN PREVISTA
		sheet.setColumnWidth(7, 10000); //FECHA INICIO REAL
		sheet.setColumnWidth(8, 6000); //FECHA FIN REAL
		sheet.setColumnWidth(9, 5000); //PROPIEDAD
		sheet.setColumnWidth(10, 10000); //TIPO FISCALIZACIÓN
		sheet.setColumnWidth(11, 10000); //SUBTIPO FISCALIZACIÓN
		sheet.setColumnWidth(12, 10000); //MOTIVO FISCALIZACIÓN
		sheet.setColumnWidth(13, 10000); //CÓDIGO UNIDAD FISCALIZABLE
		sheet.setColumnWidth(14, 10000); //NOMBRE UNIDAD FISCALIZABLE
		sheet.setColumnWidth(15, 7000); //RUC AGENTE FISCALIZADO
		sheet.setColumnWidth(16, 20000); //NOMBRE AGENTE FISCALIZADO
		sheet.setColumnWidth(17, 11000); //NOMBRE FASE ORIGEN
		sheet.setColumnWidth(18, 15000); //NOMBRE TAREA ORIGEN
		sheet.setColumnWidth(19, 10000); //NOMBRE FASE DESTINO
		sheet.setColumnWidth(20, 16000); //NOMBRE TAREA DESTINO
		sheet.setColumnWidth(21, 11000); //FECHA DE ASIGNACIÓN TAREA
		sheet.setColumnWidth(22, 30000); //MENSAJE TAREA
		sheet.setColumnWidth(23, 10000); //TIPO TRANSICIÓN
		sheet.setColumnWidth(24, 10000); //TIPO PERSONA ORIGEN
		sheet.setColumnWidth(25, 10000);//PERSONA ORIGEN
		sheet.setColumnWidth(26, 10000);  //TIPO PERSONA DESTINO
		sheet.setColumnWidth(27, 10000);//PERSONA DESTINO
		sheet.setColumnWidth(28, 10000); //NÚMERO DE CONTRATO
		sheet.setColumnWidth(29, 10000); //RUC DE EMPRESA SUPERVISORA
		sheet.setColumnWidth(30, 20000); //EMPRESA SUPERVISORA

		// obtener la imagen y convertirlo a base64
		String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
		InputStream iSteamReader = new FileInputStream(ruta);
		byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
		String base64 = Base64.getEncoder().encodeToString(imageBytes);

		// Insertar imagen logotipo
		this.estaminService.addImgExcelSXSSF(workbook, sheet, base64, 1, 1, 0.22, 1);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		workbook.write(baos);

		byte[] archivo = baos.toByteArray();

		// cerrar el InputStream y ByteArrayOutputStream
		iSteamReader.close();
		baos.close();

		// Cerrar el libro de trabajo
		workbook.dispose();

		return archivo;
	}

	@Override
	public List<PgimRelacionscNotifDTO> obtenerRelacionConstNotificable(Long idSubcatDocumento) {
		List<PgimRelacionscNotifDTO> pgimRelacionscNotifDTO = this.relacionNotificacionRepository.obtenerRelacionConstNotificable(idSubcatDocumento);

		/* String mensajeError = null;

		if(pgimRelacionscNotifDTO == null){

			mensajeError = "No se encontró la subcategoría relacionada para notificación para la propiedad ''Documento notificado'' ";
			log.error(mensajeError);
			throw new PgimException(TipoResultado.WARNING, mensajeError);

		} */
		return pgimRelacionscNotifDTO;
	}

	@Override
	public List<PgimDestinatarioDocDTO> listarDestinatarioDoc(Long idSubcatDocumento, Long idInstanciaProceso, String nuExpedienteSiged, AuditoriaDTO auditoriaDTO) throws Exception {

		List<PgimDestinatarioDocDTO> lPgimDestinatarioDocDTO = this.destinatarioDocRepository.listarDestinatarioDoc(idSubcatDocumento, idInstanciaProceso);
		
		String mensajeError = null;

		if(lPgimDestinatarioDocDTO.size() == 0){

			mensajeError = "No se encontraron documentos notificables en la propiedad ''Documento notificado'' para definir la asociación a la constancia o cargo";
			log.error(mensajeError);

			throw new PgimException(TipoResultado.WARNING, mensajeError);
		}

		PgimDocumentoDTO pgimDocumentoDTOResultado = new PgimDocumentoDTO();

		Documentos documentosYArchivosSiged = documentoService.obtenerExpedienteDocumentoSiged(nuExpedienteSiged, "1", auditoriaDTO);

		for (PgimDestinatarioDocDTO pgimDestinatarioDocDTO: lPgimDestinatarioDocDTO){

			PgimDocumentoDTO pgimDocumentoDTO = documentoRepository.obtenerDocumentoPgimById(pgimDestinatarioDocDTO.getIdDocumento());

			if (documentosYArchivosSiged.getListaDocumento() == null || documentosYArchivosSiged.getListaDocumento().size() == 0) {
				
				pgimDocumentoDTOResultado = pgimDocumentoDTO;
				
			} else {

				pgimDocumentoDTOResultado = pgimDocumentoDTO;
	
				for (Documento docSiged : documentosYArchivosSiged.getListaDocumento()) {
					
					if (pgimDocumentoDTO.getCoDocumentoSiged().toString().equals(docSiged.getIdDocumento())) {
						pgimDocumentoDTOResultado.setNumeroDocumento(docSiged.getNroDocumento());

						break;
					}
				}

				String numeroDocumento = pgimDocumentoDTOResultado.getNumeroDocumento();
				String deAsuntoDocumento = pgimDocumentoDTO.getDeAsuntoDocumento();

				pgimDestinatarioDocDTO.setNumeroDocumento(numeroDocumento);
				pgimDestinatarioDocDTO.setDescDeAsuntoDocumento(deAsuntoDocumento);
			}
		}
		return lPgimDestinatarioDocDTO;
	}
	
	@Override
	public List<PgimDestinatarioDocDTO> listarDestinatarioPorIdDoc(Long idDocumento){
		
		List<PgimDestinatarioDocDTO> lPgimDestinatarioDocDTO = this.destinatarioDocRepository.listarDestinatarioPorIdDoc(idDocumento);
		return lPgimDestinatarioDocDTO;
	}
	

	@Transactional(readOnly = false)
	@Override
	public PgimDestinatarioDocDTO modificarDestinatarioDoc(PgimDestinatarioDocDTO pgimDestinatarioDocDTO, PgimDestinatarioDoc pgimDestinatarioDoc, AuditoriaDTO auditoriaDTO) throws Exception {

		pgimDestinatarioDoc.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDestinatarioDoc.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDestinatarioDoc.setIpActualizacion(auditoriaDTO.getTerminal());

		if (pgimDestinatarioDocDTO.getIdDestinatarioDoc() != null) {

			pgimDestinatarioDoc.setDocumentoConstancia(null);

		} else {
			if (pgimDestinatarioDocDTO.getIdDocumentoConstancia() != null) {

				pgimDestinatarioDoc.setDocumentoConstancia(new PgimDocumento());
				pgimDestinatarioDoc.getDocumentoConstancia().setIdDocumento(pgimDestinatarioDocDTO.getIdDocumentoConstancia());

			} else {
				pgimDestinatarioDoc.setDocumentoConstancia(null);
			}
		}

		PgimDestinatarioDoc pgimDestinatarioDocModificado = this.destinatarioDocRepository.save(pgimDestinatarioDoc);
		PgimDestinatarioDocDTO pgimDestinatarioDocDTOResultado = this.destinatarioDocRepository.obtenerDestinatarioDoc(pgimDestinatarioDocModificado.getIdDestinatarioDoc());

		return pgimDestinatarioDocDTOResultado;
	}

	@Transactional(readOnly = false)
	@Override
	public PgimDestinatarioDocDTO modificarDestinatarioDoc2(PgimDestinatarioDocDTO pgimDestinatarioDocDTO, PgimDestinatarioDoc pgimDestinatarioDoc, AuditoriaDTO auditoriaDTO) throws Exception {

		pgimDestinatarioDoc.setFeActualizacion(auditoriaDTO.getFecha());
		pgimDestinatarioDoc.setUsActualizacion(auditoriaDTO.getUsername());
		pgimDestinatarioDoc.setIpActualizacion(auditoriaDTO.getTerminal());

		if(pgimDestinatarioDocDTO.getIdDestinatarioDocActual() != null){
			
			if(pgimDestinatarioDocDTO.getIdDocumentoConstancia() != null){

				pgimDestinatarioDoc.setDocumentoConstancia(new PgimDocumento());
				pgimDestinatarioDoc.getDocumentoConstancia().setIdDocumento(pgimDestinatarioDocDTO.getIdDocumentoConstancia());

			}else{

				pgimDestinatarioDoc.setDocumentoConstancia(null);
				
			}
		}

		PgimDestinatarioDoc pgimDestinatarioDocModificado = this.destinatarioDocRepository.save(pgimDestinatarioDoc);
		PgimDestinatarioDocDTO pgimDestinatarioDocDTOResultado = this.destinatarioDocRepository.obtenerDestinatarioDoc(pgimDestinatarioDocModificado.getIdDestinatarioDoc());

		return pgimDestinatarioDocDTOResultado;
	}

	@Override
	public PgimDestinatarioDoc getByIdDestinatarioDoc(Long idDestinatarioDoc) throws Exception {
		return this.destinatarioDocRepository.findById(idDestinatarioDoc).orElse(null);
	}

	@Override
	public PgimDestinatarioDocDTO obtenerDestinatarioDocNotificable(Long idDocumentoConstancia) {
		PgimDestinatarioDocDTO pgimDestinatarioDocDTO = this.destinatarioDocRepository.obtenerDestinatarioDocNotificable(idDocumentoConstancia);
		return pgimDestinatarioDocDTO;
	}
	
	public ClaveValorUtil<Boolean, String> sePuedeEliminar(Long idDocumento, Long idInstanciaPaso) {
		Boolean sePuedeEliminar = true;
		String mensajeSePuedeEliminar = "";

		PgimDocumento pgimDocumento = this.documentoRepository.findById(idDocumento).orElse(null);
		Long idSubCatDocumento = pgimDocumento.getPgimSubcategoriaDoc().getIdSubcatDocumento();

		PgimSubcategoriaDoc pgimSubcategoriaDoc = this.subcategoriaDocRepository.findById(idSubCatDocumento).orElse(null);

		PgimInstanciaPaso pgimInstanciaPaso = this.instanciaPasoRepository.findById(idInstanciaPaso).orElse(null);
		Long idRelacionPasoDestino = pgimInstanciaPaso.getPgimRelacionPaso().getIdRelacionPaso();

		PgimRelacionPaso pgimRelacionPaso = this.relacionPasoRepository.findById(idRelacionPasoDestino).orElse(null);
		Long idPasoDestino = pgimRelacionPaso.getPasoProcesoDestino().getIdPasoProceso();

		PgimPasoProceso pgimPasoProceso = this.pasoProcesoRepository.findById(idPasoDestino).orElse(null);
		
		PgimPasoSubcatDTO pgimPasoSubcatDTO = this.pasoSubcatRepository.obtenerConfigPasoSubcat(pgimSubcategoriaDoc.getIdSubcatDocumento(), pgimPasoProceso.getIdPasoProceso());

		if (pgimPasoSubcatDTO != null) {
			if (pgimPasoSubcatDTO.getFlAdjuntadoManual().equals("0")) {
				mensajeSePuedeEliminar = "El documento no puede eliminarse debido a que esta subcategoría documental está configurada para generarse desde la PGIM";
				sePuedeEliminar = false;
			}
		} else {
			mensajeSePuedeEliminar = "El documento no puede eliminarse/excluirse ya que en la tarea actual del flujo de trabajo, no es posible eliminar esta subcategoría documental";
			sePuedeEliminar = false;
		}

		return new ClaveValorUtil(sePuedeEliminar, mensajeSePuedeEliminar);
	}

	@Override
	public PgimPasoSubcatDTO obtenerConfigPasoSubcat(Long idSubcatDocumento, Long idPasoProceso) {
		return this.pasoSubcatRepository.obtenerConfigPasoSubcat(idSubcatDocumento, idPasoProceso);
	}

	@Override
	public List<PgimPasoSubcatDTO> listarConfigPasoSubcat() {
		List<PgimPasoSubcatDTO> lPgimPasoSubcatDTO = this.pasoSubcatRepository.listarConfigPasoSubcat();
		return lPgimPasoSubcatDTO;
	}

	@Override
	public byte[] generarReporteUMFiscalizablesEXCEL(PgimSupervisionDTO filtro) throws Exception {
		
                List<PgimSupervisionDTO> lPgimSupervisionDTO = this.supervisionRepository.obtenerFiscalizacionPorUnidadMinera(filtro.getIdUnidadMinera(),
										filtro.getCoSupervision(),
		                        		filtro.getDescIdEspecialidad(),
		                        		filtro.getDescContrato(),
		                        		filtro.getFeInicioSupervisionReal(),
		                        		filtro.getFeFinSupervisionReal(),
                                        filtro.getDescPersonaDestino(),
                                        filtro.getDescIdFaseProceso(),
                                        filtro.getDescIdPasoProceso());

                // Crear una nueva instancia de SXSSFWorkbook
                SXSSFWorkbook workbook = new SXSSFWorkbook(-1);

                SXSSFSheet sheet = workbook.createSheet("FISCALIZACIONES_UM");

                // Crea las fuentes para los estilos
                Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14, IndexedColors.BLACK.getIndex());
                Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12, IndexedColors.BLACK.getIndex());
                Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10, IndexedColors.BLACK.getIndex());

                // Creando los estilos para las celdas
                CellStyle titleCS = workbook.createCellStyle();
                titleCS.setFont(titleFont);
                titleCS.setAlignment(HorizontalAlignment.CENTER);

                CellStyle subTitleCS = workbook.createCellStyle();
                subTitleCS.setFont(tableHeaderFont);
                subTitleCS.setAlignment(HorizontalAlignment.LEFT);

                CellStyle subTitleCS2 = workbook.createCellStyle();
                subTitleCS2.setFont(bodyFont);
                subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

                CellStyle tableHeaderCS = workbook.createCellStyle();
                tableHeaderCS.setFont(tableHeaderFont);
                tableHeaderCS.setBorderBottom(BorderStyle.THIN);
                tableHeaderCS.setBorderTop(BorderStyle.THIN);
                tableHeaderCS.setBorderRight(BorderStyle.THIN);
                tableHeaderCS.setBorderLeft(BorderStyle.THIN);
                tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
                tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
                tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

                CellStyle tableBodyCS = workbook.createCellStyle();
                tableBodyCS.setFont(bodyFont);
                tableBodyCS.setBorderBottom(BorderStyle.THIN);
                tableBodyCS.setBorderTop(BorderStyle.THIN);
                tableBodyCS.setBorderRight(BorderStyle.THIN);
                tableBodyCS.setBorderLeft(BorderStyle.THIN);

                // Crea el titulo
                Row headerRow = sheet.createRow(4);
                Cell titleCell = headerRow.createCell(0);
                titleCell.setCellValue(filtro.getDeTituloReporte());
                titleCell.setCellStyle(titleCS);
                sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 6));
                
				// Subtitulo de los periodos iniciales y finales
                Row headerRowPeriodos = sheet.createRow(5);
                Cell subTitleCell = headerRowPeriodos.createCell(0);
                subTitleCell.setCellValue(filtro.getDescCoUnidadMinera() + " - " + filtro.getDescNoUnidadMinera());
                sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, 6));
				
                // Fecha de generación
                Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9, IndexedColors.BLACK.getIndex());
                CellStyle fechaGeneracionStyle = workbook.createCellStyle();
                fechaGeneracionStyle.setFont(fechaGeneracionFont);
                fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

                // subtitulo del codigo y nombre de la unidad fiscalizable
                Font subtituloFont = PoiExcelUtil.createFont(workbook, false, (short) 12, IndexedColors.BLACK.getIndex());
                CellStyle subtituloFontStyle = workbook.createCellStyle();
                subtituloFontStyle.setFont(subtituloFont);
                subtituloFontStyle.setAlignment(HorizontalAlignment.CENTER);

                java.util.Date fechaActual = new Date();
                SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
                String fechaDeGeneracion = "Generado por la PGIM el: " + sdfg.format(fechaActual);

				SimpleDateFormat transformarFecha = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm");

                Cell fechaGenCell = headerRow.createCell(7);
                fechaGenCell.setCellValue(fechaDeGeneracion);
                fechaGenCell.setCellStyle(fechaGeneracionStyle);
				subTitleCell.setCellStyle(subtituloFontStyle);

                // Crea un espacio en blanco
                Row emptyRow = sheet.createRow(6);
                Cell emptyCell = emptyRow.createCell(0);
                emptyCell.setCellValue("");
                sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));

                // Creamos las cabeceras de la tabla
                Row tablaCabecera1 = sheet.createRow(7);

                Cell tc1Cell0 = tablaCabecera1.createCell(0);
                tc1Cell0.setCellValue("Código de la fiscalización");
                tc1Cell0.setCellStyle(tableHeaderCS);
                CellRangeAddress mrAnoPro = new CellRangeAddress(7, 8, 0, 0);
                sheet.addMergedRegion(mrAnoPro);

                Cell tc1Cell1 = tablaCabecera1.createCell(1);
                tc1Cell1.setCellValue("Especialidad");
                tc1Cell1.setCellStyle(tableHeaderCS);
                CellRangeAddress mrMes = new CellRangeAddress(7, 8, 1, 1);
                sheet.addMergedRegion(mrMes);

                Cell tc1Cell2 = tablaCabecera1.createCell(2);
                tc1Cell2.setCellValue("Número de contrato");
                tc1Cell2.setCellStyle(tableHeaderCS);
                CellRangeAddress mrIdCliente = new CellRangeAddress(7, 8, 2, 2);
                sheet.addMergedRegion(mrIdCliente);

                Cell tc1Cell3 = tablaCabecera1.createCell(3);
                tc1Cell3.setCellValue("Razón social de la empresa supervisora");
                tc1Cell3.setCellStyle(tableHeaderCS);
                CellRangeAddress mrRuc = new CellRangeAddress(7, 8, 3, 3);
                sheet.addMergedRegion(mrRuc);

                Cell tc1Cell4 = tablaCabecera1.createCell(4);
                tc1Cell4.setCellValue("Fecha de inicio real");
                tc1Cell4.setCellStyle(tableHeaderCS);
                CellRangeAddress mrTitularMinero = new CellRangeAddress(7, 8, 4, 4);
                sheet.addMergedRegion(mrTitularMinero);

                Cell tc1Cell5 = tablaCabecera1.createCell(5);
                tc1Cell5.setCellValue("Fecha de fin real");
                tc1Cell5.setCellStyle(tableHeaderCS);
                CellRangeAddress mrEstrato = new CellRangeAddress(7, 8, 5, 5);
                sheet.addMergedRegion(mrEstrato);

                Cell tc1Cell6 = tablaCabecera1.createCell(6);
                tc1Cell6.setCellValue("Persona actualmente asignada");
                tc1Cell6.setCellStyle(tableHeaderCS);
                CellRangeAddress mrCodigo = new CellRangeAddress(7, 8, 6, 6);
                sheet.addMergedRegion(mrCodigo);

                Cell tc1Cell7 = tablaCabecera1.createCell(7);
                tc1Cell7.setCellValue("Fase actual");
                tc1Cell7.setCellStyle(tableHeaderCS);
                CellRangeAddress mrUnidad = new CellRangeAddress(7, 8, 7, 7);
                sheet.addMergedRegion(mrUnidad);

                Cell tc1Cell8 = tablaCabecera1.createCell(8);
                tc1Cell8.setCellValue("Tarea actual");
                tc1Cell8.setCellStyle(tableHeaderCS);
                CellRangeAddress mrRecursoExtraido = new CellRangeAddress(7, 8, 8, 8);
                sheet.addMergedRegion(mrRecursoExtraido);

                Cell tc1Cell9 = tablaCabecera1.createCell(9);
                tc1Cell9.setCellValue("Tipo de fiscalización");
                tc1Cell9.setCellStyle(tableHeaderCS);
                CellRangeAddress mrDestino = new CellRangeAddress(7, 8, 9, 9);
                sheet.addMergedRegion(mrDestino);

                Cell tc1Cell10 = tablaCabecera1.createCell(10);
                tc1Cell10.setCellValue("Subtipo de fiscalización");
                tc1Cell10.setCellStyle(tableHeaderCS);
                CellRangeAddress mrPais = new CellRangeAddress(7, 8, 10, 10);
                sheet.addMergedRegion(mrPais);

                Cell tc1Cell11 = tablaCabecera1.createCell(11);
                tc1Cell11.setCellValue("Motivo de fiscalización");
                tc1Cell11.setCellStyle(tableHeaderCS);
                CellRangeAddress mrIdUnidadMedida = new CellRangeAddress(7, 8, 11, 11);
                sheet.addMergedRegion(mrIdUnidadMedida);

                Cell tc1Cell12 = tablaCabecera1.createCell(12);
                tc1Cell12.setCellValue("Programa de supervisión");
                tc1Cell12.setCellStyle(tableHeaderCS);
                CellRangeAddress mrDescripcion = new CellRangeAddress(7, 8, 12, 12);
                sheet.addMergedRegion(mrDescripcion);

                // Aplicamos los bordes a las celdas fusionadas
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrAnoPro, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrMes, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrIdCliente, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrRuc, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrTitularMinero, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrEstrato, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrCodigo, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrUnidad, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrRecursoExtraido, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrDestino, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrPais, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrIdUnidadMedida, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrDescripcion, sheet, workbook);

                // Creamos el detalle de la tabla
                int rowNum = 9;
                for (PgimSupervisionDTO obj : lPgimSupervisionDTO) {
                        Row row = sheet.createRow(rowNum++);

                        Cell cell0 = row.createCell(0);
                        cell0.setCellValue(obj.getCoSupervision());
                        cell0.setCellStyle(tableBodyCS);

                        Cell cell1 = row.createCell(1);
                        cell1.setCellValue(obj.getDescNoEspecialidad());
                        cell1.setCellStyle(tableBodyCS);

                        Cell cell2 = row.createCell(2);
                        cell2.setCellValue(obj.getDescDeNuContrato());
                        cell2.setCellStyle(tableBodyCS);

                        Cell cell3 = row.createCell(3);
                        cell3.setCellValue(obj.getDescEmpresaSupervisoraNoRazonSocial());
                        cell3.setCellStyle(tableBodyCS);

						if(obj.getFeInicioSupervisionReal() != null){
							Cell cell4 = row.createCell(4);
							cell4.setCellValue(transformarFecha.format(obj.getFeInicioSupervisionReal()));
							cell4.setCellStyle(tableBodyCS);
						}else{
							Cell cell4 = row.createCell(4);
							cell4.setCellValue("");
							cell4.setCellStyle(tableBodyCS);
						}
                        
						if(obj.getFeFinSupervisionReal() != null){
							Cell cell5 = row.createCell(5);
							cell5.setCellValue(transformarFecha.format(obj.getFeFinSupervisionReal()));
							cell5.setCellStyle(tableBodyCS);
						}else{
							Cell cell5 = row.createCell(5);
							cell5.setCellValue("");
							cell5.setCellStyle(tableBodyCS);
						}
                        

                        Cell cell6 = row.createCell(6);
                        cell6.setCellValue(obj.getDescPersonaDestino());
                        cell6.setCellStyle(tableBodyCS);

                        Cell cell7 = row.createCell(7);
                        cell7.setCellValue(obj.getDescNoFaseProceso());
                        cell7.setCellStyle(tableBodyCS);

                        Cell cell8 = row.createCell(8);
                        cell8.setCellValue(obj.getDescNoPasoProcesoDestino());
                        cell8.setCellStyle(tableBodyCS);

                        Cell cell9 = row.createCell(9);
                        cell9.setCellValue(obj.getDescTipoSupervision());
                        cell9.setCellStyle(tableBodyCS);

                        Cell cell10 = row.createCell(10);
                        cell10.setCellValue(obj.getDescSubtipoSupervision());
                        cell10.setCellStyle(tableBodyCS);

                        Cell cell11 = row.createCell(11);
                        cell11.setCellValue(obj.getDescDeMotivoSupervision());
                        cell11.setCellStyle(tableBodyCS);

                        Cell cell12 = row.createCell(12);
                        cell12.setCellValue(obj.getDescPrograma());
                        cell12.setCellStyle(tableBodyCS);
                }

                sheet.trackAllColumnsForAutoSizing();
                String[] columns = new String[16];
                // Resize a todas las columnas
                PoiExcelUtil.resizeAllColumnsInXSSFSheet(sheet, columns);

                // Resize a las columnas con merge field
                sheet.setColumnWidth(0, 10000);
                sheet.setColumnWidth(1, 10000);
                sheet.setColumnWidth(2, 10000);
                sheet.setColumnWidth(3, 20000);
                sheet.setColumnWidth(4, 10000);
                sheet.setColumnWidth(5, 8000);
                sheet.setColumnWidth(6, 15000);
                sheet.setColumnWidth(7, 15000);
                sheet.setColumnWidth(8, 15000);
                sheet.setColumnWidth(9, 10000);
                sheet.setColumnWidth(10, 10000);
                sheet.setColumnWidth(11, 10000);
                sheet.setColumnWidth(12, 10000);

                // obtener la imagen y convertirlo a base64
                String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
                InputStream iSteamReader = new FileInputStream(ruta);
                byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
                String base64 = Base64.getEncoder().encodeToString(imageBytes);

                // Insertar imagen logotipo
                this.estaminService.addImgExcelSXSSF(workbook, sheet, base64, 1, 1, 0.22, 1);

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                workbook.write(baos);

                byte[] archivo = baos.toByteArray();

				// cerrar el InputStream y ByteArrayOutputStream
                iSteamReader.close();
                baos.close();

                //Cerrar el libro de trabajo
                workbook.close();

                return archivo;
	}

	@Override
	public byte[] generarReportePasUMFiscalizablesEXCEL(PgimPasAuxDTO filtro) throws Exception {
		
                List<PgimPasAuxDTO> lPgimPasAuxDTO = this.pasAuxRepository.listarPasEnGeneral(filtro.getIdUnidadMinera(),
				filtro.getDescCoPas(),
				filtro.getIdEspecialidad(),
				filtro.getFeOrigenDocumento(),
				filtro.getIncumplimientos(),
				filtro.getInfracciones(),
				filtro.getNoPersonaAsignada(),
				filtro.getIdFaseActual(),
				filtro.getIdPasoActual(),
				filtro.getIdMotivoSupervision(),
				filtro.getDescPrograma(),
				filtro.getAsNoRazonSocial()
				);

                // Crear una nueva instancia de SXSSFWorkbook
                SXSSFWorkbook workbook = new SXSSFWorkbook(-1);

                SXSSFSheet sheet = workbook.createSheet("PAS_UM");

                // Crea las fuentes para los estilos
                Font titleFont = PoiExcelUtil.createFont(workbook, true, (short) 14, IndexedColors.BLACK.getIndex());
                Font tableHeaderFont = PoiExcelUtil.createFont(workbook, true, (short) 12, IndexedColors.BLACK.getIndex());
                Font bodyFont = PoiExcelUtil.createFont(workbook, false, (short) 10, IndexedColors.BLACK.getIndex());

                // Creando los estilos para las celdas
                CellStyle titleCS = workbook.createCellStyle();
                titleCS.setFont(titleFont);
                titleCS.setAlignment(HorizontalAlignment.CENTER);

                CellStyle subTitleCS = workbook.createCellStyle();
                subTitleCS.setFont(tableHeaderFont);
                subTitleCS.setAlignment(HorizontalAlignment.LEFT);

                CellStyle subTitleCS2 = workbook.createCellStyle();
                subTitleCS2.setFont(bodyFont);
                subTitleCS2.setAlignment(HorizontalAlignment.LEFT);

                CellStyle tableHeaderCS = workbook.createCellStyle();
                tableHeaderCS.setFont(tableHeaderFont);
                tableHeaderCS.setBorderBottom(BorderStyle.THIN);
                tableHeaderCS.setBorderTop(BorderStyle.THIN);
                tableHeaderCS.setBorderRight(BorderStyle.THIN);
                tableHeaderCS.setBorderLeft(BorderStyle.THIN);
                tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);
                tableHeaderCS.setVerticalAlignment(VerticalAlignment.CENTER);
                tableHeaderCS.setAlignment(HorizontalAlignment.CENTER);

                CellStyle tableBodyCS = workbook.createCellStyle();
                tableBodyCS.setFont(bodyFont);
                tableBodyCS.setBorderBottom(BorderStyle.THIN);
                tableBodyCS.setBorderTop(BorderStyle.THIN);
                tableBodyCS.setBorderRight(BorderStyle.THIN);
                tableBodyCS.setBorderLeft(BorderStyle.THIN);

                // Crea el titulo
                Row headerRow = sheet.createRow(4);
                Cell titleCell = headerRow.createCell(0);
                titleCell.setCellValue(filtro.getDeTituloReporte());
                titleCell.setCellStyle(titleCS);
                sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 6));
                
				// Subtitulo de los periodos iniciales y finales
                Row headerRowPeriodos = sheet.createRow(5);
                Cell subTitleCell = headerRowPeriodos.createCell(0);
                subTitleCell.setCellValue(filtro.getCoUnidadMinera() + " - " + filtro.getNoUnidadMinera());
                sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, 6));
				
                // Fecha de generación
                Font fechaGeneracionFont = PoiExcelUtil.createFont(workbook, false, (short) 9, IndexedColors.BLACK.getIndex());
                CellStyle fechaGeneracionStyle = workbook.createCellStyle();
                fechaGeneracionStyle.setFont(fechaGeneracionFont);
                fechaGeneracionStyle.setAlignment(HorizontalAlignment.CENTER);

                // subtitulo del codigo y nombre de la unidad fiscalizable
                Font subtituloFont = PoiExcelUtil.createFont(workbook, false, (short) 12, IndexedColors.BLACK.getIndex());
                CellStyle subtituloFontStyle = workbook.createCellStyle();
                subtituloFontStyle.setFont(subtituloFont);
                subtituloFontStyle.setAlignment(HorizontalAlignment.CENTER);

                java.util.Date fechaActual = new Date();
                SimpleDateFormat sdfg = new SimpleDateFormat("dd'/'MM'/'yyyy HH:mm:ss");
                String fechaDeGeneracion = "Generado por la PGIM el: " + sdfg.format(fechaActual);

				SimpleDateFormat transformarFecha = new SimpleDateFormat("dd'/'MM'/'yyyy");

                Cell fechaGenCell = headerRow.createCell(7);
                fechaGenCell.setCellValue(fechaDeGeneracion);
                fechaGenCell.setCellStyle(fechaGeneracionStyle);
				subTitleCell.setCellStyle(subtituloFontStyle);

                // Crea un espacio en blanco
                Row emptyRow = sheet.createRow(6);
                Cell emptyCell = emptyRow.createCell(0);
                emptyCell.setCellValue("");
                sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 10));

                // Creamos las cabeceras de la tabla
                Row tablaCabecera1 = sheet.createRow(7);

                Cell tc1Cell0 = tablaCabecera1.createCell(0);
                tc1Cell0.setCellValue("Código PAS");
                tc1Cell0.setCellStyle(tableHeaderCS);
                CellRangeAddress mrAnoPro = new CellRangeAddress(7, 8, 0, 0);
                sheet.addMergedRegion(mrAnoPro);

                Cell tc1Cell1 = tablaCabecera1.createCell(1);
                tc1Cell1.setCellValue("Especialidad");
                tc1Cell1.setCellStyle(tableHeaderCS);
                CellRangeAddress mrMes = new CellRangeAddress(7, 8, 1, 1);
                sheet.addMergedRegion(mrMes);

                Cell tc1Cell2 = tablaCabecera1.createCell(2);
                tc1Cell2.setCellValue("Fecha de notificación Oipas");
                tc1Cell2.setCellStyle(tableHeaderCS);
                CellRangeAddress mrIdCliente = new CellRangeAddress(7, 8, 2, 2);
                sheet.addMergedRegion(mrIdCliente);

                Cell tc1Cell3 = tablaCabecera1.createCell(3);
                tc1Cell3.setCellValue("Incumplimientos");
                tc1Cell3.setCellStyle(tableHeaderCS);
                CellRangeAddress mrRuc = new CellRangeAddress(7, 8, 3, 3);
                sheet.addMergedRegion(mrRuc);

                Cell tc1Cell4 = tablaCabecera1.createCell(4);
                tc1Cell4.setCellValue("Infracciones");
                tc1Cell4.setCellStyle(tableHeaderCS);
                CellRangeAddress mrTitularMinero = new CellRangeAddress(7, 8, 4, 4);
                sheet.addMergedRegion(mrTitularMinero);

                Cell tc1Cell5 = tablaCabecera1.createCell(5);
                tc1Cell5.setCellValue("Persona asignada");
                tc1Cell5.setCellStyle(tableHeaderCS);
                CellRangeAddress mrEstrato = new CellRangeAddress(7, 8, 5, 5);
                sheet.addMergedRegion(mrEstrato);

                Cell tc1Cell6 = tablaCabecera1.createCell(6);
                tc1Cell6.setCellValue("Fase actual");
                tc1Cell6.setCellStyle(tableHeaderCS);
                CellRangeAddress mrCodigo = new CellRangeAddress(7, 8, 6, 6);
                sheet.addMergedRegion(mrCodigo);

                Cell tc1Cell7 = tablaCabecera1.createCell(7);
                tc1Cell7.setCellValue("Tarea actual");
                tc1Cell7.setCellStyle(tableHeaderCS);
                CellRangeAddress mrUnidad = new CellRangeAddress(7, 8, 7, 7);
                sheet.addMergedRegion(mrUnidad);

                Cell tc1Cell8 = tablaCabecera1.createCell(8);
                tc1Cell8.setCellValue("Motivo");
                tc1Cell8.setCellStyle(tableHeaderCS);
                CellRangeAddress mrRecursoExtraido = new CellRangeAddress(7, 8, 8, 8);
                sheet.addMergedRegion(mrRecursoExtraido);

                Cell tc1Cell9 = tablaCabecera1.createCell(9);
                tc1Cell9.setCellValue("Programa");
                tc1Cell9.setCellStyle(tableHeaderCS);
                CellRangeAddress mrDestino = new CellRangeAddress(7, 8, 9, 9);
                sheet.addMergedRegion(mrDestino);

                Cell tc1Cell10 = tablaCabecera1.createCell(10);
                tc1Cell10.setCellValue("Agente fiscalizado");
                tc1Cell10.setCellStyle(tableHeaderCS);
                CellRangeAddress mrPais = new CellRangeAddress(7, 8, 10, 10);
                sheet.addMergedRegion(mrPais);

                // Aplicamos los bordes a las celdas fusionadas
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrAnoPro, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrMes, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrIdCliente, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrRuc, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrTitularMinero, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrEstrato, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrCodigo, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrUnidad, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrRecursoExtraido, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrDestino, sheet, workbook);
                PoiExcelUtil.setBorderToMergeCellSXSSF(BorderStyle.THIN, mrPais, sheet, workbook);

                // Creamos el detalle de la tabla
                int rowNum = 9;
                for (PgimPasAuxDTO obj : lPgimPasAuxDTO) {
                        Row row = sheet.createRow(rowNum++);

                        Cell cell0 = row.createCell(0);
                        cell0.setCellValue(obj.getDescCoPas());
                        cell0.setCellStyle(tableBodyCS);

                        Cell cell1 = row.createCell(1);
                        cell1.setCellValue(obj.getNoEspecialidad());
                        cell1.setCellStyle(tableBodyCS);

						if(obj.getFeOrigenDocumento() != null){
							Cell cell2 = row.createCell(2);
							cell2.setCellValue(transformarFecha.format(obj.getFeOrigenDocumento()));
							cell2.setCellStyle(tableBodyCS);
						}else{
							Cell cell2 = row.createCell(2);
							cell2.setCellValue("");
							cell2.setCellStyle(tableBodyCS);
						}

                        Cell cell3 = row.createCell(3);
                        cell3.setCellValue(obj.getIncumplimientos());
                        cell3.setCellStyle(tableBodyCS);

						Cell cell4 = row.createCell(4);
						cell4.setCellValue(obj.getInfracciones());
						cell4.setCellStyle(tableBodyCS);
                        
						Cell cell5 = row.createCell(5);
						cell5.setCellValue(obj.getNoPersonaAsignada());
						cell5.setCellStyle(tableBodyCS);

                        Cell cell6 = row.createCell(6);
                        cell6.setCellValue(obj.getNoFaseActual());
                        cell6.setCellStyle(tableBodyCS);

                        Cell cell7 = row.createCell(7);
                        cell7.setCellValue(obj.getNoPasoActual());
                        cell7.setCellStyle(tableBodyCS);

                        Cell cell8 = row.createCell(8);
                        cell8.setCellValue(obj.getDeMotivoSupervision());
                        cell8.setCellStyle(tableBodyCS);

                        Cell cell9 = row.createCell(9);
                        cell9.setCellValue(obj.getDescPrograma());
                        cell9.setCellStyle(tableBodyCS);

                        Cell cell10 = row.createCell(10);
                        cell10.setCellValue(obj.getAsCoDocumentoIdentidad() + " - " + obj.getAsNoRazonSocial());
                        cell10.setCellStyle(tableBodyCS);
                }

                sheet.trackAllColumnsForAutoSizing();
                String[] columns = new String[16];
                // Resize a todas las columnas
                PoiExcelUtil.resizeAllColumnsInXSSFSheet(sheet, columns);

                // Resize a las columnas con merge field
                sheet.setColumnWidth(0, 10000);
                sheet.setColumnWidth(1, 10000);
                sheet.setColumnWidth(2, 10000);
                sheet.setColumnWidth(3, 20000);
                sheet.setColumnWidth(4, 16000);
                sheet.setColumnWidth(5, 8000);
                sheet.setColumnWidth(6, 15000);
                sheet.setColumnWidth(7, 15000);
                sheet.setColumnWidth(8, 15000);
                sheet.setColumnWidth(9, 10000);
                sheet.setColumnWidth(10, 15000);
				
                // obtener la imagen y convertirlo a base64
                String ruta = propertiesConfig.getFilesRepo() + ConstantesUtil.PARAM_LOGO_OSI;
                InputStream iSteamReader = new FileInputStream(ruta);
                byte[] imageBytes = IOUtils.toByteArray(iSteamReader);
                String base64 = Base64.getEncoder().encodeToString(imageBytes);

                // Insertar imagen logotipo
                this.estaminService.addImgExcelSXSSF(workbook, sheet, base64, 1, 1, 0.22, 1);

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                workbook.write(baos);

                byte[] archivo = baos.toByteArray();

				// cerrar el InputStream y ByteArrayOutputStream
                iSteamReader.close();
                baos.close();

                //Cerrar el libro de trabajo
                workbook.close();

                return archivo;
	}

	@Override
	public List<PgimDocumentoDTO> obtenerDocumentosPorSubcategoria(Long idInstanciaProceso,
			Long idSubcategoriaDocumento) {
		return this.documentoRepository.obtenerDocumentosPorSubcategoria(idInstanciaProceso, idSubcategoriaDocumento);
	}
}
